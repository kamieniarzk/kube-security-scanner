[
  {
    "object_name": "Pod/v1/kube-system/antrea-controller-horizontal-autoscaler-7b69d9bfd7-9859f",
    "type_meta": {
      "kind": "Pod",
      "apiVersion": "v1"
    },
    "object_meta": {
      "name": "antrea-controller-horizontal-autoscaler-7b69d9bfd7-9859f",
      "generateName": "antrea-controller-horizontal-autoscaler-7b69d9bfd7-",
      "namespace": "kube-system",
      "resourceVersion": "1884",
      "creationTimestamp": null,
      "labels": {
        "k8s-app": "antrea-controller-autoscaler",
        "pod-template-hash": "7b69d9bfd7"
      },
      "ownerReferences": [
        {
          "apiVersion": "apps/v1",
          "kind": "ReplicaSet",
          "name": "antrea-controller-horizontal-autoscaler-7b69d9bfd7",
          "uid": "f8d011f5-d371-4943-b6f8-e3c0c15bcbf6",
          "controller": true,
          "blockOwnerDeletion": true
        }
      ]
    },
    "checks": [
      {
        "check": {
          "name": "Stable version",
          "id": "stable-version",
          "target_type": "all",
          "comment": "Checks if the object is using a deprecated apiVersion",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Label values",
          "id": "label-values",
          "target_type": "all",
          "comment": "Validates label values",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Stable version",
          "id": "stable-version",
          "target_type": "all",
          "comment": "Checks if the object is using a deprecated apiVersion",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Label values",
          "id": "label-values",
          "target_type": "all",
          "comment": "Validates label values",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Container Resources",
          "id": "container-resources",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "autoscaler",
            "summary": "CPU limit is not set",
            "description": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu"
          },
          {
            "path": "autoscaler",
            "summary": "Memory limit is not set",
            "description": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.memory"
          },
          {
            "path": "autoscaler",
            "summary": "Memory request is not set",
            "description": "Resource requests are recommended to make sure that the application can start and run without crashing. Set resources.requests.memory"
          }
        ]
      },
      {
        "check": {
          "name": "Container CPU Requests Equal Limits",
          "id": "container-cpu-requests-equal-limits",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have the same CPU requests as limits set.",
          "optional": true
        },
        "grade": 1,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-cpu-requests-equal-limits is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Image Pull Policy",
          "id": "container-image-pull-policy",
          "target_type": "Pod",
          "comment": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "autoscaler",
            "summary": "ImagePullPolicy is not set to Always",
            "description": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want."
          }
        ]
      },
      {
        "check": {
          "name": "Environment Variable Key Duplication",
          "id": "environment-variable-key-duplication",
          "target_type": "Pod",
          "comment": "Makes sure that duplicated environment variable keys are not duplicated",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Container Security Context Privileged",
          "id": "container-security-context-privileged",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have a unprivileged security context set",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Container Ports Check",
          "id": "container-ports-check",
          "target_type": "Pod",
          "comment": "Container Ports Checks",
          "optional": true
        },
        "grade": 10,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-ports-check is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Resource Requests Equal Limits",
          "id": "container-resource-requests-equal-limits",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have the same requests as limits on resources set.",
          "optional": true
        },
        "grade": 1,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-resource-requests-equal-limits is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Memory Requests Equal Limits",
          "id": "container-memory-requests-equal-limits",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have the same memory requests as limits set.",
          "optional": true
        },
        "grade": 10,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-memory-requests-equal-limits is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Ephemeral Storage Request and Limit",
          "id": "container-ephemeral-storage-request-and-limit",
          "target_type": "Pod",
          "comment": "Makes sure all pods have ephemeral-storage requests and limits set",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "autoscaler",
            "summary": "Ephemeral Storage limit is not set",
            "description": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage"
          }
        ]
      },
      {
        "check": {
          "name": "Container Ephemeral Storage Request Equals Limit",
          "id": "container-ephemeral-storage-request-equals-limit",
          "target_type": "Pod",
          "comment": "Make sure all pods have matching ephemeral-storage requests and limits",
          "optional": true
        },
        "grade": 10,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-ephemeral-storage-request-equals-limit is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Pod NetworkPolicy",
          "id": "pod-networkpolicy",
          "target_type": "Pod",
          "comment": "Makes sure that all Pods are targeted by a NetworkPolicy",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "",
            "summary": "The pod does not have a matching NetworkPolicy",
            "description": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect."
          }
        ]
      },
      {
        "check": {
          "name": "Pod Probes",
          "id": "pod-probes",
          "target_type": "Pod",
          "comment": "Makes sure that all Pods have safe probe configurations",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": [
          {
            "path": "",
            "summary": "The pod is not targeted by a service, skipping probe checks.",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Security Context ReadOnlyRootFilesystem",
          "id": "container-security-context-readonlyrootfilesystem",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have a security context with read only filesystem set",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "autoscaler",
            "summary": "The pod has a container with a writable root filesystem",
            "description": "Set securityContext.readOnlyRootFilesystem to true"
          }
        ]
      },
      {
        "check": {
          "name": "Container Seccomp Profile",
          "id": "container-seccomp-profile",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have at a seccomp policy configured.",
          "optional": true
        },
        "grade": 5,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-seccomp-profile is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Image Tag",
          "id": "container-image-tag",
          "target_type": "Pod",
          "comment": "Makes sure that a explicit non-latest tag is used",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Container Security Context User Group ID",
          "id": "container-security-context-user-group-id",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have a security context with valid UID and GID set ",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "autoscaler",
            "summary": "The container is running with a low user ID",
            "description": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value \u003e 10000"
          },
          {
            "path": "autoscaler",
            "summary": "The container running with a low group ID",
            "description": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value \u003e 10000"
          }
        ]
      },
      {
        "check": {
          "name": "Container Image Tag",
          "id": "container-image-tag",
          "target_type": "Pod",
          "comment": "Makes sure that a explicit non-latest tag is used",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Container Security Context User Group ID",
          "id": "container-security-context-user-group-id",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have a security context with valid UID and GID set ",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "autoscaler",
            "summary": "The container is running with a low user ID",
            "description": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value \u003e 10000"
          },
          {
            "path": "autoscaler",
            "summary": "The container running with a low group ID",
            "description": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value \u003e 10000"
          }
        ]
      },
      {
        "check": {
          "name": "Container Security Context Privileged",
          "id": "container-security-context-privileged",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have a unprivileged security context set",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Container Resources",
          "id": "container-resources",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "autoscaler",
            "summary": "CPU limit is not set",
            "description": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu"
          },
          {
            "path": "autoscaler",
            "summary": "Memory limit is not set",
            "description": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.memory"
          },
          {
            "path": "autoscaler",
            "summary": "Memory request is not set",
            "description": "Resource requests are recommended to make sure that the application can start and run without crashing. Set resources.requests.memory"
          }
        ]
      },
      {
        "check": {
          "name": "Container CPU Requests Equal Limits",
          "id": "container-cpu-requests-equal-limits",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have the same CPU requests as limits set.",
          "optional": true
        },
        "grade": 1,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-cpu-requests-equal-limits is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Image Pull Policy",
          "id": "container-image-pull-policy",
          "target_type": "Pod",
          "comment": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "autoscaler",
            "summary": "ImagePullPolicy is not set to Always",
            "description": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want."
          }
        ]
      },
      {
        "check": {
          "name": "Environment Variable Key Duplication",
          "id": "environment-variable-key-duplication",
          "target_type": "Pod",
          "comment": "Makes sure that duplicated environment variable keys are not duplicated",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Container Ports Check",
          "id": "container-ports-check",
          "target_type": "Pod",
          "comment": "Container Ports Checks",
          "optional": true
        },
        "grade": 10,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-ports-check is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Pod NetworkPolicy",
          "id": "pod-networkpolicy",
          "target_type": "Pod",
          "comment": "Makes sure that all Pods are targeted by a NetworkPolicy",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "",
            "summary": "The pod does not have a matching NetworkPolicy",
            "description": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect."
          }
        ]
      },
      {
        "check": {
          "name": "Pod Probes",
          "id": "pod-probes",
          "target_type": "Pod",
          "comment": "Makes sure that all Pods have safe probe configurations",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": [
          {
            "path": "",
            "summary": "The pod is not targeted by a service, skipping probe checks.",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Security Context ReadOnlyRootFilesystem",
          "id": "container-security-context-readonlyrootfilesystem",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have a security context with read only filesystem set",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "autoscaler",
            "summary": "The pod has a container with a writable root filesystem",
            "description": "Set securityContext.readOnlyRootFilesystem to true"
          }
        ]
      },
      {
        "check": {
          "name": "Container Seccomp Profile",
          "id": "container-seccomp-profile",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have at a seccomp policy configured.",
          "optional": true
        },
        "grade": 5,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-seccomp-profile is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Resource Requests Equal Limits",
          "id": "container-resource-requests-equal-limits",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have the same requests as limits on resources set.",
          "optional": true
        },
        "grade": 1,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-resource-requests-equal-limits is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Memory Requests Equal Limits",
          "id": "container-memory-requests-equal-limits",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have the same memory requests as limits set.",
          "optional": true
        },
        "grade": 10,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-memory-requests-equal-limits is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Ephemeral Storage Request and Limit",
          "id": "container-ephemeral-storage-request-and-limit",
          "target_type": "Pod",
          "comment": "Makes sure all pods have ephemeral-storage requests and limits set",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "autoscaler",
            "summary": "Ephemeral Storage limit is not set",
            "description": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage"
          }
        ]
      },
      {
        "check": {
          "name": "Container Ephemeral Storage Request Equals Limit",
          "id": "container-ephemeral-storage-request-equals-limit",
          "target_type": "Pod",
          "comment": "Make sure all pods have matching ephemeral-storage requests and limits",
          "optional": true
        },
        "grade": 10,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-ephemeral-storage-request-equals-limit is ignored",
            "description": ""
          }
        ]
      }
    ],
    "file_name": "/tmp/kube-security-scanner/yaml/ALL/ALL.yaml",
    "file_row": 17773
  },
  {
    "object_name": "Service/v1/kube-system/kube-dns",
    "type_meta": {
      "kind": "Service",
      "apiVersion": "v1"
    },
    "object_meta": {
      "name": "kube-dns",
      "namespace": "kube-system",
      "resourceVersion": "269",
      "creationTimestamp": null,
      "labels": {
        "addonmanager.kubernetes.io/mode": "Reconcile",
        "k8s-app": "kube-dns",
        "kubernetes.io/cluster-service": "true",
        "kubernetes.io/name": "KubeDNS"
      }
    },
    "checks": [
      {
        "check": {
          "name": "Label values",
          "id": "label-values",
          "target_type": "all",
          "comment": "Validates label values",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Stable version",
          "id": "stable-version",
          "target_type": "all",
          "comment": "Checks if the object is using a deprecated apiVersion",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Service Targets Pod",
          "id": "service-targets-pod",
          "target_type": "Service",
          "comment": "Makes sure that all Services targets a Pod",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Service Type",
          "id": "service-type",
          "target_type": "Service",
          "comment": "Makes sure that the Service type is not NodePort",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      }
    ],
    "file_name": "/tmp/kube-security-scanner/yaml/ALL/ALL.yaml",
    "file_row": 14936
  },
  {
    "object_name": "Pod/v1/kcs/kcs-deployment-75bb888888-pqhb8",
    "type_meta": {
      "kind": "Pod",
      "apiVersion": "v1"
    },
    "object_meta": {
      "name": "kcs-deployment-75bb888888-pqhb8",
      "generateName": "kcs-deployment-75bb888888-",
      "namespace": "kcs",
      "resourceVersion": "720415",
      "creationTimestamp": null,
      "labels": {
        "app": "kcs",
        "pod-template-hash": "75bb888888"
      },
      "ownerReferences": [
        {
          "apiVersion": "apps/v1",
          "kind": "ReplicaSet",
          "name": "kcs-deployment-75bb888888",
          "uid": "cc71c8a5-c81c-4ae2-aa4f-ccc67c0755c6",
          "controller": true,
          "blockOwnerDeletion": true
        }
      ]
    },
    "checks": [
      {
        "check": {
          "name": "Stable version",
          "id": "stable-version",
          "target_type": "all",
          "comment": "Checks if the object is using a deprecated apiVersion",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Label values",
          "id": "label-values",
          "target_type": "all",
          "comment": "Validates label values",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Stable version",
          "id": "stable-version",
          "target_type": "all",
          "comment": "Checks if the object is using a deprecated apiVersion",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Label values",
          "id": "label-values",
          "target_type": "all",
          "comment": "Validates label values",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Container Ports Check",
          "id": "container-ports-check",
          "target_type": "Pod",
          "comment": "Container Ports Checks",
          "optional": true
        },
        "grade": 10,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-ports-check is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Memory Requests Equal Limits",
          "id": "container-memory-requests-equal-limits",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have the same memory requests as limits set.",
          "optional": true
        },
        "grade": 10,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-memory-requests-equal-limits is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Ephemeral Storage Request and Limit",
          "id": "container-ephemeral-storage-request-and-limit",
          "target_type": "Pod",
          "comment": "Makes sure all pods have ephemeral-storage requests and limits set",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "kcs",
            "summary": "Ephemeral Storage limit is not set",
            "description": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage"
          }
        ]
      },
      {
        "check": {
          "name": "Container Ephemeral Storage Request Equals Limit",
          "id": "container-ephemeral-storage-request-equals-limit",
          "target_type": "Pod",
          "comment": "Make sure all pods have matching ephemeral-storage requests and limits",
          "optional": true
        },
        "grade": 10,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-ephemeral-storage-request-equals-limit is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Pod NetworkPolicy",
          "id": "pod-networkpolicy",
          "target_type": "Pod",
          "comment": "Makes sure that all Pods are targeted by a NetworkPolicy",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "",
            "summary": "The pod does not have a matching NetworkPolicy",
            "description": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect."
          }
        ]
      },
      {
        "check": {
          "name": "Pod Probes",
          "id": "pod-probes",
          "target_type": "Pod",
          "comment": "Makes sure that all Pods have safe probe configurations",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": [
          {
            "path": "",
            "summary": "The pod is not targeted by a service, skipping probe checks.",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Security Context ReadOnlyRootFilesystem",
          "id": "container-security-context-readonlyrootfilesystem",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have a security context with read only filesystem set",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "kcs",
            "summary": "Container has no configured security context",
            "description": "Set securityContext to run the container in a more secure context."
          }
        ]
      },
      {
        "check": {
          "name": "Container Seccomp Profile",
          "id": "container-seccomp-profile",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have at a seccomp policy configured.",
          "optional": true
        },
        "grade": 5,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-seccomp-profile is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Resource Requests Equal Limits",
          "id": "container-resource-requests-equal-limits",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have the same requests as limits on resources set.",
          "optional": true
        },
        "grade": 10,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-resource-requests-equal-limits is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Security Context User Group ID",
          "id": "container-security-context-user-group-id",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have a security context with valid UID and GID set ",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "kcs",
            "summary": "The container is running with a low user ID",
            "description": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value \u003e 10000"
          },
          {
            "path": "kcs",
            "summary": "The container running with a low group ID",
            "description": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value \u003e 10000"
          }
        ]
      },
      {
        "check": {
          "name": "Container Image Tag",
          "id": "container-image-tag",
          "target_type": "Pod",
          "comment": "Makes sure that a explicit non-latest tag is used",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "kcs",
            "summary": "Image with latest tag",
            "description": "Using a fixed tag is recommended to avoid accidental upgrades"
          }
        ]
      },
      {
        "check": {
          "name": "Container CPU Requests Equal Limits",
          "id": "container-cpu-requests-equal-limits",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have the same CPU requests as limits set.",
          "optional": true
        },
        "grade": 10,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-cpu-requests-equal-limits is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Image Pull Policy",
          "id": "container-image-pull-policy",
          "target_type": "Pod",
          "comment": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Environment Variable Key Duplication",
          "id": "environment-variable-key-duplication",
          "target_type": "Pod",
          "comment": "Makes sure that duplicated environment variable keys are not duplicated",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Container Security Context Privileged",
          "id": "container-security-context-privileged",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have a unprivileged security context set",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Container Resources",
          "id": "container-resources",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "kcs",
            "summary": "CPU limit is not set",
            "description": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu"
          },
          {
            "path": "kcs",
            "summary": "Memory limit is not set",
            "description": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.memory"
          },
          {
            "path": "kcs",
            "summary": "CPU request is not set",
            "description": "Resource requests are recommended to make sure that the application can start and run without crashing. Set resources.requests.cpu"
          },
          {
            "path": "kcs",
            "summary": "Memory request is not set",
            "description": "Resource requests are recommended to make sure that the application can start and run without crashing. Set resources.requests.memory"
          }
        ]
      },
      {
        "check": {
          "name": "Container Image Tag",
          "id": "container-image-tag",
          "target_type": "Pod",
          "comment": "Makes sure that a explicit non-latest tag is used",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "kcs",
            "summary": "Image with latest tag",
            "description": "Using a fixed tag is recommended to avoid accidental upgrades"
          }
        ]
      },
      {
        "check": {
          "name": "Container Security Context User Group ID",
          "id": "container-security-context-user-group-id",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have a security context with valid UID and GID set ",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "kcs",
            "summary": "The container is running with a low user ID",
            "description": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value \u003e 10000"
          },
          {
            "path": "kcs",
            "summary": "The container running with a low group ID",
            "description": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value \u003e 10000"
          }
        ]
      },
      {
        "check": {
          "name": "Container Resources",
          "id": "container-resources",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "kcs",
            "summary": "CPU limit is not set",
            "description": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu"
          },
          {
            "path": "kcs",
            "summary": "Memory limit is not set",
            "description": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.memory"
          },
          {
            "path": "kcs",
            "summary": "CPU request is not set",
            "description": "Resource requests are recommended to make sure that the application can start and run without crashing. Set resources.requests.cpu"
          },
          {
            "path": "kcs",
            "summary": "Memory request is not set",
            "description": "Resource requests are recommended to make sure that the application can start and run without crashing. Set resources.requests.memory"
          }
        ]
      },
      {
        "check": {
          "name": "Container CPU Requests Equal Limits",
          "id": "container-cpu-requests-equal-limits",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have the same CPU requests as limits set.",
          "optional": true
        },
        "grade": 10,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-cpu-requests-equal-limits is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Image Pull Policy",
          "id": "container-image-pull-policy",
          "target_type": "Pod",
          "comment": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Environment Variable Key Duplication",
          "id": "environment-variable-key-duplication",
          "target_type": "Pod",
          "comment": "Makes sure that duplicated environment variable keys are not duplicated",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Container Security Context Privileged",
          "id": "container-security-context-privileged",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have a unprivileged security context set",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Container Ports Check",
          "id": "container-ports-check",
          "target_type": "Pod",
          "comment": "Container Ports Checks",
          "optional": true
        },
        "grade": 10,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-ports-check is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Seccomp Profile",
          "id": "container-seccomp-profile",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have at a seccomp policy configured.",
          "optional": true
        },
        "grade": 5,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-seccomp-profile is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Resource Requests Equal Limits",
          "id": "container-resource-requests-equal-limits",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have the same requests as limits on resources set.",
          "optional": true
        },
        "grade": 10,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-resource-requests-equal-limits is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Memory Requests Equal Limits",
          "id": "container-memory-requests-equal-limits",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have the same memory requests as limits set.",
          "optional": true
        },
        "grade": 10,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-memory-requests-equal-limits is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Ephemeral Storage Request and Limit",
          "id": "container-ephemeral-storage-request-and-limit",
          "target_type": "Pod",
          "comment": "Makes sure all pods have ephemeral-storage requests and limits set",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "kcs",
            "summary": "Ephemeral Storage limit is not set",
            "description": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage"
          }
        ]
      },
      {
        "check": {
          "name": "Container Ephemeral Storage Request Equals Limit",
          "id": "container-ephemeral-storage-request-equals-limit",
          "target_type": "Pod",
          "comment": "Make sure all pods have matching ephemeral-storage requests and limits",
          "optional": true
        },
        "grade": 10,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-ephemeral-storage-request-equals-limit is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Pod NetworkPolicy",
          "id": "pod-networkpolicy",
          "target_type": "Pod",
          "comment": "Makes sure that all Pods are targeted by a NetworkPolicy",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "",
            "summary": "The pod does not have a matching NetworkPolicy",
            "description": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect."
          }
        ]
      },
      {
        "check": {
          "name": "Pod Probes",
          "id": "pod-probes",
          "target_type": "Pod",
          "comment": "Makes sure that all Pods have safe probe configurations",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": [
          {
            "path": "",
            "summary": "The pod is not targeted by a service, skipping probe checks.",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Security Context ReadOnlyRootFilesystem",
          "id": "container-security-context-readonlyrootfilesystem",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have a security context with read only filesystem set",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "kcs",
            "summary": "Container has no configured security context",
            "description": "Set securityContext to run the container in a more secure context."
          }
        ]
      }
    ],
    "file_name": "/tmp/kube-security-scanner/yaml/ALL/ALL.yaml",
    "file_row": 3678
  },
  {
    "object_name": "Pod/v1/kube-system/anetd-lfwvr",
    "type_meta": {
      "kind": "Pod",
      "apiVersion": "v1"
    },
    "object_meta": {
      "name": "anetd-lfwvr",
      "generateName": "anetd-",
      "namespace": "kube-system",
      "resourceVersion": "1732",
      "creationTimestamp": null,
      "labels": {
        "controller-revision-hash": "5599688675",
        "k8s-app": "cilium",
        "pod-template-generation": "1"
      },
      "ownerReferences": [
        {
          "apiVersion": "apps/v1",
          "kind": "DaemonSet",
          "name": "anetd",
          "uid": "c36ec083-64b7-4007-a8cc-201754daa7ba",
          "controller": true,
          "blockOwnerDeletion": true
        }
      ]
    },
    "checks": [
      {
        "check": {
          "name": "Stable version",
          "id": "stable-version",
          "target_type": "all",
          "comment": "Checks if the object is using a deprecated apiVersion",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Label values",
          "id": "label-values",
          "target_type": "all",
          "comment": "Validates label values",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Stable version",
          "id": "stable-version",
          "target_type": "all",
          "comment": "Checks if the object is using a deprecated apiVersion",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Label values",
          "id": "label-values",
          "target_type": "all",
          "comment": "Validates label values",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Container Ports Check",
          "id": "container-ports-check",
          "target_type": "Pod",
          "comment": "Container Ports Checks",
          "optional": true
        },
        "grade": 10,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-ports-check is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Pod Probes",
          "id": "pod-probes",
          "target_type": "Pod",
          "comment": "Makes sure that all Pods have safe probe configurations",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "",
            "summary": "Container has the same readiness and liveness probe",
            "description": "Using the same probe for liveness and readiness is very likely dangerous. Generally it's better to avoid the livenessProbe than re-using the readinessProbe."
          }
        ]
      },
      {
        "check": {
          "name": "Container Security Context ReadOnlyRootFilesystem",
          "id": "container-security-context-readonlyrootfilesystem",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have a security context with read only filesystem set",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "clean-cilium-state",
            "summary": "The pod has a container with a writable root filesystem",
            "description": "Set securityContext.readOnlyRootFilesystem to true"
          },
          {
            "path": "apply-sysctl-overwrites",
            "summary": "The pod has a container with a writable root filesystem",
            "description": "Set securityContext.readOnlyRootFilesystem to true"
          },
          {
            "path": "install-cni-binaries",
            "summary": "The pod has a container with a writable root filesystem",
            "description": "Set securityContext.readOnlyRootFilesystem to true"
          },
          {
            "path": "cilium-agent",
            "summary": "The pod has a container with a writable root filesystem",
            "description": "Set securityContext.readOnlyRootFilesystem to true"
          }
        ]
      },
      {
        "check": {
          "name": "Container Seccomp Profile",
          "id": "container-seccomp-profile",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have at a seccomp policy configured.",
          "optional": true
        },
        "grade": 5,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-seccomp-profile is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Resource Requests Equal Limits",
          "id": "container-resource-requests-equal-limits",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have the same requests as limits on resources set.",
          "optional": true
        },
        "grade": 1,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-resource-requests-equal-limits is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Memory Requests Equal Limits",
          "id": "container-memory-requests-equal-limits",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have the same memory requests as limits set.",
          "optional": true
        },
        "grade": 1,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-memory-requests-equal-limits is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Ephemeral Storage Request and Limit",
          "id": "container-ephemeral-storage-request-and-limit",
          "target_type": "Pod",
          "comment": "Makes sure all pods have ephemeral-storage requests and limits set",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "clean-cilium-state",
            "summary": "Ephemeral Storage limit is not set",
            "description": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage"
          },
          {
            "path": "apply-sysctl-overwrites",
            "summary": "Ephemeral Storage limit is not set",
            "description": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage"
          },
          {
            "path": "install-cni-binaries",
            "summary": "Ephemeral Storage limit is not set",
            "description": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage"
          },
          {
            "path": "cilium-agent",
            "summary": "Ephemeral Storage limit is not set",
            "description": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage"
          }
        ]
      },
      {
        "check": {
          "name": "Container Ephemeral Storage Request Equals Limit",
          "id": "container-ephemeral-storage-request-equals-limit",
          "target_type": "Pod",
          "comment": "Make sure all pods have matching ephemeral-storage requests and limits",
          "optional": true
        },
        "grade": 10,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-ephemeral-storage-request-equals-limit is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Pod NetworkPolicy",
          "id": "pod-networkpolicy",
          "target_type": "Pod",
          "comment": "Makes sure that all Pods are targeted by a NetworkPolicy",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "",
            "summary": "The pod does not have a matching NetworkPolicy",
            "description": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect."
          }
        ]
      },
      {
        "check": {
          "name": "Container Image Tag",
          "id": "container-image-tag",
          "target_type": "Pod",
          "comment": "Makes sure that a explicit non-latest tag is used",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Container Security Context User Group ID",
          "id": "container-security-context-user-group-id",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have a security context with valid UID and GID set ",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "clean-cilium-state",
            "summary": "The container is running with a low user ID",
            "description": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value \u003e 10000"
          },
          {
            "path": "clean-cilium-state",
            "summary": "The container running with a low group ID",
            "description": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value \u003e 10000"
          },
          {
            "path": "apply-sysctl-overwrites",
            "summary": "The container is running with a low user ID",
            "description": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value \u003e 10000"
          },
          {
            "path": "apply-sysctl-overwrites",
            "summary": "The container running with a low group ID",
            "description": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value \u003e 10000"
          },
          {
            "path": "install-cni-binaries",
            "summary": "The container is running with a low user ID",
            "description": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value \u003e 10000"
          },
          {
            "path": "install-cni-binaries",
            "summary": "The container running with a low group ID",
            "description": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value \u003e 10000"
          },
          {
            "path": "cilium-agent",
            "summary": "The container is running with a low user ID",
            "description": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value \u003e 10000"
          },
          {
            "path": "cilium-agent",
            "summary": "The container running with a low group ID",
            "description": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value \u003e 10000"
          }
        ]
      },
      {
        "check": {
          "name": "Container Resources",
          "id": "container-resources",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "clean-cilium-state",
            "summary": "CPU limit is not set",
            "description": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu"
          },
          {
            "path": "clean-cilium-state",
            "summary": "Memory limit is not set",
            "description": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.memory"
          },
          {
            "path": "clean-cilium-state",
            "summary": "CPU request is not set",
            "description": "Resource requests are recommended to make sure that the application can start and run without crashing. Set resources.requests.cpu"
          },
          {
            "path": "clean-cilium-state",
            "summary": "Memory request is not set",
            "description": "Resource requests are recommended to make sure that the application can start and run without crashing. Set resources.requests.memory"
          },
          {
            "path": "apply-sysctl-overwrites",
            "summary": "CPU limit is not set",
            "description": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu"
          },
          {
            "path": "apply-sysctl-overwrites",
            "summary": "Memory limit is not set",
            "description": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.memory"
          },
          {
            "path": "install-cni-binaries",
            "summary": "CPU limit is not set",
            "description": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu"
          },
          {
            "path": "install-cni-binaries",
            "summary": "Memory limit is not set",
            "description": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.memory"
          },
          {
            "path": "cilium-agent",
            "summary": "CPU limit is not set",
            "description": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu"
          },
          {
            "path": "cilium-agent",
            "summary": "Memory limit is not set",
            "description": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.memory"
          },
          {
            "path": "cilium-agent",
            "summary": "CPU request is not set",
            "description": "Resource requests are recommended to make sure that the application can start and run without crashing. Set resources.requests.cpu"
          },
          {
            "path": "cilium-agent",
            "summary": "Memory request is not set",
            "description": "Resource requests are recommended to make sure that the application can start and run without crashing. Set resources.requests.memory"
          }
        ]
      },
      {
        "check": {
          "name": "Container CPU Requests Equal Limits",
          "id": "container-cpu-requests-equal-limits",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have the same CPU requests as limits set.",
          "optional": true
        },
        "grade": 1,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-cpu-requests-equal-limits is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Image Pull Policy",
          "id": "container-image-pull-policy",
          "target_type": "Pod",
          "comment": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "clean-cilium-state",
            "summary": "ImagePullPolicy is not set to Always",
            "description": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want."
          },
          {
            "path": "apply-sysctl-overwrites",
            "summary": "ImagePullPolicy is not set to Always",
            "description": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want."
          },
          {
            "path": "install-cni-binaries",
            "summary": "ImagePullPolicy is not set to Always",
            "description": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want."
          },
          {
            "path": "cilium-agent",
            "summary": "ImagePullPolicy is not set to Always",
            "description": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want."
          }
        ]
      },
      {
        "check": {
          "name": "Environment Variable Key Duplication",
          "id": "environment-variable-key-duplication",
          "target_type": "Pod",
          "comment": "Makes sure that duplicated environment variable keys are not duplicated",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Container Security Context Privileged",
          "id": "container-security-context-privileged",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have a unprivileged security context set",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "clean-cilium-state",
            "summary": "The container is privileged",
            "description": "Set securityContext.privileged to false. Privileged containers can access all devices on the host, and grants almost the same access as non-containerized processes on the host."
          },
          {
            "path": "apply-sysctl-overwrites",
            "summary": "The container is privileged",
            "description": "Set securityContext.privileged to false. Privileged containers can access all devices on the host, and grants almost the same access as non-containerized processes on the host."
          },
          {
            "path": "cilium-agent",
            "summary": "The container is privileged",
            "description": "Set securityContext.privileged to false. Privileged containers can access all devices on the host, and grants almost the same access as non-containerized processes on the host."
          }
        ]
      },
      {
        "check": {
          "name": "Environment Variable Key Duplication",
          "id": "environment-variable-key-duplication",
          "target_type": "Pod",
          "comment": "Makes sure that duplicated environment variable keys are not duplicated",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Container Security Context Privileged",
          "id": "container-security-context-privileged",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have a unprivileged security context set",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "clean-cilium-state",
            "summary": "The container is privileged",
            "description": "Set securityContext.privileged to false. Privileged containers can access all devices on the host, and grants almost the same access as non-containerized processes on the host."
          },
          {
            "path": "apply-sysctl-overwrites",
            "summary": "The container is privileged",
            "description": "Set securityContext.privileged to false. Privileged containers can access all devices on the host, and grants almost the same access as non-containerized processes on the host."
          },
          {
            "path": "cilium-agent",
            "summary": "The container is privileged",
            "description": "Set securityContext.privileged to false. Privileged containers can access all devices on the host, and grants almost the same access as non-containerized processes on the host."
          }
        ]
      },
      {
        "check": {
          "name": "Container Resources",
          "id": "container-resources",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "clean-cilium-state",
            "summary": "CPU limit is not set",
            "description": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu"
          },
          {
            "path": "clean-cilium-state",
            "summary": "Memory limit is not set",
            "description": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.memory"
          },
          {
            "path": "clean-cilium-state",
            "summary": "CPU request is not set",
            "description": "Resource requests are recommended to make sure that the application can start and run without crashing. Set resources.requests.cpu"
          },
          {
            "path": "clean-cilium-state",
            "summary": "Memory request is not set",
            "description": "Resource requests are recommended to make sure that the application can start and run without crashing. Set resources.requests.memory"
          },
          {
            "path": "apply-sysctl-overwrites",
            "summary": "CPU limit is not set",
            "description": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu"
          },
          {
            "path": "apply-sysctl-overwrites",
            "summary": "Memory limit is not set",
            "description": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.memory"
          },
          {
            "path": "install-cni-binaries",
            "summary": "CPU limit is not set",
            "description": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu"
          },
          {
            "path": "install-cni-binaries",
            "summary": "Memory limit is not set",
            "description": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.memory"
          },
          {
            "path": "cilium-agent",
            "summary": "CPU limit is not set",
            "description": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu"
          },
          {
            "path": "cilium-agent",
            "summary": "Memory limit is not set",
            "description": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.memory"
          },
          {
            "path": "cilium-agent",
            "summary": "CPU request is not set",
            "description": "Resource requests are recommended to make sure that the application can start and run without crashing. Set resources.requests.cpu"
          },
          {
            "path": "cilium-agent",
            "summary": "Memory request is not set",
            "description": "Resource requests are recommended to make sure that the application can start and run without crashing. Set resources.requests.memory"
          }
        ]
      },
      {
        "check": {
          "name": "Container CPU Requests Equal Limits",
          "id": "container-cpu-requests-equal-limits",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have the same CPU requests as limits set.",
          "optional": true
        },
        "grade": 1,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-cpu-requests-equal-limits is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Image Pull Policy",
          "id": "container-image-pull-policy",
          "target_type": "Pod",
          "comment": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "clean-cilium-state",
            "summary": "ImagePullPolicy is not set to Always",
            "description": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want."
          },
          {
            "path": "apply-sysctl-overwrites",
            "summary": "ImagePullPolicy is not set to Always",
            "description": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want."
          },
          {
            "path": "install-cni-binaries",
            "summary": "ImagePullPolicy is not set to Always",
            "description": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want."
          },
          {
            "path": "cilium-agent",
            "summary": "ImagePullPolicy is not set to Always",
            "description": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want."
          }
        ]
      },
      {
        "check": {
          "name": "Container Ports Check",
          "id": "container-ports-check",
          "target_type": "Pod",
          "comment": "Container Ports Checks",
          "optional": true
        },
        "grade": 10,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-ports-check is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Ephemeral Storage Request Equals Limit",
          "id": "container-ephemeral-storage-request-equals-limit",
          "target_type": "Pod",
          "comment": "Make sure all pods have matching ephemeral-storage requests and limits",
          "optional": true
        },
        "grade": 10,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-ephemeral-storage-request-equals-limit is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Pod NetworkPolicy",
          "id": "pod-networkpolicy",
          "target_type": "Pod",
          "comment": "Makes sure that all Pods are targeted by a NetworkPolicy",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "",
            "summary": "The pod does not have a matching NetworkPolicy",
            "description": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect."
          }
        ]
      },
      {
        "check": {
          "name": "Pod Probes",
          "id": "pod-probes",
          "target_type": "Pod",
          "comment": "Makes sure that all Pods have safe probe configurations",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "",
            "summary": "Container has the same readiness and liveness probe",
            "description": "Using the same probe for liveness and readiness is very likely dangerous. Generally it's better to avoid the livenessProbe than re-using the readinessProbe."
          }
        ]
      },
      {
        "check": {
          "name": "Container Security Context ReadOnlyRootFilesystem",
          "id": "container-security-context-readonlyrootfilesystem",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have a security context with read only filesystem set",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "clean-cilium-state",
            "summary": "The pod has a container with a writable root filesystem",
            "description": "Set securityContext.readOnlyRootFilesystem to true"
          },
          {
            "path": "apply-sysctl-overwrites",
            "summary": "The pod has a container with a writable root filesystem",
            "description": "Set securityContext.readOnlyRootFilesystem to true"
          },
          {
            "path": "install-cni-binaries",
            "summary": "The pod has a container with a writable root filesystem",
            "description": "Set securityContext.readOnlyRootFilesystem to true"
          },
          {
            "path": "cilium-agent",
            "summary": "The pod has a container with a writable root filesystem",
            "description": "Set securityContext.readOnlyRootFilesystem to true"
          }
        ]
      },
      {
        "check": {
          "name": "Container Seccomp Profile",
          "id": "container-seccomp-profile",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have at a seccomp policy configured.",
          "optional": true
        },
        "grade": 5,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-seccomp-profile is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Resource Requests Equal Limits",
          "id": "container-resource-requests-equal-limits",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have the same requests as limits on resources set.",
          "optional": true
        },
        "grade": 1,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-resource-requests-equal-limits is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Memory Requests Equal Limits",
          "id": "container-memory-requests-equal-limits",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have the same memory requests as limits set.",
          "optional": true
        },
        "grade": 1,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-memory-requests-equal-limits is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Ephemeral Storage Request and Limit",
          "id": "container-ephemeral-storage-request-and-limit",
          "target_type": "Pod",
          "comment": "Makes sure all pods have ephemeral-storage requests and limits set",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "clean-cilium-state",
            "summary": "Ephemeral Storage limit is not set",
            "description": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage"
          },
          {
            "path": "apply-sysctl-overwrites",
            "summary": "Ephemeral Storage limit is not set",
            "description": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage"
          },
          {
            "path": "install-cni-binaries",
            "summary": "Ephemeral Storage limit is not set",
            "description": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage"
          },
          {
            "path": "cilium-agent",
            "summary": "Ephemeral Storage limit is not set",
            "description": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage"
          }
        ]
      },
      {
        "check": {
          "name": "Container Image Tag",
          "id": "container-image-tag",
          "target_type": "Pod",
          "comment": "Makes sure that a explicit non-latest tag is used",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Container Security Context User Group ID",
          "id": "container-security-context-user-group-id",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have a security context with valid UID and GID set ",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "clean-cilium-state",
            "summary": "The container is running with a low user ID",
            "description": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value \u003e 10000"
          },
          {
            "path": "clean-cilium-state",
            "summary": "The container running with a low group ID",
            "description": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value \u003e 10000"
          },
          {
            "path": "apply-sysctl-overwrites",
            "summary": "The container is running with a low user ID",
            "description": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value \u003e 10000"
          },
          {
            "path": "apply-sysctl-overwrites",
            "summary": "The container running with a low group ID",
            "description": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value \u003e 10000"
          },
          {
            "path": "install-cni-binaries",
            "summary": "The container is running with a low user ID",
            "description": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value \u003e 10000"
          },
          {
            "path": "install-cni-binaries",
            "summary": "The container running with a low group ID",
            "description": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value \u003e 10000"
          },
          {
            "path": "cilium-agent",
            "summary": "The container is running with a low user ID",
            "description": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value \u003e 10000"
          },
          {
            "path": "cilium-agent",
            "summary": "The container running with a low group ID",
            "description": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value \u003e 10000"
          }
        ]
      }
    ],
    "file_name": "/tmp/kube-security-scanner/yaml/ALL/ALL.yaml",
    "file_row": 17404
  },
  {
    "object_name": "Pod/v1/kube-system/kube-dns-5bfd847c64-m9dnl",
    "type_meta": {
      "kind": "Pod",
      "apiVersion": "v1"
    },
    "object_meta": {
      "name": "kube-dns-5bfd847c64-m9dnl",
      "generateName": "kube-dns-5bfd847c64-",
      "namespace": "kube-system",
      "resourceVersion": "2081",
      "creationTimestamp": null,
      "labels": {
        "k8s-app": "kube-dns",
        "pod-template-hash": "5bfd847c64"
      },
      "ownerReferences": [
        {
          "apiVersion": "apps/v1",
          "kind": "ReplicaSet",
          "name": "kube-dns-5bfd847c64",
          "uid": "f43d9640-e8de-47f7-b3da-dca02b560f07",
          "controller": true,
          "blockOwnerDeletion": true
        }
      ]
    },
    "checks": [
      {
        "check": {
          "name": "Stable version",
          "id": "stable-version",
          "target_type": "all",
          "comment": "Checks if the object is using a deprecated apiVersion",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Label values",
          "id": "label-values",
          "target_type": "all",
          "comment": "Validates label values",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Stable version",
          "id": "stable-version",
          "target_type": "all",
          "comment": "Checks if the object is using a deprecated apiVersion",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Label values",
          "id": "label-values",
          "target_type": "all",
          "comment": "Validates label values",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Container Ports Check",
          "id": "container-ports-check",
          "target_type": "Pod",
          "comment": "Container Ports Checks",
          "optional": true
        },
        "grade": 10,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-ports-check is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Seccomp Profile",
          "id": "container-seccomp-profile",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have at a seccomp policy configured.",
          "optional": true
        },
        "grade": 5,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-seccomp-profile is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Resource Requests Equal Limits",
          "id": "container-resource-requests-equal-limits",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have the same requests as limits on resources set.",
          "optional": true
        },
        "grade": 1,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-resource-requests-equal-limits is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Memory Requests Equal Limits",
          "id": "container-memory-requests-equal-limits",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have the same memory requests as limits set.",
          "optional": true
        },
        "grade": 1,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-memory-requests-equal-limits is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Ephemeral Storage Request and Limit",
          "id": "container-ephemeral-storage-request-and-limit",
          "target_type": "Pod",
          "comment": "Makes sure all pods have ephemeral-storage requests and limits set",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "kubedns",
            "summary": "Ephemeral Storage limit is not set",
            "description": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage"
          },
          {
            "path": "dnsmasq",
            "summary": "Ephemeral Storage limit is not set",
            "description": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage"
          },
          {
            "path": "sidecar",
            "summary": "Ephemeral Storage limit is not set",
            "description": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage"
          },
          {
            "path": "prometheus-to-sd",
            "summary": "Ephemeral Storage limit is not set",
            "description": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage"
          }
        ]
      },
      {
        "check": {
          "name": "Container Ephemeral Storage Request Equals Limit",
          "id": "container-ephemeral-storage-request-equals-limit",
          "target_type": "Pod",
          "comment": "Make sure all pods have matching ephemeral-storage requests and limits",
          "optional": true
        },
        "grade": 10,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-ephemeral-storage-request-equals-limit is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Pod NetworkPolicy",
          "id": "pod-networkpolicy",
          "target_type": "Pod",
          "comment": "Makes sure that all Pods are targeted by a NetworkPolicy",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "",
            "summary": "The pod does not have a matching NetworkPolicy",
            "description": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect."
          }
        ]
      },
      {
        "check": {
          "name": "Pod Probes",
          "id": "pod-probes",
          "target_type": "Pod",
          "comment": "Makes sure that all Pods have safe probe configurations",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Container Security Context ReadOnlyRootFilesystem",
          "id": "container-security-context-readonlyrootfilesystem",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have a security context with read only filesystem set",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "dnsmasq",
            "summary": "The pod has a container with a writable root filesystem",
            "description": "Set securityContext.readOnlyRootFilesystem to true"
          }
        ]
      },
      {
        "check": {
          "name": "Container Image Tag",
          "id": "container-image-tag",
          "target_type": "Pod",
          "comment": "Makes sure that a explicit non-latest tag is used",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Container Security Context User Group ID",
          "id": "container-security-context-user-group-id",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have a security context with valid UID and GID set ",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "kubedns",
            "summary": "The container is running with a low user ID",
            "description": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value \u003e 10000"
          },
          {
            "path": "kubedns",
            "summary": "The container running with a low group ID",
            "description": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value \u003e 10000"
          },
          {
            "path": "dnsmasq",
            "summary": "The container is running with a low user ID",
            "description": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value \u003e 10000"
          },
          {
            "path": "dnsmasq",
            "summary": "The container running with a low group ID",
            "description": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value \u003e 10000"
          },
          {
            "path": "sidecar",
            "summary": "The container is running with a low user ID",
            "description": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value \u003e 10000"
          },
          {
            "path": "sidecar",
            "summary": "The container running with a low group ID",
            "description": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value \u003e 10000"
          },
          {
            "path": "prometheus-to-sd",
            "summary": "The container is running with a low user ID",
            "description": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value \u003e 10000"
          },
          {
            "path": "prometheus-to-sd",
            "summary": "The container running with a low group ID",
            "description": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value \u003e 10000"
          }
        ]
      },
      {
        "check": {
          "name": "Container Resources",
          "id": "container-resources",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "kubedns",
            "summary": "CPU limit is not set",
            "description": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu"
          },
          {
            "path": "dnsmasq",
            "summary": "CPU limit is not set",
            "description": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu"
          },
          {
            "path": "dnsmasq",
            "summary": "Memory limit is not set",
            "description": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.memory"
          },
          {
            "path": "sidecar",
            "summary": "CPU limit is not set",
            "description": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu"
          },
          {
            "path": "sidecar",
            "summary": "Memory limit is not set",
            "description": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.memory"
          },
          {
            "path": "prometheus-to-sd",
            "summary": "CPU limit is not set",
            "description": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu"
          },
          {
            "path": "prometheus-to-sd",
            "summary": "Memory limit is not set",
            "description": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.memory"
          },
          {
            "path": "prometheus-to-sd",
            "summary": "CPU request is not set",
            "description": "Resource requests are recommended to make sure that the application can start and run without crashing. Set resources.requests.cpu"
          },
          {
            "path": "prometheus-to-sd",
            "summary": "Memory request is not set",
            "description": "Resource requests are recommended to make sure that the application can start and run without crashing. Set resources.requests.memory"
          }
        ]
      },
      {
        "check": {
          "name": "Container CPU Requests Equal Limits",
          "id": "container-cpu-requests-equal-limits",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have the same CPU requests as limits set.",
          "optional": true
        },
        "grade": 1,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-cpu-requests-equal-limits is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Image Pull Policy",
          "id": "container-image-pull-policy",
          "target_type": "Pod",
          "comment": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "kubedns",
            "summary": "ImagePullPolicy is not set to Always",
            "description": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want."
          },
          {
            "path": "dnsmasq",
            "summary": "ImagePullPolicy is not set to Always",
            "description": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want."
          },
          {
            "path": "sidecar",
            "summary": "ImagePullPolicy is not set to Always",
            "description": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want."
          },
          {
            "path": "prometheus-to-sd",
            "summary": "ImagePullPolicy is not set to Always",
            "description": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want."
          }
        ]
      },
      {
        "check": {
          "name": "Environment Variable Key Duplication",
          "id": "environment-variable-key-duplication",
          "target_type": "Pod",
          "comment": "Makes sure that duplicated environment variable keys are not duplicated",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Container Security Context Privileged",
          "id": "container-security-context-privileged",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have a unprivileged security context set",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Container Memory Requests Equal Limits",
          "id": "container-memory-requests-equal-limits",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have the same memory requests as limits set.",
          "optional": true
        },
        "grade": 1,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-memory-requests-equal-limits is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Ephemeral Storage Request and Limit",
          "id": "container-ephemeral-storage-request-and-limit",
          "target_type": "Pod",
          "comment": "Makes sure all pods have ephemeral-storage requests and limits set",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "kubedns",
            "summary": "Ephemeral Storage limit is not set",
            "description": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage"
          },
          {
            "path": "dnsmasq",
            "summary": "Ephemeral Storage limit is not set",
            "description": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage"
          },
          {
            "path": "sidecar",
            "summary": "Ephemeral Storage limit is not set",
            "description": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage"
          },
          {
            "path": "prometheus-to-sd",
            "summary": "Ephemeral Storage limit is not set",
            "description": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage"
          }
        ]
      },
      {
        "check": {
          "name": "Container Ephemeral Storage Request Equals Limit",
          "id": "container-ephemeral-storage-request-equals-limit",
          "target_type": "Pod",
          "comment": "Make sure all pods have matching ephemeral-storage requests and limits",
          "optional": true
        },
        "grade": 10,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-ephemeral-storage-request-equals-limit is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Pod NetworkPolicy",
          "id": "pod-networkpolicy",
          "target_type": "Pod",
          "comment": "Makes sure that all Pods are targeted by a NetworkPolicy",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "",
            "summary": "The pod does not have a matching NetworkPolicy",
            "description": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect."
          }
        ]
      },
      {
        "check": {
          "name": "Pod Probes",
          "id": "pod-probes",
          "target_type": "Pod",
          "comment": "Makes sure that all Pods have safe probe configurations",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Container Security Context ReadOnlyRootFilesystem",
          "id": "container-security-context-readonlyrootfilesystem",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have a security context with read only filesystem set",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "dnsmasq",
            "summary": "The pod has a container with a writable root filesystem",
            "description": "Set securityContext.readOnlyRootFilesystem to true"
          }
        ]
      },
      {
        "check": {
          "name": "Container Seccomp Profile",
          "id": "container-seccomp-profile",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have at a seccomp policy configured.",
          "optional": true
        },
        "grade": 5,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-seccomp-profile is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Resource Requests Equal Limits",
          "id": "container-resource-requests-equal-limits",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have the same requests as limits on resources set.",
          "optional": true
        },
        "grade": 1,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-resource-requests-equal-limits is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Security Context User Group ID",
          "id": "container-security-context-user-group-id",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have a security context with valid UID and GID set ",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "kubedns",
            "summary": "The container is running with a low user ID",
            "description": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value \u003e 10000"
          },
          {
            "path": "kubedns",
            "summary": "The container running with a low group ID",
            "description": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value \u003e 10000"
          },
          {
            "path": "dnsmasq",
            "summary": "The container is running with a low user ID",
            "description": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value \u003e 10000"
          },
          {
            "path": "dnsmasq",
            "summary": "The container running with a low group ID",
            "description": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value \u003e 10000"
          },
          {
            "path": "sidecar",
            "summary": "The container is running with a low user ID",
            "description": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value \u003e 10000"
          },
          {
            "path": "sidecar",
            "summary": "The container running with a low group ID",
            "description": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value \u003e 10000"
          },
          {
            "path": "prometheus-to-sd",
            "summary": "The container is running with a low user ID",
            "description": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value \u003e 10000"
          },
          {
            "path": "prometheus-to-sd",
            "summary": "The container running with a low group ID",
            "description": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value \u003e 10000"
          }
        ]
      },
      {
        "check": {
          "name": "Container Image Tag",
          "id": "container-image-tag",
          "target_type": "Pod",
          "comment": "Makes sure that a explicit non-latest tag is used",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Container CPU Requests Equal Limits",
          "id": "container-cpu-requests-equal-limits",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have the same CPU requests as limits set.",
          "optional": true
        },
        "grade": 1,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-cpu-requests-equal-limits is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Image Pull Policy",
          "id": "container-image-pull-policy",
          "target_type": "Pod",
          "comment": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "kubedns",
            "summary": "ImagePullPolicy is not set to Always",
            "description": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want."
          },
          {
            "path": "dnsmasq",
            "summary": "ImagePullPolicy is not set to Always",
            "description": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want."
          },
          {
            "path": "sidecar",
            "summary": "ImagePullPolicy is not set to Always",
            "description": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want."
          },
          {
            "path": "prometheus-to-sd",
            "summary": "ImagePullPolicy is not set to Always",
            "description": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want."
          }
        ]
      },
      {
        "check": {
          "name": "Environment Variable Key Duplication",
          "id": "environment-variable-key-duplication",
          "target_type": "Pod",
          "comment": "Makes sure that duplicated environment variable keys are not duplicated",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Container Security Context Privileged",
          "id": "container-security-context-privileged",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have a unprivileged security context set",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Container Resources",
          "id": "container-resources",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "kubedns",
            "summary": "CPU limit is not set",
            "description": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu"
          },
          {
            "path": "dnsmasq",
            "summary": "CPU limit is not set",
            "description": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu"
          },
          {
            "path": "dnsmasq",
            "summary": "Memory limit is not set",
            "description": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.memory"
          },
          {
            "path": "sidecar",
            "summary": "CPU limit is not set",
            "description": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu"
          },
          {
            "path": "sidecar",
            "summary": "Memory limit is not set",
            "description": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.memory"
          },
          {
            "path": "prometheus-to-sd",
            "summary": "CPU limit is not set",
            "description": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu"
          },
          {
            "path": "prometheus-to-sd",
            "summary": "Memory limit is not set",
            "description": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.memory"
          },
          {
            "path": "prometheus-to-sd",
            "summary": "CPU request is not set",
            "description": "Resource requests are recommended to make sure that the application can start and run without crashing. Set resources.requests.cpu"
          },
          {
            "path": "prometheus-to-sd",
            "summary": "Memory request is not set",
            "description": "Resource requests are recommended to make sure that the application can start and run without crashing. Set resources.requests.memory"
          }
        ]
      },
      {
        "check": {
          "name": "Container Ports Check",
          "id": "container-ports-check",
          "target_type": "Pod",
          "comment": "Container Ports Checks",
          "optional": true
        },
        "grade": 10,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-ports-check is ignored",
            "description": ""
          }
        ]
      }
    ],
    "file_name": "/tmp/kube-security-scanner/yaml/ALL/ALL.yaml",
    "file_row": 19117
  },
  {
    "object_name": "Service/v1/kube-system/default-http-backend",
    "type_meta": {
      "kind": "Service",
      "apiVersion": "v1"
    },
    "object_meta": {
      "name": "default-http-backend",
      "namespace": "kube-system",
      "resourceVersion": "652",
      "creationTimestamp": null,
      "labels": {
        "addonmanager.kubernetes.io/mode": "Reconcile",
        "k8s-app": "glbc",
        "kubernetes.io/cluster-service": "true",
        "kubernetes.io/name": "GLBCDefaultBackend"
      }
    },
    "checks": [
      {
        "check": {
          "name": "Stable version",
          "id": "stable-version",
          "target_type": "all",
          "comment": "Checks if the object is using a deprecated apiVersion",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Label values",
          "id": "label-values",
          "target_type": "all",
          "comment": "Validates label values",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Service Targets Pod",
          "id": "service-targets-pod",
          "target_type": "Service",
          "comment": "Makes sure that all Services targets a Pod",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Service Type",
          "id": "service-type",
          "target_type": "Service",
          "comment": "Makes sure that the Service type is not NodePort",
          "optional": false
        },
        "grade": 5,
        "skipped": false,
        "comments": [
          {
            "path": "",
            "summary": "The service is of type NodePort",
            "description": "NodePort services should be avoided as they are insecure, and can not be used together with NetworkPolicies. LoadBalancers or use of an Ingress is recommended over NodePorts."
          }
        ]
      }
    ],
    "file_name": "/tmp/kube-security-scanner/yaml/ALL/ALL.yaml",
    "file_row": 14905
  },
  {
    "object_name": "Pod/v1/gmp-system/rule-evaluator-6788997454-q8hfx",
    "type_meta": {
      "kind": "Pod",
      "apiVersion": "v1"
    },
    "object_meta": {
      "name": "rule-evaluator-6788997454-q8hfx",
      "generateName": "rule-evaluator-6788997454-",
      "namespace": "gmp-system",
      "resourceVersion": "2120",
      "creationTimestamp": null,
      "labels": {
        "app": "managed-prometheus-rule-evaluator",
        "app.kubernetes.io/name": "rule-evaluator",
        "app.kubernetes.io/version": "0.7.4",
        "pod-template-hash": "6788997454"
      },
      "ownerReferences": [
        {
          "apiVersion": "apps/v1",
          "kind": "ReplicaSet",
          "name": "rule-evaluator-6788997454",
          "uid": "0bf011e9-5e03-441e-85d0-91b753934229",
          "controller": true,
          "blockOwnerDeletion": true
        }
      ]
    },
    "checks": [
      {
        "check": {
          "name": "Stable version",
          "id": "stable-version",
          "target_type": "all",
          "comment": "Checks if the object is using a deprecated apiVersion",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Label values",
          "id": "label-values",
          "target_type": "all",
          "comment": "Validates label values",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Stable version",
          "id": "stable-version",
          "target_type": "all",
          "comment": "Checks if the object is using a deprecated apiVersion",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Label values",
          "id": "label-values",
          "target_type": "all",
          "comment": "Validates label values",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Container Image Pull Policy",
          "id": "container-image-pull-policy",
          "target_type": "Pod",
          "comment": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "config-init",
            "summary": "ImagePullPolicy is not set to Always",
            "description": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want."
          },
          {
            "path": "config-reloader",
            "summary": "ImagePullPolicy is not set to Always",
            "description": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want."
          },
          {
            "path": "evaluator",
            "summary": "ImagePullPolicy is not set to Always",
            "description": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want."
          }
        ]
      },
      {
        "check": {
          "name": "Environment Variable Key Duplication",
          "id": "environment-variable-key-duplication",
          "target_type": "Pod",
          "comment": "Makes sure that duplicated environment variable keys are not duplicated",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Container Security Context Privileged",
          "id": "container-security-context-privileged",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have a unprivileged security context set",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Container Resources",
          "id": "container-resources",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "config-init",
            "summary": "CPU limit is not set",
            "description": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu"
          },
          {
            "path": "config-init",
            "summary": "Memory limit is not set",
            "description": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.memory"
          },
          {
            "path": "config-init",
            "summary": "CPU request is not set",
            "description": "Resource requests are recommended to make sure that the application can start and run without crashing. Set resources.requests.cpu"
          },
          {
            "path": "config-init",
            "summary": "Memory request is not set",
            "description": "Resource requests are recommended to make sure that the application can start and run without crashing. Set resources.requests.memory"
          },
          {
            "path": "config-reloader",
            "summary": "CPU limit is not set",
            "description": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu"
          },
          {
            "path": "evaluator",
            "summary": "CPU limit is not set",
            "description": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu"
          }
        ]
      },
      {
        "check": {
          "name": "Container CPU Requests Equal Limits",
          "id": "container-cpu-requests-equal-limits",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have the same CPU requests as limits set.",
          "optional": true
        },
        "grade": 1,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-cpu-requests-equal-limits is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Ports Check",
          "id": "container-ports-check",
          "target_type": "Pod",
          "comment": "Container Ports Checks",
          "optional": true
        },
        "grade": 10,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-ports-check is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Ephemeral Storage Request and Limit",
          "id": "container-ephemeral-storage-request-and-limit",
          "target_type": "Pod",
          "comment": "Makes sure all pods have ephemeral-storage requests and limits set",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "config-init",
            "summary": "Ephemeral Storage limit is not set",
            "description": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage"
          },
          {
            "path": "config-reloader",
            "summary": "Ephemeral Storage limit is not set",
            "description": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage"
          },
          {
            "path": "evaluator",
            "summary": "Ephemeral Storage limit is not set",
            "description": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage"
          }
        ]
      },
      {
        "check": {
          "name": "Container Ephemeral Storage Request Equals Limit",
          "id": "container-ephemeral-storage-request-equals-limit",
          "target_type": "Pod",
          "comment": "Make sure all pods have matching ephemeral-storage requests and limits",
          "optional": true
        },
        "grade": 10,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-ephemeral-storage-request-equals-limit is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Pod NetworkPolicy",
          "id": "pod-networkpolicy",
          "target_type": "Pod",
          "comment": "Makes sure that all Pods are targeted by a NetworkPolicy",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "",
            "summary": "The pod does not have a matching NetworkPolicy",
            "description": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect."
          }
        ]
      },
      {
        "check": {
          "name": "Pod Probes",
          "id": "pod-probes",
          "target_type": "Pod",
          "comment": "Makes sure that all Pods have safe probe configurations",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": [
          {
            "path": "",
            "summary": "The pod is not targeted by a service, skipping probe checks.",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Security Context ReadOnlyRootFilesystem",
          "id": "container-security-context-readonlyrootfilesystem",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have a security context with read only filesystem set",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "config-init",
            "summary": "The pod has a container with a writable root filesystem",
            "description": "Set securityContext.readOnlyRootFilesystem to true"
          },
          {
            "path": "config-reloader",
            "summary": "The pod has a container with a writable root filesystem",
            "description": "Set securityContext.readOnlyRootFilesystem to true"
          },
          {
            "path": "evaluator",
            "summary": "The pod has a container with a writable root filesystem",
            "description": "Set securityContext.readOnlyRootFilesystem to true"
          }
        ]
      },
      {
        "check": {
          "name": "Container Seccomp Profile",
          "id": "container-seccomp-profile",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have at a seccomp policy configured.",
          "optional": true
        },
        "grade": 5,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-seccomp-profile is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Resource Requests Equal Limits",
          "id": "container-resource-requests-equal-limits",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have the same requests as limits on resources set.",
          "optional": true
        },
        "grade": 1,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-resource-requests-equal-limits is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Memory Requests Equal Limits",
          "id": "container-memory-requests-equal-limits",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have the same memory requests as limits set.",
          "optional": true
        },
        "grade": 1,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-memory-requests-equal-limits is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Image Tag",
          "id": "container-image-tag",
          "target_type": "Pod",
          "comment": "Makes sure that a explicit non-latest tag is used",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Container Security Context User Group ID",
          "id": "container-security-context-user-group-id",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have a security context with valid UID and GID set ",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "config-init",
            "summary": "The container is running with a low user ID",
            "description": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value \u003e 10000"
          },
          {
            "path": "config-init",
            "summary": "The container running with a low group ID",
            "description": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value \u003e 10000"
          },
          {
            "path": "config-reloader",
            "summary": "The container is running with a low user ID",
            "description": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value \u003e 10000"
          },
          {
            "path": "config-reloader",
            "summary": "The container running with a low group ID",
            "description": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value \u003e 10000"
          },
          {
            "path": "evaluator",
            "summary": "The container is running with a low user ID",
            "description": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value \u003e 10000"
          },
          {
            "path": "evaluator",
            "summary": "The container running with a low group ID",
            "description": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value \u003e 10000"
          }
        ]
      },
      {
        "check": {
          "name": "Container Image Tag",
          "id": "container-image-tag",
          "target_type": "Pod",
          "comment": "Makes sure that a explicit non-latest tag is used",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Container Security Context User Group ID",
          "id": "container-security-context-user-group-id",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have a security context with valid UID and GID set ",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "config-init",
            "summary": "The container is running with a low user ID",
            "description": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value \u003e 10000"
          },
          {
            "path": "config-init",
            "summary": "The container running with a low group ID",
            "description": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value \u003e 10000"
          },
          {
            "path": "config-reloader",
            "summary": "The container is running with a low user ID",
            "description": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value \u003e 10000"
          },
          {
            "path": "config-reloader",
            "summary": "The container running with a low group ID",
            "description": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value \u003e 10000"
          },
          {
            "path": "evaluator",
            "summary": "The container is running with a low user ID",
            "description": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value \u003e 10000"
          },
          {
            "path": "evaluator",
            "summary": "The container running with a low group ID",
            "description": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value \u003e 10000"
          }
        ]
      },
      {
        "check": {
          "name": "Container Resources",
          "id": "container-resources",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "config-init",
            "summary": "CPU limit is not set",
            "description": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu"
          },
          {
            "path": "config-init",
            "summary": "Memory limit is not set",
            "description": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.memory"
          },
          {
            "path": "config-init",
            "summary": "CPU request is not set",
            "description": "Resource requests are recommended to make sure that the application can start and run without crashing. Set resources.requests.cpu"
          },
          {
            "path": "config-init",
            "summary": "Memory request is not set",
            "description": "Resource requests are recommended to make sure that the application can start and run without crashing. Set resources.requests.memory"
          },
          {
            "path": "config-reloader",
            "summary": "CPU limit is not set",
            "description": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu"
          },
          {
            "path": "evaluator",
            "summary": "CPU limit is not set",
            "description": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu"
          }
        ]
      },
      {
        "check": {
          "name": "Container CPU Requests Equal Limits",
          "id": "container-cpu-requests-equal-limits",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have the same CPU requests as limits set.",
          "optional": true
        },
        "grade": 1,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-cpu-requests-equal-limits is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Image Pull Policy",
          "id": "container-image-pull-policy",
          "target_type": "Pod",
          "comment": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "config-init",
            "summary": "ImagePullPolicy is not set to Always",
            "description": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want."
          },
          {
            "path": "config-reloader",
            "summary": "ImagePullPolicy is not set to Always",
            "description": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want."
          },
          {
            "path": "evaluator",
            "summary": "ImagePullPolicy is not set to Always",
            "description": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want."
          }
        ]
      },
      {
        "check": {
          "name": "Environment Variable Key Duplication",
          "id": "environment-variable-key-duplication",
          "target_type": "Pod",
          "comment": "Makes sure that duplicated environment variable keys are not duplicated",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Container Security Context Privileged",
          "id": "container-security-context-privileged",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have a unprivileged security context set",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Container Ports Check",
          "id": "container-ports-check",
          "target_type": "Pod",
          "comment": "Container Ports Checks",
          "optional": true
        },
        "grade": 10,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-ports-check is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Pod Probes",
          "id": "pod-probes",
          "target_type": "Pod",
          "comment": "Makes sure that all Pods have safe probe configurations",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": [
          {
            "path": "",
            "summary": "The pod is not targeted by a service, skipping probe checks.",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Security Context ReadOnlyRootFilesystem",
          "id": "container-security-context-readonlyrootfilesystem",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have a security context with read only filesystem set",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "config-init",
            "summary": "The pod has a container with a writable root filesystem",
            "description": "Set securityContext.readOnlyRootFilesystem to true"
          },
          {
            "path": "config-reloader",
            "summary": "The pod has a container with a writable root filesystem",
            "description": "Set securityContext.readOnlyRootFilesystem to true"
          },
          {
            "path": "evaluator",
            "summary": "The pod has a container with a writable root filesystem",
            "description": "Set securityContext.readOnlyRootFilesystem to true"
          }
        ]
      },
      {
        "check": {
          "name": "Container Seccomp Profile",
          "id": "container-seccomp-profile",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have at a seccomp policy configured.",
          "optional": true
        },
        "grade": 5,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-seccomp-profile is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Resource Requests Equal Limits",
          "id": "container-resource-requests-equal-limits",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have the same requests as limits on resources set.",
          "optional": true
        },
        "grade": 1,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-resource-requests-equal-limits is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Memory Requests Equal Limits",
          "id": "container-memory-requests-equal-limits",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have the same memory requests as limits set.",
          "optional": true
        },
        "grade": 1,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-memory-requests-equal-limits is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Ephemeral Storage Request and Limit",
          "id": "container-ephemeral-storage-request-and-limit",
          "target_type": "Pod",
          "comment": "Makes sure all pods have ephemeral-storage requests and limits set",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "config-init",
            "summary": "Ephemeral Storage limit is not set",
            "description": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage"
          },
          {
            "path": "config-reloader",
            "summary": "Ephemeral Storage limit is not set",
            "description": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage"
          },
          {
            "path": "evaluator",
            "summary": "Ephemeral Storage limit is not set",
            "description": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage"
          }
        ]
      },
      {
        "check": {
          "name": "Container Ephemeral Storage Request Equals Limit",
          "id": "container-ephemeral-storage-request-equals-limit",
          "target_type": "Pod",
          "comment": "Make sure all pods have matching ephemeral-storage requests and limits",
          "optional": true
        },
        "grade": 10,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-ephemeral-storage-request-equals-limit is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Pod NetworkPolicy",
          "id": "pod-networkpolicy",
          "target_type": "Pod",
          "comment": "Makes sure that all Pods are targeted by a NetworkPolicy",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "",
            "summary": "The pod does not have a matching NetworkPolicy",
            "description": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect."
          }
        ]
      }
    ],
    "file_name": "/tmp/kube-security-scanner/yaml/ALL/ALL.yaml",
    "file_row": 3096
  },
  {
    "object_name": "Pod/v1/gmp-system/alertmanager-0",
    "type_meta": {
      "kind": "Pod",
      "apiVersion": "v1"
    },
    "object_meta": {
      "name": "alertmanager-0",
      "generateName": "alertmanager-",
      "namespace": "gmp-system",
      "resourceVersion": "2093",
      "creationTimestamp": null,
      "labels": {
        "app": "managed-prometheus-alertmanager",
        "app.kubernetes.io/name": "alertmanager",
        "app.kubernetes.io/version": "0.7.4",
        "controller-revision-hash": "alertmanager-85fd8b695d",
        "statefulset.kubernetes.io/pod-name": "alertmanager-0"
      },
      "ownerReferences": [
        {
          "apiVersion": "apps/v1",
          "kind": "StatefulSet",
          "name": "alertmanager",
          "uid": "b52fc26a-10e8-4eb6-8c7c-63c2967f5453",
          "controller": true,
          "blockOwnerDeletion": true
        }
      ]
    },
    "checks": [
      {
        "check": {
          "name": "Stable version",
          "id": "stable-version",
          "target_type": "all",
          "comment": "Checks if the object is using a deprecated apiVersion",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Label values",
          "id": "label-values",
          "target_type": "all",
          "comment": "Validates label values",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Stable version",
          "id": "stable-version",
          "target_type": "all",
          "comment": "Checks if the object is using a deprecated apiVersion",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Label values",
          "id": "label-values",
          "target_type": "all",
          "comment": "Validates label values",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Environment Variable Key Duplication",
          "id": "environment-variable-key-duplication",
          "target_type": "Pod",
          "comment": "Makes sure that duplicated environment variable keys are not duplicated",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Container Security Context Privileged",
          "id": "container-security-context-privileged",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have a unprivileged security context set",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Container Resources",
          "id": "container-resources",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "config-init",
            "summary": "CPU limit is not set",
            "description": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu"
          },
          {
            "path": "config-init",
            "summary": "Memory limit is not set",
            "description": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.memory"
          },
          {
            "path": "config-init",
            "summary": "CPU request is not set",
            "description": "Resource requests are recommended to make sure that the application can start and run without crashing. Set resources.requests.cpu"
          },
          {
            "path": "config-init",
            "summary": "Memory request is not set",
            "description": "Resource requests are recommended to make sure that the application can start and run without crashing. Set resources.requests.memory"
          },
          {
            "path": "alertmanager",
            "summary": "CPU limit is not set",
            "description": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu"
          },
          {
            "path": "config-reloader",
            "summary": "CPU limit is not set",
            "description": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu"
          }
        ]
      },
      {
        "check": {
          "name": "Container CPU Requests Equal Limits",
          "id": "container-cpu-requests-equal-limits",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have the same CPU requests as limits set.",
          "optional": true
        },
        "grade": 1,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-cpu-requests-equal-limits is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Image Pull Policy",
          "id": "container-image-pull-policy",
          "target_type": "Pod",
          "comment": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "config-init",
            "summary": "ImagePullPolicy is not set to Always",
            "description": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want."
          },
          {
            "path": "alertmanager",
            "summary": "ImagePullPolicy is not set to Always",
            "description": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want."
          },
          {
            "path": "config-reloader",
            "summary": "ImagePullPolicy is not set to Always",
            "description": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want."
          }
        ]
      },
      {
        "check": {
          "name": "Container Ports Check",
          "id": "container-ports-check",
          "target_type": "Pod",
          "comment": "Container Ports Checks",
          "optional": true
        },
        "grade": 10,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-ports-check is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Ephemeral Storage Request Equals Limit",
          "id": "container-ephemeral-storage-request-equals-limit",
          "target_type": "Pod",
          "comment": "Make sure all pods have matching ephemeral-storage requests and limits",
          "optional": true
        },
        "grade": 10,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-ephemeral-storage-request-equals-limit is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Pod NetworkPolicy",
          "id": "pod-networkpolicy",
          "target_type": "Pod",
          "comment": "Makes sure that all Pods are targeted by a NetworkPolicy",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "",
            "summary": "The pod does not have a matching NetworkPolicy",
            "description": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect."
          }
        ]
      },
      {
        "check": {
          "name": "Pod Probes",
          "id": "pod-probes",
          "target_type": "Pod",
          "comment": "Makes sure that all Pods have safe probe configurations",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "",
            "summary": "Container is missing a readinessProbe",
            "description": "A readinessProbe should be used to indicate when the service is ready to receive traffic. Without it, the Pod is risking to receive traffic before it has booted. It's also used during rollouts, and can prevent downtime if a new version of the application is failing."
          }
        ]
      },
      {
        "check": {
          "name": "Container Security Context ReadOnlyRootFilesystem",
          "id": "container-security-context-readonlyrootfilesystem",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have a security context with read only filesystem set",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "config-init",
            "summary": "The pod has a container with a writable root filesystem",
            "description": "Set securityContext.readOnlyRootFilesystem to true"
          },
          {
            "path": "alertmanager",
            "summary": "The pod has a container with a writable root filesystem",
            "description": "Set securityContext.readOnlyRootFilesystem to true"
          },
          {
            "path": "config-reloader",
            "summary": "The pod has a container with a writable root filesystem",
            "description": "Set securityContext.readOnlyRootFilesystem to true"
          }
        ]
      },
      {
        "check": {
          "name": "Container Seccomp Profile",
          "id": "container-seccomp-profile",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have at a seccomp policy configured.",
          "optional": true
        },
        "grade": 5,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-seccomp-profile is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Resource Requests Equal Limits",
          "id": "container-resource-requests-equal-limits",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have the same requests as limits on resources set.",
          "optional": true
        },
        "grade": 1,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-resource-requests-equal-limits is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Memory Requests Equal Limits",
          "id": "container-memory-requests-equal-limits",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have the same memory requests as limits set.",
          "optional": true
        },
        "grade": 1,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-memory-requests-equal-limits is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Ephemeral Storage Request and Limit",
          "id": "container-ephemeral-storage-request-and-limit",
          "target_type": "Pod",
          "comment": "Makes sure all pods have ephemeral-storage requests and limits set",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "config-init",
            "summary": "Ephemeral Storage limit is not set",
            "description": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage"
          },
          {
            "path": "alertmanager",
            "summary": "Ephemeral Storage limit is not set",
            "description": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage"
          },
          {
            "path": "config-reloader",
            "summary": "Ephemeral Storage limit is not set",
            "description": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage"
          }
        ]
      },
      {
        "check": {
          "name": "Container Image Tag",
          "id": "container-image-tag",
          "target_type": "Pod",
          "comment": "Makes sure that a explicit non-latest tag is used",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Container Security Context User Group ID",
          "id": "container-security-context-user-group-id",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have a security context with valid UID and GID set ",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "config-init",
            "summary": "The container is running with a low user ID",
            "description": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value \u003e 10000"
          },
          {
            "path": "config-init",
            "summary": "The container running with a low group ID",
            "description": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value \u003e 10000"
          },
          {
            "path": "alertmanager",
            "summary": "The container is running with a low user ID",
            "description": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value \u003e 10000"
          },
          {
            "path": "alertmanager",
            "summary": "The container running with a low group ID",
            "description": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value \u003e 10000"
          },
          {
            "path": "config-reloader",
            "summary": "The container is running with a low user ID",
            "description": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value \u003e 10000"
          },
          {
            "path": "config-reloader",
            "summary": "The container running with a low group ID",
            "description": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value \u003e 10000"
          }
        ]
      },
      {
        "check": {
          "name": "Container Image Tag",
          "id": "container-image-tag",
          "target_type": "Pod",
          "comment": "Makes sure that a explicit non-latest tag is used",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Container Security Context User Group ID",
          "id": "container-security-context-user-group-id",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have a security context with valid UID and GID set ",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "config-init",
            "summary": "The container is running with a low user ID",
            "description": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value \u003e 10000"
          },
          {
            "path": "config-init",
            "summary": "The container running with a low group ID",
            "description": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value \u003e 10000"
          },
          {
            "path": "alertmanager",
            "summary": "The container is running with a low user ID",
            "description": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value \u003e 10000"
          },
          {
            "path": "alertmanager",
            "summary": "The container running with a low group ID",
            "description": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value \u003e 10000"
          },
          {
            "path": "config-reloader",
            "summary": "The container is running with a low user ID",
            "description": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value \u003e 10000"
          },
          {
            "path": "config-reloader",
            "summary": "The container running with a low group ID",
            "description": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value \u003e 10000"
          }
        ]
      },
      {
        "check": {
          "name": "Container Security Context Privileged",
          "id": "container-security-context-privileged",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have a unprivileged security context set",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Container Resources",
          "id": "container-resources",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "config-init",
            "summary": "CPU limit is not set",
            "description": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu"
          },
          {
            "path": "config-init",
            "summary": "Memory limit is not set",
            "description": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.memory"
          },
          {
            "path": "config-init",
            "summary": "CPU request is not set",
            "description": "Resource requests are recommended to make sure that the application can start and run without crashing. Set resources.requests.cpu"
          },
          {
            "path": "config-init",
            "summary": "Memory request is not set",
            "description": "Resource requests are recommended to make sure that the application can start and run without crashing. Set resources.requests.memory"
          },
          {
            "path": "alertmanager",
            "summary": "CPU limit is not set",
            "description": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu"
          },
          {
            "path": "config-reloader",
            "summary": "CPU limit is not set",
            "description": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu"
          }
        ]
      },
      {
        "check": {
          "name": "Container CPU Requests Equal Limits",
          "id": "container-cpu-requests-equal-limits",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have the same CPU requests as limits set.",
          "optional": true
        },
        "grade": 1,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-cpu-requests-equal-limits is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Image Pull Policy",
          "id": "container-image-pull-policy",
          "target_type": "Pod",
          "comment": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "config-init",
            "summary": "ImagePullPolicy is not set to Always",
            "description": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want."
          },
          {
            "path": "alertmanager",
            "summary": "ImagePullPolicy is not set to Always",
            "description": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want."
          },
          {
            "path": "config-reloader",
            "summary": "ImagePullPolicy is not set to Always",
            "description": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want."
          }
        ]
      },
      {
        "check": {
          "name": "Environment Variable Key Duplication",
          "id": "environment-variable-key-duplication",
          "target_type": "Pod",
          "comment": "Makes sure that duplicated environment variable keys are not duplicated",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Container Ports Check",
          "id": "container-ports-check",
          "target_type": "Pod",
          "comment": "Container Ports Checks",
          "optional": true
        },
        "grade": 10,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-ports-check is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Pod NetworkPolicy",
          "id": "pod-networkpolicy",
          "target_type": "Pod",
          "comment": "Makes sure that all Pods are targeted by a NetworkPolicy",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "",
            "summary": "The pod does not have a matching NetworkPolicy",
            "description": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect."
          }
        ]
      },
      {
        "check": {
          "name": "Pod Probes",
          "id": "pod-probes",
          "target_type": "Pod",
          "comment": "Makes sure that all Pods have safe probe configurations",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "",
            "summary": "Container is missing a readinessProbe",
            "description": "A readinessProbe should be used to indicate when the service is ready to receive traffic. Without it, the Pod is risking to receive traffic before it has booted. It's also used during rollouts, and can prevent downtime if a new version of the application is failing."
          }
        ]
      },
      {
        "check": {
          "name": "Container Security Context ReadOnlyRootFilesystem",
          "id": "container-security-context-readonlyrootfilesystem",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have a security context with read only filesystem set",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "config-init",
            "summary": "The pod has a container with a writable root filesystem",
            "description": "Set securityContext.readOnlyRootFilesystem to true"
          },
          {
            "path": "alertmanager",
            "summary": "The pod has a container with a writable root filesystem",
            "description": "Set securityContext.readOnlyRootFilesystem to true"
          },
          {
            "path": "config-reloader",
            "summary": "The pod has a container with a writable root filesystem",
            "description": "Set securityContext.readOnlyRootFilesystem to true"
          }
        ]
      },
      {
        "check": {
          "name": "Container Seccomp Profile",
          "id": "container-seccomp-profile",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have at a seccomp policy configured.",
          "optional": true
        },
        "grade": 5,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-seccomp-profile is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Resource Requests Equal Limits",
          "id": "container-resource-requests-equal-limits",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have the same requests as limits on resources set.",
          "optional": true
        },
        "grade": 1,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-resource-requests-equal-limits is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Memory Requests Equal Limits",
          "id": "container-memory-requests-equal-limits",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have the same memory requests as limits set.",
          "optional": true
        },
        "grade": 1,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-memory-requests-equal-limits is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Ephemeral Storage Request and Limit",
          "id": "container-ephemeral-storage-request-and-limit",
          "target_type": "Pod",
          "comment": "Makes sure all pods have ephemeral-storage requests and limits set",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "config-init",
            "summary": "Ephemeral Storage limit is not set",
            "description": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage"
          },
          {
            "path": "alertmanager",
            "summary": "Ephemeral Storage limit is not set",
            "description": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage"
          },
          {
            "path": "config-reloader",
            "summary": "Ephemeral Storage limit is not set",
            "description": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage"
          }
        ]
      },
      {
        "check": {
          "name": "Container Ephemeral Storage Request Equals Limit",
          "id": "container-ephemeral-storage-request-equals-limit",
          "target_type": "Pod",
          "comment": "Make sure all pods have matching ephemeral-storage requests and limits",
          "optional": true
        },
        "grade": 10,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-ephemeral-storage-request-equals-limit is ignored",
            "description": ""
          }
        ]
      }
    ],
    "file_name": "/tmp/kube-security-scanner/yaml/ALL/ALL.yaml",
    "file_row": 2515
  },
  {
    "object_name": "Pod/v1/kube-system/metrics-server-v0.5.2-6bf74b5d5f-9dxzc",
    "type_meta": {
      "kind": "Pod",
      "apiVersion": "v1"
    },
    "object_meta": {
      "name": "metrics-server-v0.5.2-6bf74b5d5f-9dxzc",
      "generateName": "metrics-server-v0.5.2-6bf74b5d5f-",
      "namespace": "kube-system",
      "resourceVersion": "2556",
      "creationTimestamp": null,
      "labels": {
        "k8s-app": "metrics-server",
        "pod-template-hash": "6bf74b5d5f",
        "version": "v0.5.2"
      },
      "ownerReferences": [
        {
          "apiVersion": "apps/v1",
          "kind": "ReplicaSet",
          "name": "metrics-server-v0.5.2-6bf74b5d5f",
          "uid": "d505059d-cda6-4224-ad5e-1753509a1680",
          "controller": true,
          "blockOwnerDeletion": true
        }
      ]
    },
    "checks": [
      {
        "check": {
          "name": "Stable version",
          "id": "stable-version",
          "target_type": "all",
          "comment": "Checks if the object is using a deprecated apiVersion",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Label values",
          "id": "label-values",
          "target_type": "all",
          "comment": "Validates label values",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Stable version",
          "id": "stable-version",
          "target_type": "all",
          "comment": "Checks if the object is using a deprecated apiVersion",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Label values",
          "id": "label-values",
          "target_type": "all",
          "comment": "Validates label values",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Container Image Tag",
          "id": "container-image-tag",
          "target_type": "Pod",
          "comment": "Makes sure that a explicit non-latest tag is used",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Container Security Context User Group ID",
          "id": "container-security-context-user-group-id",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have a security context with valid UID and GID set ",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "metrics-server",
            "summary": "The container is running with a low user ID",
            "description": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value \u003e 10000"
          },
          {
            "path": "metrics-server",
            "summary": "The container running with a low group ID",
            "description": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value \u003e 10000"
          },
          {
            "path": "metrics-server-nanny",
            "summary": "The container is running with a low user ID",
            "description": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value \u003e 10000"
          },
          {
            "path": "metrics-server-nanny",
            "summary": "The container running with a low group ID",
            "description": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value \u003e 10000"
          }
        ]
      },
      {
        "check": {
          "name": "Container Resources",
          "id": "container-resources",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "metrics-server-nanny",
            "summary": "CPU limit is not set",
            "description": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu"
          }
        ]
      },
      {
        "check": {
          "name": "Container CPU Requests Equal Limits",
          "id": "container-cpu-requests-equal-limits",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have the same CPU requests as limits set.",
          "optional": true
        },
        "grade": 1,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-cpu-requests-equal-limits is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Image Pull Policy",
          "id": "container-image-pull-policy",
          "target_type": "Pod",
          "comment": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "metrics-server",
            "summary": "ImagePullPolicy is not set to Always",
            "description": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want."
          },
          {
            "path": "metrics-server-nanny",
            "summary": "ImagePullPolicy is not set to Always",
            "description": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want."
          }
        ]
      },
      {
        "check": {
          "name": "Environment Variable Key Duplication",
          "id": "environment-variable-key-duplication",
          "target_type": "Pod",
          "comment": "Makes sure that duplicated environment variable keys are not duplicated",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Container Security Context Privileged",
          "id": "container-security-context-privileged",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have a unprivileged security context set",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Container Ports Check",
          "id": "container-ports-check",
          "target_type": "Pod",
          "comment": "Container Ports Checks",
          "optional": true
        },
        "grade": 10,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-ports-check is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Pod Probes",
          "id": "pod-probes",
          "target_type": "Pod",
          "comment": "Makes sure that all Pods have safe probe configurations",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Container Security Context ReadOnlyRootFilesystem",
          "id": "container-security-context-readonlyrootfilesystem",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have a security context with read only filesystem set",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Container Seccomp Profile",
          "id": "container-seccomp-profile",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have at a seccomp policy configured.",
          "optional": true
        },
        "grade": 5,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-seccomp-profile is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Resource Requests Equal Limits",
          "id": "container-resource-requests-equal-limits",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have the same requests as limits on resources set.",
          "optional": true
        },
        "grade": 1,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-resource-requests-equal-limits is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Memory Requests Equal Limits",
          "id": "container-memory-requests-equal-limits",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have the same memory requests as limits set.",
          "optional": true
        },
        "grade": 1,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-memory-requests-equal-limits is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Ephemeral Storage Request and Limit",
          "id": "container-ephemeral-storage-request-and-limit",
          "target_type": "Pod",
          "comment": "Makes sure all pods have ephemeral-storage requests and limits set",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "metrics-server",
            "summary": "Ephemeral Storage limit is not set",
            "description": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage"
          },
          {
            "path": "metrics-server-nanny",
            "summary": "Ephemeral Storage limit is not set",
            "description": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage"
          }
        ]
      },
      {
        "check": {
          "name": "Container Ephemeral Storage Request Equals Limit",
          "id": "container-ephemeral-storage-request-equals-limit",
          "target_type": "Pod",
          "comment": "Make sure all pods have matching ephemeral-storage requests and limits",
          "optional": true
        },
        "grade": 10,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-ephemeral-storage-request-equals-limit is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Pod NetworkPolicy",
          "id": "pod-networkpolicy",
          "target_type": "Pod",
          "comment": "Makes sure that all Pods are targeted by a NetworkPolicy",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "",
            "summary": "The pod does not have a matching NetworkPolicy",
            "description": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect."
          }
        ]
      },
      {
        "check": {
          "name": "Container Memory Requests Equal Limits",
          "id": "container-memory-requests-equal-limits",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have the same memory requests as limits set.",
          "optional": true
        },
        "grade": 1,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-memory-requests-equal-limits is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Ephemeral Storage Request and Limit",
          "id": "container-ephemeral-storage-request-and-limit",
          "target_type": "Pod",
          "comment": "Makes sure all pods have ephemeral-storage requests and limits set",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "metrics-server",
            "summary": "Ephemeral Storage limit is not set",
            "description": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage"
          },
          {
            "path": "metrics-server-nanny",
            "summary": "Ephemeral Storage limit is not set",
            "description": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage"
          }
        ]
      },
      {
        "check": {
          "name": "Container Ephemeral Storage Request Equals Limit",
          "id": "container-ephemeral-storage-request-equals-limit",
          "target_type": "Pod",
          "comment": "Make sure all pods have matching ephemeral-storage requests and limits",
          "optional": true
        },
        "grade": 10,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-ephemeral-storage-request-equals-limit is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Pod NetworkPolicy",
          "id": "pod-networkpolicy",
          "target_type": "Pod",
          "comment": "Makes sure that all Pods are targeted by a NetworkPolicy",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "",
            "summary": "The pod does not have a matching NetworkPolicy",
            "description": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect."
          }
        ]
      },
      {
        "check": {
          "name": "Pod Probes",
          "id": "pod-probes",
          "target_type": "Pod",
          "comment": "Makes sure that all Pods have safe probe configurations",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Container Security Context ReadOnlyRootFilesystem",
          "id": "container-security-context-readonlyrootfilesystem",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have a security context with read only filesystem set",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Container Seccomp Profile",
          "id": "container-seccomp-profile",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have at a seccomp policy configured.",
          "optional": true
        },
        "grade": 5,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-seccomp-profile is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Resource Requests Equal Limits",
          "id": "container-resource-requests-equal-limits",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have the same requests as limits on resources set.",
          "optional": true
        },
        "grade": 1,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-resource-requests-equal-limits is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Security Context User Group ID",
          "id": "container-security-context-user-group-id",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have a security context with valid UID and GID set ",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "metrics-server",
            "summary": "The container is running with a low user ID",
            "description": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value \u003e 10000"
          },
          {
            "path": "metrics-server",
            "summary": "The container running with a low group ID",
            "description": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value \u003e 10000"
          },
          {
            "path": "metrics-server-nanny",
            "summary": "The container is running with a low user ID",
            "description": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value \u003e 10000"
          },
          {
            "path": "metrics-server-nanny",
            "summary": "The container running with a low group ID",
            "description": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value \u003e 10000"
          }
        ]
      },
      {
        "check": {
          "name": "Container Image Tag",
          "id": "container-image-tag",
          "target_type": "Pod",
          "comment": "Makes sure that a explicit non-latest tag is used",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Container CPU Requests Equal Limits",
          "id": "container-cpu-requests-equal-limits",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have the same CPU requests as limits set.",
          "optional": true
        },
        "grade": 1,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-cpu-requests-equal-limits is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Image Pull Policy",
          "id": "container-image-pull-policy",
          "target_type": "Pod",
          "comment": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "metrics-server",
            "summary": "ImagePullPolicy is not set to Always",
            "description": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want."
          },
          {
            "path": "metrics-server-nanny",
            "summary": "ImagePullPolicy is not set to Always",
            "description": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want."
          }
        ]
      },
      {
        "check": {
          "name": "Environment Variable Key Duplication",
          "id": "environment-variable-key-duplication",
          "target_type": "Pod",
          "comment": "Makes sure that duplicated environment variable keys are not duplicated",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Container Security Context Privileged",
          "id": "container-security-context-privileged",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have a unprivileged security context set",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Container Resources",
          "id": "container-resources",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "metrics-server-nanny",
            "summary": "CPU limit is not set",
            "description": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu"
          }
        ]
      },
      {
        "check": {
          "name": "Container Ports Check",
          "id": "container-ports-check",
          "target_type": "Pod",
          "comment": "Container Ports Checks",
          "optional": true
        },
        "grade": 10,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-ports-check is ignored",
            "description": ""
          }
        ]
      }
    ],
    "file_name": "/tmp/kube-security-scanner/yaml/ALL/ALL.yaml",
    "file_row": 19590
  },
  {
    "object_name": "Pod/v1/kube-system/fluentbit-gke-ctdz2",
    "type_meta": {
      "kind": "Pod",
      "apiVersion": "v1"
    },
    "object_meta": {
      "name": "fluentbit-gke-ctdz2",
      "generateName": "fluentbit-gke-",
      "namespace": "kube-system",
      "resourceVersion": "1623",
      "creationTimestamp": null,
      "labels": {
        "component": "fluentbit-gke",
        "controller-revision-hash": "6b9c85554d",
        "k8s-app": "fluentbit-gke",
        "kubernetes.io/cluster-service": "true",
        "pod-template-generation": "1"
      },
      "ownerReferences": [
        {
          "apiVersion": "apps/v1",
          "kind": "DaemonSet",
          "name": "fluentbit-gke",
          "uid": "4f1cd2d9-79ce-4f5d-8ade-686e15e3867d",
          "controller": true,
          "blockOwnerDeletion": true
        }
      ]
    },
    "checks": [
      {
        "check": {
          "name": "Stable version",
          "id": "stable-version",
          "target_type": "all",
          "comment": "Checks if the object is using a deprecated apiVersion",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Label values",
          "id": "label-values",
          "target_type": "all",
          "comment": "Validates label values",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Stable version",
          "id": "stable-version",
          "target_type": "all",
          "comment": "Checks if the object is using a deprecated apiVersion",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Label values",
          "id": "label-values",
          "target_type": "all",
          "comment": "Validates label values",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Container Resources",
          "id": "container-resources",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "fluentbit-gke-init",
            "summary": "CPU limit is not set",
            "description": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu"
          },
          {
            "path": "fluentbit-gke-init",
            "summary": "Memory limit is not set",
            "description": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.memory"
          },
          {
            "path": "fluentbit-gke-init",
            "summary": "CPU request is not set",
            "description": "Resource requests are recommended to make sure that the application can start and run without crashing. Set resources.requests.cpu"
          },
          {
            "path": "fluentbit-gke-init",
            "summary": "Memory request is not set",
            "description": "Resource requests are recommended to make sure that the application can start and run without crashing. Set resources.requests.memory"
          },
          {
            "path": "fluentbit",
            "summary": "CPU limit is not set",
            "description": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu"
          },
          {
            "path": "fluentbit-gke",
            "summary": "CPU limit is not set",
            "description": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu"
          }
        ]
      },
      {
        "check": {
          "name": "Container CPU Requests Equal Limits",
          "id": "container-cpu-requests-equal-limits",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have the same CPU requests as limits set.",
          "optional": true
        },
        "grade": 1,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-cpu-requests-equal-limits is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Image Pull Policy",
          "id": "container-image-pull-policy",
          "target_type": "Pod",
          "comment": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "fluentbit-gke-init",
            "summary": "ImagePullPolicy is not set to Always",
            "description": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want."
          },
          {
            "path": "fluentbit",
            "summary": "ImagePullPolicy is not set to Always",
            "description": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want."
          },
          {
            "path": "fluentbit-gke",
            "summary": "ImagePullPolicy is not set to Always",
            "description": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want."
          }
        ]
      },
      {
        "check": {
          "name": "Environment Variable Key Duplication",
          "id": "environment-variable-key-duplication",
          "target_type": "Pod",
          "comment": "Makes sure that duplicated environment variable keys are not duplicated",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Container Security Context Privileged",
          "id": "container-security-context-privileged",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have a unprivileged security context set",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Container Ports Check",
          "id": "container-ports-check",
          "target_type": "Pod",
          "comment": "Container Ports Checks",
          "optional": true
        },
        "grade": 10,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-ports-check is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Pod Probes",
          "id": "pod-probes",
          "target_type": "Pod",
          "comment": "Makes sure that all Pods have safe probe configurations",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": [
          {
            "path": "",
            "summary": "The pod is not targeted by a service, skipping probe checks.",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Security Context ReadOnlyRootFilesystem",
          "id": "container-security-context-readonlyrootfilesystem",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have a security context with read only filesystem set",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "fluentbit-gke-init",
            "summary": "Container has no configured security context",
            "description": "Set securityContext to run the container in a more secure context."
          },
          {
            "path": "fluentbit",
            "summary": "The pod has a container with a writable root filesystem",
            "description": "Set securityContext.readOnlyRootFilesystem to true"
          },
          {
            "path": "fluentbit-gke",
            "summary": "The pod has a container with a writable root filesystem",
            "description": "Set securityContext.readOnlyRootFilesystem to true"
          }
        ]
      },
      {
        "check": {
          "name": "Container Seccomp Profile",
          "id": "container-seccomp-profile",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have at a seccomp policy configured.",
          "optional": true
        },
        "grade": 5,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-seccomp-profile is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Resource Requests Equal Limits",
          "id": "container-resource-requests-equal-limits",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have the same requests as limits on resources set.",
          "optional": true
        },
        "grade": 1,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-resource-requests-equal-limits is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Memory Requests Equal Limits",
          "id": "container-memory-requests-equal-limits",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have the same memory requests as limits set.",
          "optional": true
        },
        "grade": 1,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-memory-requests-equal-limits is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Ephemeral Storage Request and Limit",
          "id": "container-ephemeral-storage-request-and-limit",
          "target_type": "Pod",
          "comment": "Makes sure all pods have ephemeral-storage requests and limits set",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "fluentbit-gke-init",
            "summary": "Ephemeral Storage limit is not set",
            "description": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage"
          },
          {
            "path": "fluentbit",
            "summary": "Ephemeral Storage limit is not set",
            "description": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage"
          },
          {
            "path": "fluentbit-gke",
            "summary": "Ephemeral Storage limit is not set",
            "description": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage"
          }
        ]
      },
      {
        "check": {
          "name": "Container Ephemeral Storage Request Equals Limit",
          "id": "container-ephemeral-storage-request-equals-limit",
          "target_type": "Pod",
          "comment": "Make sure all pods have matching ephemeral-storage requests and limits",
          "optional": true
        },
        "grade": 10,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-ephemeral-storage-request-equals-limit is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Pod NetworkPolicy",
          "id": "pod-networkpolicy",
          "target_type": "Pod",
          "comment": "Makes sure that all Pods are targeted by a NetworkPolicy",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "",
            "summary": "The pod does not have a matching NetworkPolicy",
            "description": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect."
          }
        ]
      },
      {
        "check": {
          "name": "Container Image Tag",
          "id": "container-image-tag",
          "target_type": "Pod",
          "comment": "Makes sure that a explicit non-latest tag is used",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Container Security Context User Group ID",
          "id": "container-security-context-user-group-id",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have a security context with valid UID and GID set ",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "fluentbit-gke-init",
            "summary": "The container is running with a low user ID",
            "description": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value \u003e 10000"
          },
          {
            "path": "fluentbit-gke-init",
            "summary": "The container running with a low group ID",
            "description": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value \u003e 10000"
          },
          {
            "path": "fluentbit",
            "summary": "The container is running with a low user ID",
            "description": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value \u003e 10000"
          },
          {
            "path": "fluentbit",
            "summary": "The container running with a low group ID",
            "description": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value \u003e 10000"
          },
          {
            "path": "fluentbit-gke",
            "summary": "The container is running with a low user ID",
            "description": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value \u003e 10000"
          },
          {
            "path": "fluentbit-gke",
            "summary": "The container running with a low group ID",
            "description": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value \u003e 10000"
          }
        ]
      },
      {
        "check": {
          "name": "Container Security Context Privileged",
          "id": "container-security-context-privileged",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have a unprivileged security context set",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Container Resources",
          "id": "container-resources",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "fluentbit-gke-init",
            "summary": "CPU limit is not set",
            "description": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu"
          },
          {
            "path": "fluentbit-gke-init",
            "summary": "Memory limit is not set",
            "description": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.memory"
          },
          {
            "path": "fluentbit-gke-init",
            "summary": "CPU request is not set",
            "description": "Resource requests are recommended to make sure that the application can start and run without crashing. Set resources.requests.cpu"
          },
          {
            "path": "fluentbit-gke-init",
            "summary": "Memory request is not set",
            "description": "Resource requests are recommended to make sure that the application can start and run without crashing. Set resources.requests.memory"
          },
          {
            "path": "fluentbit",
            "summary": "CPU limit is not set",
            "description": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu"
          },
          {
            "path": "fluentbit-gke",
            "summary": "CPU limit is not set",
            "description": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu"
          }
        ]
      },
      {
        "check": {
          "name": "Container CPU Requests Equal Limits",
          "id": "container-cpu-requests-equal-limits",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have the same CPU requests as limits set.",
          "optional": true
        },
        "grade": 1,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-cpu-requests-equal-limits is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Image Pull Policy",
          "id": "container-image-pull-policy",
          "target_type": "Pod",
          "comment": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "fluentbit-gke-init",
            "summary": "ImagePullPolicy is not set to Always",
            "description": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want."
          },
          {
            "path": "fluentbit",
            "summary": "ImagePullPolicy is not set to Always",
            "description": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want."
          },
          {
            "path": "fluentbit-gke",
            "summary": "ImagePullPolicy is not set to Always",
            "description": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want."
          }
        ]
      },
      {
        "check": {
          "name": "Environment Variable Key Duplication",
          "id": "environment-variable-key-duplication",
          "target_type": "Pod",
          "comment": "Makes sure that duplicated environment variable keys are not duplicated",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Container Ports Check",
          "id": "container-ports-check",
          "target_type": "Pod",
          "comment": "Container Ports Checks",
          "optional": true
        },
        "grade": 10,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-ports-check is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Pod NetworkPolicy",
          "id": "pod-networkpolicy",
          "target_type": "Pod",
          "comment": "Makes sure that all Pods are targeted by a NetworkPolicy",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "",
            "summary": "The pod does not have a matching NetworkPolicy",
            "description": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect."
          }
        ]
      },
      {
        "check": {
          "name": "Pod Probes",
          "id": "pod-probes",
          "target_type": "Pod",
          "comment": "Makes sure that all Pods have safe probe configurations",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": [
          {
            "path": "",
            "summary": "The pod is not targeted by a service, skipping probe checks.",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Security Context ReadOnlyRootFilesystem",
          "id": "container-security-context-readonlyrootfilesystem",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have a security context with read only filesystem set",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "fluentbit-gke-init",
            "summary": "Container has no configured security context",
            "description": "Set securityContext to run the container in a more secure context."
          },
          {
            "path": "fluentbit",
            "summary": "The pod has a container with a writable root filesystem",
            "description": "Set securityContext.readOnlyRootFilesystem to true"
          },
          {
            "path": "fluentbit-gke",
            "summary": "The pod has a container with a writable root filesystem",
            "description": "Set securityContext.readOnlyRootFilesystem to true"
          }
        ]
      },
      {
        "check": {
          "name": "Container Seccomp Profile",
          "id": "container-seccomp-profile",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have at a seccomp policy configured.",
          "optional": true
        },
        "grade": 5,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-seccomp-profile is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Resource Requests Equal Limits",
          "id": "container-resource-requests-equal-limits",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have the same requests as limits on resources set.",
          "optional": true
        },
        "grade": 1,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-resource-requests-equal-limits is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Memory Requests Equal Limits",
          "id": "container-memory-requests-equal-limits",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have the same memory requests as limits set.",
          "optional": true
        },
        "grade": 1,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-memory-requests-equal-limits is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Ephemeral Storage Request and Limit",
          "id": "container-ephemeral-storage-request-and-limit",
          "target_type": "Pod",
          "comment": "Makes sure all pods have ephemeral-storage requests and limits set",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "fluentbit-gke-init",
            "summary": "Ephemeral Storage limit is not set",
            "description": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage"
          },
          {
            "path": "fluentbit",
            "summary": "Ephemeral Storage limit is not set",
            "description": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage"
          },
          {
            "path": "fluentbit-gke",
            "summary": "Ephemeral Storage limit is not set",
            "description": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage"
          }
        ]
      },
      {
        "check": {
          "name": "Container Ephemeral Storage Request Equals Limit",
          "id": "container-ephemeral-storage-request-equals-limit",
          "target_type": "Pod",
          "comment": "Make sure all pods have matching ephemeral-storage requests and limits",
          "optional": true
        },
        "grade": 10,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-ephemeral-storage-request-equals-limit is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Image Tag",
          "id": "container-image-tag",
          "target_type": "Pod",
          "comment": "Makes sure that a explicit non-latest tag is used",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Container Security Context User Group ID",
          "id": "container-security-context-user-group-id",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have a security context with valid UID and GID set ",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "fluentbit-gke-init",
            "summary": "The container is running with a low user ID",
            "description": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value \u003e 10000"
          },
          {
            "path": "fluentbit-gke-init",
            "summary": "The container running with a low group ID",
            "description": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value \u003e 10000"
          },
          {
            "path": "fluentbit",
            "summary": "The container is running with a low user ID",
            "description": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value \u003e 10000"
          },
          {
            "path": "fluentbit",
            "summary": "The container running with a low group ID",
            "description": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value \u003e 10000"
          },
          {
            "path": "fluentbit-gke",
            "summary": "The container is running with a low user ID",
            "description": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value \u003e 10000"
          },
          {
            "path": "fluentbit-gke",
            "summary": "The container running with a low group ID",
            "description": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value \u003e 10000"
          }
        ]
      }
    ],
    "file_name": "/tmp/kube-security-scanner/yaml/ALL/ALL.yaml",
    "file_row": 18004
  },
  {
    "object_name": "Pod/v1/kube-system/gke-metrics-agent-k56ql",
    "type_meta": {
      "kind": "Pod",
      "apiVersion": "v1"
    },
    "object_meta": {
      "name": "gke-metrics-agent-k56ql",
      "generateName": "gke-metrics-agent-",
      "namespace": "kube-system",
      "resourceVersion": "1635",
      "creationTimestamp": null,
      "labels": {
        "component": "gke-metrics-agent",
        "controller-revision-hash": "755c6c8cd8",
        "k8s-app": "gke-metrics-agent",
        "pod-template-generation": "1"
      },
      "ownerReferences": [
        {
          "apiVersion": "apps/v1",
          "kind": "DaemonSet",
          "name": "gke-metrics-agent",
          "uid": "4e3ecf76-7571-47d2-ab47-c33480cfcbe5",
          "controller": true,
          "blockOwnerDeletion": true
        }
      ]
    },
    "checks": [
      {
        "check": {
          "name": "Stable version",
          "id": "stable-version",
          "target_type": "all",
          "comment": "Checks if the object is using a deprecated apiVersion",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Label values",
          "id": "label-values",
          "target_type": "all",
          "comment": "Validates label values",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Stable version",
          "id": "stable-version",
          "target_type": "all",
          "comment": "Checks if the object is using a deprecated apiVersion",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Label values",
          "id": "label-values",
          "target_type": "all",
          "comment": "Validates label values",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Container Resources",
          "id": "container-resources",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "gke-metrics-agent",
            "summary": "CPU limit is not set",
            "description": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu"
          },
          {
            "path": "core-metrics-exporter",
            "summary": "CPU limit is not set",
            "description": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu"
          }
        ]
      },
      {
        "check": {
          "name": "Container CPU Requests Equal Limits",
          "id": "container-cpu-requests-equal-limits",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have the same CPU requests as limits set.",
          "optional": true
        },
        "grade": 1,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-cpu-requests-equal-limits is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Image Pull Policy",
          "id": "container-image-pull-policy",
          "target_type": "Pod",
          "comment": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "gke-metrics-agent",
            "summary": "ImagePullPolicy is not set to Always",
            "description": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want."
          },
          {
            "path": "core-metrics-exporter",
            "summary": "ImagePullPolicy is not set to Always",
            "description": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want."
          }
        ]
      },
      {
        "check": {
          "name": "Environment Variable Key Duplication",
          "id": "environment-variable-key-duplication",
          "target_type": "Pod",
          "comment": "Makes sure that duplicated environment variable keys are not duplicated",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Container Security Context Privileged",
          "id": "container-security-context-privileged",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have a unprivileged security context set",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Container Ports Check",
          "id": "container-ports-check",
          "target_type": "Pod",
          "comment": "Container Ports Checks",
          "optional": true
        },
        "grade": 10,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-ports-check is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Pod Probes",
          "id": "pod-probes",
          "target_type": "Pod",
          "comment": "Makes sure that all Pods have safe probe configurations",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": [
          {
            "path": "",
            "summary": "The pod is not targeted by a service, skipping probe checks.",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Security Context ReadOnlyRootFilesystem",
          "id": "container-security-context-readonlyrootfilesystem",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have a security context with read only filesystem set",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "gke-metrics-agent",
            "summary": "The pod has a container with a writable root filesystem",
            "description": "Set securityContext.readOnlyRootFilesystem to true"
          },
          {
            "path": "core-metrics-exporter",
            "summary": "The pod has a container with a writable root filesystem",
            "description": "Set securityContext.readOnlyRootFilesystem to true"
          }
        ]
      },
      {
        "check": {
          "name": "Container Seccomp Profile",
          "id": "container-seccomp-profile",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have at a seccomp policy configured.",
          "optional": true
        },
        "grade": 5,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-seccomp-profile is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Resource Requests Equal Limits",
          "id": "container-resource-requests-equal-limits",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have the same requests as limits on resources set.",
          "optional": true
        },
        "grade": 1,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-resource-requests-equal-limits is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Memory Requests Equal Limits",
          "id": "container-memory-requests-equal-limits",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have the same memory requests as limits set.",
          "optional": true
        },
        "grade": 10,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-memory-requests-equal-limits is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Ephemeral Storage Request and Limit",
          "id": "container-ephemeral-storage-request-and-limit",
          "target_type": "Pod",
          "comment": "Makes sure all pods have ephemeral-storage requests and limits set",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "gke-metrics-agent",
            "summary": "Ephemeral Storage limit is not set",
            "description": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage"
          },
          {
            "path": "core-metrics-exporter",
            "summary": "Ephemeral Storage limit is not set",
            "description": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage"
          }
        ]
      },
      {
        "check": {
          "name": "Container Ephemeral Storage Request Equals Limit",
          "id": "container-ephemeral-storage-request-equals-limit",
          "target_type": "Pod",
          "comment": "Make sure all pods have matching ephemeral-storage requests and limits",
          "optional": true
        },
        "grade": 10,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-ephemeral-storage-request-equals-limit is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Pod NetworkPolicy",
          "id": "pod-networkpolicy",
          "target_type": "Pod",
          "comment": "Makes sure that all Pods are targeted by a NetworkPolicy",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "",
            "summary": "The pod does not have a matching NetworkPolicy",
            "description": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect."
          }
        ]
      },
      {
        "check": {
          "name": "Container Image Tag",
          "id": "container-image-tag",
          "target_type": "Pod",
          "comment": "Makes sure that a explicit non-latest tag is used",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Container Security Context User Group ID",
          "id": "container-security-context-user-group-id",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have a security context with valid UID and GID set ",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "gke-metrics-agent",
            "summary": "The container is running with a low user ID",
            "description": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value \u003e 10000"
          },
          {
            "path": "gke-metrics-agent",
            "summary": "The container running with a low group ID",
            "description": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value \u003e 10000"
          },
          {
            "path": "core-metrics-exporter",
            "summary": "The container is running with a low user ID",
            "description": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value \u003e 10000"
          },
          {
            "path": "core-metrics-exporter",
            "summary": "The container running with a low group ID",
            "description": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value \u003e 10000"
          }
        ]
      },
      {
        "check": {
          "name": "Container CPU Requests Equal Limits",
          "id": "container-cpu-requests-equal-limits",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have the same CPU requests as limits set.",
          "optional": true
        },
        "grade": 1,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-cpu-requests-equal-limits is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Image Pull Policy",
          "id": "container-image-pull-policy",
          "target_type": "Pod",
          "comment": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "gke-metrics-agent",
            "summary": "ImagePullPolicy is not set to Always",
            "description": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want."
          },
          {
            "path": "core-metrics-exporter",
            "summary": "ImagePullPolicy is not set to Always",
            "description": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want."
          }
        ]
      },
      {
        "check": {
          "name": "Environment Variable Key Duplication",
          "id": "environment-variable-key-duplication",
          "target_type": "Pod",
          "comment": "Makes sure that duplicated environment variable keys are not duplicated",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Container Security Context Privileged",
          "id": "container-security-context-privileged",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have a unprivileged security context set",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Container Resources",
          "id": "container-resources",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "gke-metrics-agent",
            "summary": "CPU limit is not set",
            "description": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu"
          },
          {
            "path": "core-metrics-exporter",
            "summary": "CPU limit is not set",
            "description": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu"
          }
        ]
      },
      {
        "check": {
          "name": "Container Ports Check",
          "id": "container-ports-check",
          "target_type": "Pod",
          "comment": "Container Ports Checks",
          "optional": true
        },
        "grade": 10,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-ports-check is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Memory Requests Equal Limits",
          "id": "container-memory-requests-equal-limits",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have the same memory requests as limits set.",
          "optional": true
        },
        "grade": 10,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-memory-requests-equal-limits is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Ephemeral Storage Request and Limit",
          "id": "container-ephemeral-storage-request-and-limit",
          "target_type": "Pod",
          "comment": "Makes sure all pods have ephemeral-storage requests and limits set",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "gke-metrics-agent",
            "summary": "Ephemeral Storage limit is not set",
            "description": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage"
          },
          {
            "path": "core-metrics-exporter",
            "summary": "Ephemeral Storage limit is not set",
            "description": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage"
          }
        ]
      },
      {
        "check": {
          "name": "Container Ephemeral Storage Request Equals Limit",
          "id": "container-ephemeral-storage-request-equals-limit",
          "target_type": "Pod",
          "comment": "Make sure all pods have matching ephemeral-storage requests and limits",
          "optional": true
        },
        "grade": 10,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-ephemeral-storage-request-equals-limit is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Pod NetworkPolicy",
          "id": "pod-networkpolicy",
          "target_type": "Pod",
          "comment": "Makes sure that all Pods are targeted by a NetworkPolicy",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "",
            "summary": "The pod does not have a matching NetworkPolicy",
            "description": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect."
          }
        ]
      },
      {
        "check": {
          "name": "Pod Probes",
          "id": "pod-probes",
          "target_type": "Pod",
          "comment": "Makes sure that all Pods have safe probe configurations",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": [
          {
            "path": "",
            "summary": "The pod is not targeted by a service, skipping probe checks.",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Security Context ReadOnlyRootFilesystem",
          "id": "container-security-context-readonlyrootfilesystem",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have a security context with read only filesystem set",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "gke-metrics-agent",
            "summary": "The pod has a container with a writable root filesystem",
            "description": "Set securityContext.readOnlyRootFilesystem to true"
          },
          {
            "path": "core-metrics-exporter",
            "summary": "The pod has a container with a writable root filesystem",
            "description": "Set securityContext.readOnlyRootFilesystem to true"
          }
        ]
      },
      {
        "check": {
          "name": "Container Seccomp Profile",
          "id": "container-seccomp-profile",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have at a seccomp policy configured.",
          "optional": true
        },
        "grade": 5,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-seccomp-profile is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Resource Requests Equal Limits",
          "id": "container-resource-requests-equal-limits",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have the same requests as limits on resources set.",
          "optional": true
        },
        "grade": 1,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-resource-requests-equal-limits is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Security Context User Group ID",
          "id": "container-security-context-user-group-id",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have a security context with valid UID and GID set ",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "gke-metrics-agent",
            "summary": "The container is running with a low user ID",
            "description": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value \u003e 10000"
          },
          {
            "path": "gke-metrics-agent",
            "summary": "The container running with a low group ID",
            "description": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value \u003e 10000"
          },
          {
            "path": "core-metrics-exporter",
            "summary": "The container is running with a low user ID",
            "description": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value \u003e 10000"
          },
          {
            "path": "core-metrics-exporter",
            "summary": "The container running with a low group ID",
            "description": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value \u003e 10000"
          }
        ]
      },
      {
        "check": {
          "name": "Container Image Tag",
          "id": "container-image-tag",
          "target_type": "Pod",
          "comment": "Makes sure that a explicit non-latest tag is used",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      }
    ],
    "file_name": "/tmp/kube-security-scanner/yaml/ALL/ALL.yaml",
    "file_row": 18263
  },
  {
    "object_name": "Pod/v1/kube-system/image-package-extractor-cleanup-28404000-msz2v",
    "type_meta": {
      "kind": "Pod",
      "apiVersion": "v1"
    },
    "object_meta": {
      "name": "image-package-extractor-cleanup-28404000-msz2v",
      "generateName": "image-package-extractor-cleanup-28404000-",
      "namespace": "kube-system",
      "resourceVersion": "216097",
      "creationTimestamp": null,
      "labels": {
        "batch.kubernetes.io/controller-uid": "17f38e1c-41b1-4d94-bfce-10f672565f21",
        "batch.kubernetes.io/job-name": "image-package-extractor-cleanup-28404000",
        "controller-uid": "17f38e1c-41b1-4d94-bfce-10f672565f21",
        "job-name": "image-package-extractor-cleanup-28404000"
      },
      "ownerReferences": [
        {
          "apiVersion": "batch/v1",
          "kind": "Job",
          "name": "image-package-extractor-cleanup-28404000",
          "uid": "17f38e1c-41b1-4d94-bfce-10f672565f21",
          "controller": true,
          "blockOwnerDeletion": true
        }
      ]
    },
    "checks": [
      {
        "check": {
          "name": "Stable version",
          "id": "stable-version",
          "target_type": "all",
          "comment": "Checks if the object is using a deprecated apiVersion",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Label values",
          "id": "label-values",
          "target_type": "all",
          "comment": "Validates label values",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Stable version",
          "id": "stable-version",
          "target_type": "all",
          "comment": "Checks if the object is using a deprecated apiVersion",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Label values",
          "id": "label-values",
          "target_type": "all",
          "comment": "Validates label values",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Container Memory Requests Equal Limits",
          "id": "container-memory-requests-equal-limits",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have the same memory requests as limits set.",
          "optional": true
        },
        "grade": 10,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-memory-requests-equal-limits is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Ephemeral Storage Request and Limit",
          "id": "container-ephemeral-storage-request-and-limit",
          "target_type": "Pod",
          "comment": "Makes sure all pods have ephemeral-storage requests and limits set",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "image-package-extractor-cleanup",
            "summary": "Ephemeral Storage limit is not set",
            "description": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage"
          }
        ]
      },
      {
        "check": {
          "name": "Container Ephemeral Storage Request Equals Limit",
          "id": "container-ephemeral-storage-request-equals-limit",
          "target_type": "Pod",
          "comment": "Make sure all pods have matching ephemeral-storage requests and limits",
          "optional": true
        },
        "grade": 10,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-ephemeral-storage-request-equals-limit is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Pod NetworkPolicy",
          "id": "pod-networkpolicy",
          "target_type": "Pod",
          "comment": "Makes sure that all Pods are targeted by a NetworkPolicy",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "",
            "summary": "The pod does not have a matching NetworkPolicy",
            "description": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect."
          }
        ]
      },
      {
        "check": {
          "name": "Pod Probes",
          "id": "pod-probes",
          "target_type": "Pod",
          "comment": "Makes sure that all Pods have safe probe configurations",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": [
          {
            "path": "",
            "summary": "The pod is not targeted by a service, skipping probe checks.",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Security Context ReadOnlyRootFilesystem",
          "id": "container-security-context-readonlyrootfilesystem",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have a security context with read only filesystem set",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Container Seccomp Profile",
          "id": "container-seccomp-profile",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have at a seccomp policy configured.",
          "optional": true
        },
        "grade": 5,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-seccomp-profile is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Resource Requests Equal Limits",
          "id": "container-resource-requests-equal-limits",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have the same requests as limits on resources set.",
          "optional": true
        },
        "grade": 1,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-resource-requests-equal-limits is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Security Context User Group ID",
          "id": "container-security-context-user-group-id",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have a security context with valid UID and GID set ",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "image-package-extractor-cleanup",
            "summary": "The container is running with a low user ID",
            "description": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value \u003e 10000"
          },
          {
            "path": "image-package-extractor-cleanup",
            "summary": "The container running with a low group ID",
            "description": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value \u003e 10000"
          }
        ]
      },
      {
        "check": {
          "name": "Container Image Tag",
          "id": "container-image-tag",
          "target_type": "Pod",
          "comment": "Makes sure that a explicit non-latest tag is used",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Container CPU Requests Equal Limits",
          "id": "container-cpu-requests-equal-limits",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have the same CPU requests as limits set.",
          "optional": true
        },
        "grade": 1,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-cpu-requests-equal-limits is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Image Pull Policy",
          "id": "container-image-pull-policy",
          "target_type": "Pod",
          "comment": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Environment Variable Key Duplication",
          "id": "environment-variable-key-duplication",
          "target_type": "Pod",
          "comment": "Makes sure that duplicated environment variable keys are not duplicated",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Container Security Context Privileged",
          "id": "container-security-context-privileged",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have a unprivileged security context set",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Container Resources",
          "id": "container-resources",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "image-package-extractor-cleanup",
            "summary": "CPU limit is not set",
            "description": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu"
          }
        ]
      },
      {
        "check": {
          "name": "Container Ports Check",
          "id": "container-ports-check",
          "target_type": "Pod",
          "comment": "Container Ports Checks",
          "optional": true
        },
        "grade": 10,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-ports-check is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Resources",
          "id": "container-resources",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "image-package-extractor-cleanup",
            "summary": "CPU limit is not set",
            "description": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu"
          }
        ]
      },
      {
        "check": {
          "name": "Container CPU Requests Equal Limits",
          "id": "container-cpu-requests-equal-limits",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have the same CPU requests as limits set.",
          "optional": true
        },
        "grade": 1,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-cpu-requests-equal-limits is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Image Pull Policy",
          "id": "container-image-pull-policy",
          "target_type": "Pod",
          "comment": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Environment Variable Key Duplication",
          "id": "environment-variable-key-duplication",
          "target_type": "Pod",
          "comment": "Makes sure that duplicated environment variable keys are not duplicated",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Container Security Context Privileged",
          "id": "container-security-context-privileged",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have a unprivileged security context set",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Container Ports Check",
          "id": "container-ports-check",
          "target_type": "Pod",
          "comment": "Container Ports Checks",
          "optional": true
        },
        "grade": 10,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-ports-check is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Resource Requests Equal Limits",
          "id": "container-resource-requests-equal-limits",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have the same requests as limits on resources set.",
          "optional": true
        },
        "grade": 1,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-resource-requests-equal-limits is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Memory Requests Equal Limits",
          "id": "container-memory-requests-equal-limits",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have the same memory requests as limits set.",
          "optional": true
        },
        "grade": 10,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-memory-requests-equal-limits is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Ephemeral Storage Request and Limit",
          "id": "container-ephemeral-storage-request-and-limit",
          "target_type": "Pod",
          "comment": "Makes sure all pods have ephemeral-storage requests and limits set",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "image-package-extractor-cleanup",
            "summary": "Ephemeral Storage limit is not set",
            "description": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage"
          }
        ]
      },
      {
        "check": {
          "name": "Container Ephemeral Storage Request Equals Limit",
          "id": "container-ephemeral-storage-request-equals-limit",
          "target_type": "Pod",
          "comment": "Make sure all pods have matching ephemeral-storage requests and limits",
          "optional": true
        },
        "grade": 10,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-ephemeral-storage-request-equals-limit is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Pod NetworkPolicy",
          "id": "pod-networkpolicy",
          "target_type": "Pod",
          "comment": "Makes sure that all Pods are targeted by a NetworkPolicy",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "",
            "summary": "The pod does not have a matching NetworkPolicy",
            "description": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect."
          }
        ]
      },
      {
        "check": {
          "name": "Pod Probes",
          "id": "pod-probes",
          "target_type": "Pod",
          "comment": "Makes sure that all Pods have safe probe configurations",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": [
          {
            "path": "",
            "summary": "The pod is not targeted by a service, skipping probe checks.",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Security Context ReadOnlyRootFilesystem",
          "id": "container-security-context-readonlyrootfilesystem",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have a security context with read only filesystem set",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Container Seccomp Profile",
          "id": "container-seccomp-profile",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have at a seccomp policy configured.",
          "optional": true
        },
        "grade": 5,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-seccomp-profile is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Image Tag",
          "id": "container-image-tag",
          "target_type": "Pod",
          "comment": "Makes sure that a explicit non-latest tag is used",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Container Security Context User Group ID",
          "id": "container-security-context-user-group-id",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have a security context with valid UID and GID set ",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "image-package-extractor-cleanup",
            "summary": "The container is running with a low user ID",
            "description": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value \u003e 10000"
          },
          {
            "path": "image-package-extractor-cleanup",
            "summary": "The container running with a low group ID",
            "description": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value \u003e 10000"
          }
        ]
      }
    ],
    "file_name": "/tmp/kube-security-scanner/yaml/ALL/ALL.yaml",
    "file_row": 18533
  },
  {
    "object_name": "Pod/v1/kube-system/kube-dns-autoscaler-84b8db4dc7-k24mn",
    "type_meta": {
      "kind": "Pod",
      "apiVersion": "v1"
    },
    "object_meta": {
      "name": "kube-dns-autoscaler-84b8db4dc7-k24mn",
      "generateName": "kube-dns-autoscaler-84b8db4dc7-",
      "namespace": "kube-system",
      "resourceVersion": "1812",
      "creationTimestamp": null,
      "labels": {
        "k8s-app": "kube-dns-autoscaler",
        "pod-template-hash": "84b8db4dc7"
      },
      "ownerReferences": [
        {
          "apiVersion": "apps/v1",
          "kind": "ReplicaSet",
          "name": "kube-dns-autoscaler-84b8db4dc7",
          "uid": "3d81ad34-74e1-4474-9f63-2b4276f87bca",
          "controller": true,
          "blockOwnerDeletion": true
        }
      ]
    },
    "checks": [
      {
        "check": {
          "name": "Stable version",
          "id": "stable-version",
          "target_type": "all",
          "comment": "Checks if the object is using a deprecated apiVersion",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Label values",
          "id": "label-values",
          "target_type": "all",
          "comment": "Validates label values",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Stable version",
          "id": "stable-version",
          "target_type": "all",
          "comment": "Checks if the object is using a deprecated apiVersion",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Label values",
          "id": "label-values",
          "target_type": "all",
          "comment": "Validates label values",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Pod Probes",
          "id": "pod-probes",
          "target_type": "Pod",
          "comment": "Makes sure that all Pods have safe probe configurations",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": [
          {
            "path": "",
            "summary": "The pod is not targeted by a service, skipping probe checks.",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Security Context ReadOnlyRootFilesystem",
          "id": "container-security-context-readonlyrootfilesystem",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have a security context with read only filesystem set",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "autoscaler",
            "summary": "Container has no configured security context",
            "description": "Set securityContext to run the container in a more secure context."
          }
        ]
      },
      {
        "check": {
          "name": "Container Seccomp Profile",
          "id": "container-seccomp-profile",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have at a seccomp policy configured.",
          "optional": true
        },
        "grade": 5,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-seccomp-profile is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Resource Requests Equal Limits",
          "id": "container-resource-requests-equal-limits",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have the same requests as limits on resources set.",
          "optional": true
        },
        "grade": 1,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-resource-requests-equal-limits is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Memory Requests Equal Limits",
          "id": "container-memory-requests-equal-limits",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have the same memory requests as limits set.",
          "optional": true
        },
        "grade": 1,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-memory-requests-equal-limits is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Ephemeral Storage Request and Limit",
          "id": "container-ephemeral-storage-request-and-limit",
          "target_type": "Pod",
          "comment": "Makes sure all pods have ephemeral-storage requests and limits set",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "autoscaler",
            "summary": "Ephemeral Storage limit is not set",
            "description": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage"
          }
        ]
      },
      {
        "check": {
          "name": "Container Ephemeral Storage Request Equals Limit",
          "id": "container-ephemeral-storage-request-equals-limit",
          "target_type": "Pod",
          "comment": "Make sure all pods have matching ephemeral-storage requests and limits",
          "optional": true
        },
        "grade": 10,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-ephemeral-storage-request-equals-limit is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Pod NetworkPolicy",
          "id": "pod-networkpolicy",
          "target_type": "Pod",
          "comment": "Makes sure that all Pods are targeted by a NetworkPolicy",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "",
            "summary": "The pod does not have a matching NetworkPolicy",
            "description": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect."
          }
        ]
      },
      {
        "check": {
          "name": "Container Image Tag",
          "id": "container-image-tag",
          "target_type": "Pod",
          "comment": "Makes sure that a explicit non-latest tag is used",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Container Security Context User Group ID",
          "id": "container-security-context-user-group-id",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have a security context with valid UID and GID set ",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "autoscaler",
            "summary": "The container is running with a low user ID",
            "description": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value \u003e 10000"
          },
          {
            "path": "autoscaler",
            "summary": "The container running with a low group ID",
            "description": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value \u003e 10000"
          }
        ]
      },
      {
        "check": {
          "name": "Container Resources",
          "id": "container-resources",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "autoscaler",
            "summary": "CPU limit is not set",
            "description": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu"
          },
          {
            "path": "autoscaler",
            "summary": "Memory limit is not set",
            "description": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.memory"
          }
        ]
      },
      {
        "check": {
          "name": "Container CPU Requests Equal Limits",
          "id": "container-cpu-requests-equal-limits",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have the same CPU requests as limits set.",
          "optional": true
        },
        "grade": 1,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-cpu-requests-equal-limits is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Image Pull Policy",
          "id": "container-image-pull-policy",
          "target_type": "Pod",
          "comment": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "autoscaler",
            "summary": "ImagePullPolicy is not set to Always",
            "description": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want."
          }
        ]
      },
      {
        "check": {
          "name": "Environment Variable Key Duplication",
          "id": "environment-variable-key-duplication",
          "target_type": "Pod",
          "comment": "Makes sure that duplicated environment variable keys are not duplicated",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Container Security Context Privileged",
          "id": "container-security-context-privileged",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have a unprivileged security context set",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Container Ports Check",
          "id": "container-ports-check",
          "target_type": "Pod",
          "comment": "Container Ports Checks",
          "optional": true
        },
        "grade": 10,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-ports-check is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Security Context ReadOnlyRootFilesystem",
          "id": "container-security-context-readonlyrootfilesystem",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have a security context with read only filesystem set",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "autoscaler",
            "summary": "Container has no configured security context",
            "description": "Set securityContext to run the container in a more secure context."
          }
        ]
      },
      {
        "check": {
          "name": "Container Seccomp Profile",
          "id": "container-seccomp-profile",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have at a seccomp policy configured.",
          "optional": true
        },
        "grade": 5,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-seccomp-profile is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Resource Requests Equal Limits",
          "id": "container-resource-requests-equal-limits",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have the same requests as limits on resources set.",
          "optional": true
        },
        "grade": 1,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-resource-requests-equal-limits is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Memory Requests Equal Limits",
          "id": "container-memory-requests-equal-limits",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have the same memory requests as limits set.",
          "optional": true
        },
        "grade": 1,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-memory-requests-equal-limits is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Ephemeral Storage Request and Limit",
          "id": "container-ephemeral-storage-request-and-limit",
          "target_type": "Pod",
          "comment": "Makes sure all pods have ephemeral-storage requests and limits set",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "autoscaler",
            "summary": "Ephemeral Storage limit is not set",
            "description": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage"
          }
        ]
      },
      {
        "check": {
          "name": "Container Ephemeral Storage Request Equals Limit",
          "id": "container-ephemeral-storage-request-equals-limit",
          "target_type": "Pod",
          "comment": "Make sure all pods have matching ephemeral-storage requests and limits",
          "optional": true
        },
        "grade": 10,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-ephemeral-storage-request-equals-limit is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Pod NetworkPolicy",
          "id": "pod-networkpolicy",
          "target_type": "Pod",
          "comment": "Makes sure that all Pods are targeted by a NetworkPolicy",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "",
            "summary": "The pod does not have a matching NetworkPolicy",
            "description": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect."
          }
        ]
      },
      {
        "check": {
          "name": "Pod Probes",
          "id": "pod-probes",
          "target_type": "Pod",
          "comment": "Makes sure that all Pods have safe probe configurations",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": [
          {
            "path": "",
            "summary": "The pod is not targeted by a service, skipping probe checks.",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Image Tag",
          "id": "container-image-tag",
          "target_type": "Pod",
          "comment": "Makes sure that a explicit non-latest tag is used",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Container Security Context User Group ID",
          "id": "container-security-context-user-group-id",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have a security context with valid UID and GID set ",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "autoscaler",
            "summary": "The container is running with a low user ID",
            "description": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value \u003e 10000"
          },
          {
            "path": "autoscaler",
            "summary": "The container running with a low group ID",
            "description": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value \u003e 10000"
          }
        ]
      },
      {
        "check": {
          "name": "Container Resources",
          "id": "container-resources",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "autoscaler",
            "summary": "CPU limit is not set",
            "description": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu"
          },
          {
            "path": "autoscaler",
            "summary": "Memory limit is not set",
            "description": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.memory"
          }
        ]
      },
      {
        "check": {
          "name": "Container CPU Requests Equal Limits",
          "id": "container-cpu-requests-equal-limits",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have the same CPU requests as limits set.",
          "optional": true
        },
        "grade": 1,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-cpu-requests-equal-limits is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Image Pull Policy",
          "id": "container-image-pull-policy",
          "target_type": "Pod",
          "comment": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "autoscaler",
            "summary": "ImagePullPolicy is not set to Always",
            "description": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want."
          }
        ]
      },
      {
        "check": {
          "name": "Environment Variable Key Duplication",
          "id": "environment-variable-key-duplication",
          "target_type": "Pod",
          "comment": "Makes sure that duplicated environment variable keys are not duplicated",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Container Security Context Privileged",
          "id": "container-security-context-privileged",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have a unprivileged security context set",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Container Ports Check",
          "id": "container-ports-check",
          "target_type": "Pod",
          "comment": "Container Ports Checks",
          "optional": true
        },
        "grade": 10,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-ports-check is ignored",
            "description": ""
          }
        ]
      }
    ],
    "file_name": "/tmp/kube-security-scanner/yaml/ALL/ALL.yaml",
    "file_row": 19393
  },
  {
    "object_name": "Pod/v1/kube-system/pdcsi-node-gdl8v",
    "type_meta": {
      "kind": "Pod",
      "apiVersion": "v1"
    },
    "object_meta": {
      "name": "pdcsi-node-gdl8v",
      "generateName": "pdcsi-node-",
      "namespace": "kube-system",
      "resourceVersion": "1554",
      "creationTimestamp": null,
      "labels": {
        "controller-revision-hash": "6649959657",
        "k8s-app": "gcp-compute-persistent-disk-csi-driver",
        "pod-template-generation": "1"
      },
      "ownerReferences": [
        {
          "apiVersion": "apps/v1",
          "kind": "DaemonSet",
          "name": "pdcsi-node",
          "uid": "e797a9a4-6af0-4dcc-a1bf-15b75183c675",
          "controller": true,
          "blockOwnerDeletion": true
        }
      ]
    },
    "checks": [
      {
        "check": {
          "name": "Label values",
          "id": "label-values",
          "target_type": "all",
          "comment": "Validates label values",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Stable version",
          "id": "stable-version",
          "target_type": "all",
          "comment": "Checks if the object is using a deprecated apiVersion",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Label values",
          "id": "label-values",
          "target_type": "all",
          "comment": "Validates label values",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Stable version",
          "id": "stable-version",
          "target_type": "all",
          "comment": "Checks if the object is using a deprecated apiVersion",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Container Image Tag",
          "id": "container-image-tag",
          "target_type": "Pod",
          "comment": "Makes sure that a explicit non-latest tag is used",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Container Security Context User Group ID",
          "id": "container-security-context-user-group-id",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have a security context with valid UID and GID set ",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "csi-driver-registrar",
            "summary": "The container is running with a low user ID",
            "description": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value \u003e 10000"
          },
          {
            "path": "csi-driver-registrar",
            "summary": "The container running with a low group ID",
            "description": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value \u003e 10000"
          },
          {
            "path": "gce-pd-driver",
            "summary": "The container is running with a low user ID",
            "description": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value \u003e 10000"
          },
          {
            "path": "gce-pd-driver",
            "summary": "The container running with a low group ID",
            "description": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value \u003e 10000"
          }
        ]
      },
      {
        "check": {
          "name": "Container Image Pull Policy",
          "id": "container-image-pull-policy",
          "target_type": "Pod",
          "comment": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "csi-driver-registrar",
            "summary": "ImagePullPolicy is not set to Always",
            "description": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want."
          },
          {
            "path": "gce-pd-driver",
            "summary": "ImagePullPolicy is not set to Always",
            "description": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want."
          }
        ]
      },
      {
        "check": {
          "name": "Environment Variable Key Duplication",
          "id": "environment-variable-key-duplication",
          "target_type": "Pod",
          "comment": "Makes sure that duplicated environment variable keys are not duplicated",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Container Security Context Privileged",
          "id": "container-security-context-privileged",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have a unprivileged security context set",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "gce-pd-driver",
            "summary": "The container is privileged",
            "description": "Set securityContext.privileged to false. Privileged containers can access all devices on the host, and grants almost the same access as non-containerized processes on the host."
          }
        ]
      },
      {
        "check": {
          "name": "Container Resources",
          "id": "container-resources",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "csi-driver-registrar",
            "summary": "CPU limit is not set",
            "description": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu"
          },
          {
            "path": "gce-pd-driver",
            "summary": "CPU limit is not set",
            "description": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu"
          }
        ]
      },
      {
        "check": {
          "name": "Container CPU Requests Equal Limits",
          "id": "container-cpu-requests-equal-limits",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have the same CPU requests as limits set.",
          "optional": true
        },
        "grade": 1,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-cpu-requests-equal-limits is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Ports Check",
          "id": "container-ports-check",
          "target_type": "Pod",
          "comment": "Container Ports Checks",
          "optional": true
        },
        "grade": 10,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-ports-check is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Ephemeral Storage Request and Limit",
          "id": "container-ephemeral-storage-request-and-limit",
          "target_type": "Pod",
          "comment": "Makes sure all pods have ephemeral-storage requests and limits set",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "csi-driver-registrar",
            "summary": "Ephemeral Storage limit is not set",
            "description": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage"
          },
          {
            "path": "gce-pd-driver",
            "summary": "Ephemeral Storage limit is not set",
            "description": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage"
          }
        ]
      },
      {
        "check": {
          "name": "Container Ephemeral Storage Request Equals Limit",
          "id": "container-ephemeral-storage-request-equals-limit",
          "target_type": "Pod",
          "comment": "Make sure all pods have matching ephemeral-storage requests and limits",
          "optional": true
        },
        "grade": 10,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-ephemeral-storage-request-equals-limit is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Pod NetworkPolicy",
          "id": "pod-networkpolicy",
          "target_type": "Pod",
          "comment": "Makes sure that all Pods are targeted by a NetworkPolicy",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "",
            "summary": "The pod does not have a matching NetworkPolicy",
            "description": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect."
          }
        ]
      },
      {
        "check": {
          "name": "Pod Probes",
          "id": "pod-probes",
          "target_type": "Pod",
          "comment": "Makes sure that all Pods have safe probe configurations",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": [
          {
            "path": "",
            "summary": "The pod is not targeted by a service, skipping probe checks.",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Security Context ReadOnlyRootFilesystem",
          "id": "container-security-context-readonlyrootfilesystem",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have a security context with read only filesystem set",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "csi-driver-registrar",
            "summary": "The pod has a container with a writable root filesystem",
            "description": "Set securityContext.readOnlyRootFilesystem to true"
          },
          {
            "path": "gce-pd-driver",
            "summary": "The pod has a container with a writable root filesystem",
            "description": "Set securityContext.readOnlyRootFilesystem to true"
          }
        ]
      },
      {
        "check": {
          "name": "Container Seccomp Profile",
          "id": "container-seccomp-profile",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have at a seccomp policy configured.",
          "optional": true
        },
        "grade": 5,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-seccomp-profile is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Resource Requests Equal Limits",
          "id": "container-resource-requests-equal-limits",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have the same requests as limits on resources set.",
          "optional": true
        },
        "grade": 1,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-resource-requests-equal-limits is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Memory Requests Equal Limits",
          "id": "container-memory-requests-equal-limits",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have the same memory requests as limits set.",
          "optional": true
        },
        "grade": 1,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-memory-requests-equal-limits is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Image Tag",
          "id": "container-image-tag",
          "target_type": "Pod",
          "comment": "Makes sure that a explicit non-latest tag is used",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Container Security Context User Group ID",
          "id": "container-security-context-user-group-id",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have a security context with valid UID and GID set ",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "csi-driver-registrar",
            "summary": "The container is running with a low user ID",
            "description": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value \u003e 10000"
          },
          {
            "path": "csi-driver-registrar",
            "summary": "The container running with a low group ID",
            "description": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value \u003e 10000"
          },
          {
            "path": "gce-pd-driver",
            "summary": "The container is running with a low user ID",
            "description": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value \u003e 10000"
          },
          {
            "path": "gce-pd-driver",
            "summary": "The container running with a low group ID",
            "description": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value \u003e 10000"
          }
        ]
      },
      {
        "check": {
          "name": "Container Resources",
          "id": "container-resources",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "csi-driver-registrar",
            "summary": "CPU limit is not set",
            "description": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu"
          },
          {
            "path": "gce-pd-driver",
            "summary": "CPU limit is not set",
            "description": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu"
          }
        ]
      },
      {
        "check": {
          "name": "Container CPU Requests Equal Limits",
          "id": "container-cpu-requests-equal-limits",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have the same CPU requests as limits set.",
          "optional": true
        },
        "grade": 1,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-cpu-requests-equal-limits is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Image Pull Policy",
          "id": "container-image-pull-policy",
          "target_type": "Pod",
          "comment": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "csi-driver-registrar",
            "summary": "ImagePullPolicy is not set to Always",
            "description": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want."
          },
          {
            "path": "gce-pd-driver",
            "summary": "ImagePullPolicy is not set to Always",
            "description": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want."
          }
        ]
      },
      {
        "check": {
          "name": "Environment Variable Key Duplication",
          "id": "environment-variable-key-duplication",
          "target_type": "Pod",
          "comment": "Makes sure that duplicated environment variable keys are not duplicated",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Container Security Context Privileged",
          "id": "container-security-context-privileged",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have a unprivileged security context set",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "gce-pd-driver",
            "summary": "The container is privileged",
            "description": "Set securityContext.privileged to false. Privileged containers can access all devices on the host, and grants almost the same access as non-containerized processes on the host."
          }
        ]
      },
      {
        "check": {
          "name": "Container Ports Check",
          "id": "container-ports-check",
          "target_type": "Pod",
          "comment": "Container Ports Checks",
          "optional": true
        },
        "grade": 10,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-ports-check is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Pod Probes",
          "id": "pod-probes",
          "target_type": "Pod",
          "comment": "Makes sure that all Pods have safe probe configurations",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": [
          {
            "path": "",
            "summary": "The pod is not targeted by a service, skipping probe checks.",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Security Context ReadOnlyRootFilesystem",
          "id": "container-security-context-readonlyrootfilesystem",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have a security context with read only filesystem set",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "csi-driver-registrar",
            "summary": "The pod has a container with a writable root filesystem",
            "description": "Set securityContext.readOnlyRootFilesystem to true"
          },
          {
            "path": "gce-pd-driver",
            "summary": "The pod has a container with a writable root filesystem",
            "description": "Set securityContext.readOnlyRootFilesystem to true"
          }
        ]
      },
      {
        "check": {
          "name": "Container Seccomp Profile",
          "id": "container-seccomp-profile",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have at a seccomp policy configured.",
          "optional": true
        },
        "grade": 5,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-seccomp-profile is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Resource Requests Equal Limits",
          "id": "container-resource-requests-equal-limits",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have the same requests as limits on resources set.",
          "optional": true
        },
        "grade": 1,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-resource-requests-equal-limits is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Memory Requests Equal Limits",
          "id": "container-memory-requests-equal-limits",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have the same memory requests as limits set.",
          "optional": true
        },
        "grade": 1,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-memory-requests-equal-limits is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Ephemeral Storage Request and Limit",
          "id": "container-ephemeral-storage-request-and-limit",
          "target_type": "Pod",
          "comment": "Makes sure all pods have ephemeral-storage requests and limits set",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "csi-driver-registrar",
            "summary": "Ephemeral Storage limit is not set",
            "description": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage"
          },
          {
            "path": "gce-pd-driver",
            "summary": "Ephemeral Storage limit is not set",
            "description": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage"
          }
        ]
      },
      {
        "check": {
          "name": "Container Ephemeral Storage Request Equals Limit",
          "id": "container-ephemeral-storage-request-equals-limit",
          "target_type": "Pod",
          "comment": "Make sure all pods have matching ephemeral-storage requests and limits",
          "optional": true
        },
        "grade": 10,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-ephemeral-storage-request-equals-limit is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Pod NetworkPolicy",
          "id": "pod-networkpolicy",
          "target_type": "Pod",
          "comment": "Makes sure that all Pods are targeted by a NetworkPolicy",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "",
            "summary": "The pod does not have a matching NetworkPolicy",
            "description": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect."
          }
        ]
      }
    ],
    "file_name": "/tmp/kube-security-scanner/yaml/ALL/ALL.yaml",
    "file_row": 20031
  },
  {
    "object_name": "Service/v1/default/kubernetes",
    "type_meta": {
      "kind": "Service",
      "apiVersion": "v1"
    },
    "object_meta": {
      "name": "kubernetes",
      "namespace": "default",
      "resourceVersion": "190",
      "creationTimestamp": null,
      "labels": {
        "component": "apiserver",
        "provider": "kubernetes"
      }
    },
    "checks": [
      {
        "check": {
          "name": "Stable version",
          "id": "stable-version",
          "target_type": "all",
          "comment": "Checks if the object is using a deprecated apiVersion",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Label values",
          "id": "label-values",
          "target_type": "all",
          "comment": "Validates label values",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Service Type",
          "id": "service-type",
          "target_type": "Service",
          "comment": "Makes sure that the Service type is not NodePort",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Service Targets Pod",
          "id": "service-targets-pod",
          "target_type": "Service",
          "comment": "Makes sure that all Services targets a Pod",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "",
            "summary": "The services selector does not match any pods",
            "description": ""
          }
        ]
      }
    ],
    "file_name": "/tmp/kube-security-scanner/yaml/ALL/ALL.yaml",
    "file_row": 1
  },
  {
    "object_name": "Service/v1/gmp-system/gmp-operator",
    "type_meta": {
      "kind": "Service",
      "apiVersion": "v1"
    },
    "object_meta": {
      "name": "gmp-operator",
      "namespace": "gmp-system",
      "resourceVersion": "739",
      "creationTimestamp": null,
      "labels": {
        "addonmanager.kubernetes.io/mode": "Reconcile"
      }
    },
    "checks": [
      {
        "check": {
          "name": "Stable version",
          "id": "stable-version",
          "target_type": "all",
          "comment": "Checks if the object is using a deprecated apiVersion",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Label values",
          "id": "label-values",
          "target_type": "all",
          "comment": "Validates label values",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Service Targets Pod",
          "id": "service-targets-pod",
          "target_type": "Service",
          "comment": "Makes sure that all Services targets a Pod",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Service Type",
          "id": "service-type",
          "target_type": "Service",
          "comment": "Makes sure that the Service type is not NodePort",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      }
    ],
    "file_name": "/tmp/kube-security-scanner/yaml/ALL/ALL.yaml",
    "file_row": 2257
  },
  {
    "object_name": "Pod/v1/kube-system/image-package-extractor-pzhf2",
    "type_meta": {
      "kind": "Pod",
      "apiVersion": "v1"
    },
    "object_meta": {
      "name": "image-package-extractor-pzhf2",
      "generateName": "image-package-extractor-",
      "namespace": "kube-system",
      "resourceVersion": "1838",
      "creationTimestamp": null,
      "labels": {
        "controller-revision-hash": "cb885d5c7",
        "k8s-app": "image-package-extractor",
        "pod-template-generation": "1"
      },
      "ownerReferences": [
        {
          "apiVersion": "apps/v1",
          "kind": "DaemonSet",
          "name": "image-package-extractor",
          "uid": "a81492da-ce25-4db3-9adb-bafb7834fa04",
          "controller": true,
          "blockOwnerDeletion": true
        }
      ]
    },
    "checks": [
      {
        "check": {
          "name": "Stable version",
          "id": "stable-version",
          "target_type": "all",
          "comment": "Checks if the object is using a deprecated apiVersion",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Label values",
          "id": "label-values",
          "target_type": "all",
          "comment": "Validates label values",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Stable version",
          "id": "stable-version",
          "target_type": "all",
          "comment": "Checks if the object is using a deprecated apiVersion",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Label values",
          "id": "label-values",
          "target_type": "all",
          "comment": "Validates label values",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Container Image Tag",
          "id": "container-image-tag",
          "target_type": "Pod",
          "comment": "Makes sure that a explicit non-latest tag is used",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Container Security Context User Group ID",
          "id": "container-security-context-user-group-id",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have a security context with valid UID and GID set ",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "image-package-extractor",
            "summary": "The container is running with a low user ID",
            "description": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value \u003e 10000"
          },
          {
            "path": "image-package-extractor",
            "summary": "The container running with a low group ID",
            "description": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value \u003e 10000"
          }
        ]
      },
      {
        "check": {
          "name": "Container Image Pull Policy",
          "id": "container-image-pull-policy",
          "target_type": "Pod",
          "comment": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Environment Variable Key Duplication",
          "id": "environment-variable-key-duplication",
          "target_type": "Pod",
          "comment": "Makes sure that duplicated environment variable keys are not duplicated",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Container Security Context Privileged",
          "id": "container-security-context-privileged",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have a unprivileged security context set",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Container Resources",
          "id": "container-resources",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "image-package-extractor",
            "summary": "CPU limit is not set",
            "description": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu"
          }
        ]
      },
      {
        "check": {
          "name": "Container CPU Requests Equal Limits",
          "id": "container-cpu-requests-equal-limits",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have the same CPU requests as limits set.",
          "optional": true
        },
        "grade": 1,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-cpu-requests-equal-limits is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Ports Check",
          "id": "container-ports-check",
          "target_type": "Pod",
          "comment": "Container Ports Checks",
          "optional": true
        },
        "grade": 10,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-ports-check is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Ephemeral Storage Request and Limit",
          "id": "container-ephemeral-storage-request-and-limit",
          "target_type": "Pod",
          "comment": "Makes sure all pods have ephemeral-storage requests and limits set",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "image-package-extractor",
            "summary": "Ephemeral Storage limit is not set",
            "description": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage"
          }
        ]
      },
      {
        "check": {
          "name": "Container Ephemeral Storage Request Equals Limit",
          "id": "container-ephemeral-storage-request-equals-limit",
          "target_type": "Pod",
          "comment": "Make sure all pods have matching ephemeral-storage requests and limits",
          "optional": true
        },
        "grade": 10,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-ephemeral-storage-request-equals-limit is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Pod NetworkPolicy",
          "id": "pod-networkpolicy",
          "target_type": "Pod",
          "comment": "Makes sure that all Pods are targeted by a NetworkPolicy",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "",
            "summary": "The pod does not have a matching NetworkPolicy",
            "description": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect."
          }
        ]
      },
      {
        "check": {
          "name": "Pod Probes",
          "id": "pod-probes",
          "target_type": "Pod",
          "comment": "Makes sure that all Pods have safe probe configurations",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": [
          {
            "path": "",
            "summary": "The pod is not targeted by a service, skipping probe checks.",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Security Context ReadOnlyRootFilesystem",
          "id": "container-security-context-readonlyrootfilesystem",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have a security context with read only filesystem set",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Container Seccomp Profile",
          "id": "container-seccomp-profile",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have at a seccomp policy configured.",
          "optional": true
        },
        "grade": 5,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-seccomp-profile is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Resource Requests Equal Limits",
          "id": "container-resource-requests-equal-limits",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have the same requests as limits on resources set.",
          "optional": true
        },
        "grade": 1,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-resource-requests-equal-limits is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Memory Requests Equal Limits",
          "id": "container-memory-requests-equal-limits",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have the same memory requests as limits set.",
          "optional": true
        },
        "grade": 10,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-memory-requests-equal-limits is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Ports Check",
          "id": "container-ports-check",
          "target_type": "Pod",
          "comment": "Container Ports Checks",
          "optional": true
        },
        "grade": 10,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-ports-check is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Pod NetworkPolicy",
          "id": "pod-networkpolicy",
          "target_type": "Pod",
          "comment": "Makes sure that all Pods are targeted by a NetworkPolicy",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "",
            "summary": "The pod does not have a matching NetworkPolicy",
            "description": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect."
          }
        ]
      },
      {
        "check": {
          "name": "Pod Probes",
          "id": "pod-probes",
          "target_type": "Pod",
          "comment": "Makes sure that all Pods have safe probe configurations",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": [
          {
            "path": "",
            "summary": "The pod is not targeted by a service, skipping probe checks.",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Security Context ReadOnlyRootFilesystem",
          "id": "container-security-context-readonlyrootfilesystem",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have a security context with read only filesystem set",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Container Seccomp Profile",
          "id": "container-seccomp-profile",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have at a seccomp policy configured.",
          "optional": true
        },
        "grade": 5,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-seccomp-profile is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Resource Requests Equal Limits",
          "id": "container-resource-requests-equal-limits",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have the same requests as limits on resources set.",
          "optional": true
        },
        "grade": 1,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-resource-requests-equal-limits is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Memory Requests Equal Limits",
          "id": "container-memory-requests-equal-limits",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have the same memory requests as limits set.",
          "optional": true
        },
        "grade": 10,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-memory-requests-equal-limits is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Ephemeral Storage Request and Limit",
          "id": "container-ephemeral-storage-request-and-limit",
          "target_type": "Pod",
          "comment": "Makes sure all pods have ephemeral-storage requests and limits set",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "image-package-extractor",
            "summary": "Ephemeral Storage limit is not set",
            "description": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage"
          }
        ]
      },
      {
        "check": {
          "name": "Container Ephemeral Storage Request Equals Limit",
          "id": "container-ephemeral-storage-request-equals-limit",
          "target_type": "Pod",
          "comment": "Make sure all pods have matching ephemeral-storage requests and limits",
          "optional": true
        },
        "grade": 10,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-ephemeral-storage-request-equals-limit is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Image Tag",
          "id": "container-image-tag",
          "target_type": "Pod",
          "comment": "Makes sure that a explicit non-latest tag is used",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Container Security Context User Group ID",
          "id": "container-security-context-user-group-id",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have a security context with valid UID and GID set ",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "image-package-extractor",
            "summary": "The container is running with a low user ID",
            "description": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value \u003e 10000"
          },
          {
            "path": "image-package-extractor",
            "summary": "The container running with a low group ID",
            "description": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value \u003e 10000"
          }
        ]
      },
      {
        "check": {
          "name": "Container Security Context Privileged",
          "id": "container-security-context-privileged",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have a unprivileged security context set",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Container Resources",
          "id": "container-resources",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "image-package-extractor",
            "summary": "CPU limit is not set",
            "description": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu"
          }
        ]
      },
      {
        "check": {
          "name": "Container CPU Requests Equal Limits",
          "id": "container-cpu-requests-equal-limits",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have the same CPU requests as limits set.",
          "optional": true
        },
        "grade": 1,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-cpu-requests-equal-limits is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Image Pull Policy",
          "id": "container-image-pull-policy",
          "target_type": "Pod",
          "comment": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Environment Variable Key Duplication",
          "id": "environment-variable-key-duplication",
          "target_type": "Pod",
          "comment": "Makes sure that duplicated environment variable keys are not duplicated",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      }
    ],
    "file_name": "/tmp/kube-security-scanner/yaml/ALL/ALL.yaml",
    "file_row": 18672
  },
  {
    "object_name": "Pod/v1/kube-system/konnectivity-agent-5fc7ff9689-84922",
    "type_meta": {
      "kind": "Pod",
      "apiVersion": "v1"
    },
    "object_meta": {
      "name": "konnectivity-agent-5fc7ff9689-84922",
      "generateName": "konnectivity-agent-5fc7ff9689-",
      "namespace": "kube-system",
      "resourceVersion": "1873",
      "creationTimestamp": null,
      "labels": {
        "k8s-app": "konnectivity-agent",
        "pod-template-hash": "5fc7ff9689"
      },
      "ownerReferences": [
        {
          "apiVersion": "apps/v1",
          "kind": "ReplicaSet",
          "name": "konnectivity-agent-5fc7ff9689",
          "uid": "547d502a-2c96-4167-b577-b3db85f68d58",
          "controller": true,
          "blockOwnerDeletion": true
        }
      ]
    },
    "checks": [
      {
        "check": {
          "name": "Stable version",
          "id": "stable-version",
          "target_type": "all",
          "comment": "Checks if the object is using a deprecated apiVersion",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Label values",
          "id": "label-values",
          "target_type": "all",
          "comment": "Validates label values",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Stable version",
          "id": "stable-version",
          "target_type": "all",
          "comment": "Checks if the object is using a deprecated apiVersion",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Label values",
          "id": "label-values",
          "target_type": "all",
          "comment": "Validates label values",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Container Ports Check",
          "id": "container-ports-check",
          "target_type": "Pod",
          "comment": "Container Ports Checks",
          "optional": true
        },
        "grade": 10,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-ports-check is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Memory Requests Equal Limits",
          "id": "container-memory-requests-equal-limits",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have the same memory requests as limits set.",
          "optional": true
        },
        "grade": 1,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-memory-requests-equal-limits is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Ephemeral Storage Request and Limit",
          "id": "container-ephemeral-storage-request-and-limit",
          "target_type": "Pod",
          "comment": "Makes sure all pods have ephemeral-storage requests and limits set",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "konnectivity-agent",
            "summary": "Ephemeral Storage limit is not set",
            "description": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage"
          }
        ]
      },
      {
        "check": {
          "name": "Container Ephemeral Storage Request Equals Limit",
          "id": "container-ephemeral-storage-request-equals-limit",
          "target_type": "Pod",
          "comment": "Make sure all pods have matching ephemeral-storage requests and limits",
          "optional": true
        },
        "grade": 10,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-ephemeral-storage-request-equals-limit is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Pod NetworkPolicy",
          "id": "pod-networkpolicy",
          "target_type": "Pod",
          "comment": "Makes sure that all Pods are targeted by a NetworkPolicy",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "",
            "summary": "The pod does not have a matching NetworkPolicy",
            "description": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect."
          }
        ]
      },
      {
        "check": {
          "name": "Pod Probes",
          "id": "pod-probes",
          "target_type": "Pod",
          "comment": "Makes sure that all Pods have safe probe configurations",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": [
          {
            "path": "",
            "summary": "The pod is not targeted by a service, skipping probe checks.",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Security Context ReadOnlyRootFilesystem",
          "id": "container-security-context-readonlyrootfilesystem",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have a security context with read only filesystem set",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "konnectivity-agent",
            "summary": "The pod has a container with a writable root filesystem",
            "description": "Set securityContext.readOnlyRootFilesystem to true"
          }
        ]
      },
      {
        "check": {
          "name": "Container Seccomp Profile",
          "id": "container-seccomp-profile",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have at a seccomp policy configured.",
          "optional": true
        },
        "grade": 5,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-seccomp-profile is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Resource Requests Equal Limits",
          "id": "container-resource-requests-equal-limits",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have the same requests as limits on resources set.",
          "optional": true
        },
        "grade": 1,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-resource-requests-equal-limits is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Security Context User Group ID",
          "id": "container-security-context-user-group-id",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have a security context with valid UID and GID set ",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "konnectivity-agent",
            "summary": "The container is running with a low user ID",
            "description": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value \u003e 10000"
          },
          {
            "path": "konnectivity-agent",
            "summary": "The container running with a low group ID",
            "description": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value \u003e 10000"
          }
        ]
      },
      {
        "check": {
          "name": "Container Image Tag",
          "id": "container-image-tag",
          "target_type": "Pod",
          "comment": "Makes sure that a explicit non-latest tag is used",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Container CPU Requests Equal Limits",
          "id": "container-cpu-requests-equal-limits",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have the same CPU requests as limits set.",
          "optional": true
        },
        "grade": 1,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-cpu-requests-equal-limits is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Image Pull Policy",
          "id": "container-image-pull-policy",
          "target_type": "Pod",
          "comment": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "konnectivity-agent",
            "summary": "ImagePullPolicy is not set to Always",
            "description": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want."
          }
        ]
      },
      {
        "check": {
          "name": "Environment Variable Key Duplication",
          "id": "environment-variable-key-duplication",
          "target_type": "Pod",
          "comment": "Makes sure that duplicated environment variable keys are not duplicated",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Container Security Context Privileged",
          "id": "container-security-context-privileged",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have a unprivileged security context set",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Container Resources",
          "id": "container-resources",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "konnectivity-agent",
            "summary": "CPU limit is not set",
            "description": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu"
          }
        ]
      },
      {
        "check": {
          "name": "Container Ports Check",
          "id": "container-ports-check",
          "target_type": "Pod",
          "comment": "Container Ports Checks",
          "optional": true
        },
        "grade": 10,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-ports-check is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Seccomp Profile",
          "id": "container-seccomp-profile",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have at a seccomp policy configured.",
          "optional": true
        },
        "grade": 5,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-seccomp-profile is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Resource Requests Equal Limits",
          "id": "container-resource-requests-equal-limits",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have the same requests as limits on resources set.",
          "optional": true
        },
        "grade": 1,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-resource-requests-equal-limits is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Memory Requests Equal Limits",
          "id": "container-memory-requests-equal-limits",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have the same memory requests as limits set.",
          "optional": true
        },
        "grade": 1,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-memory-requests-equal-limits is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Ephemeral Storage Request and Limit",
          "id": "container-ephemeral-storage-request-and-limit",
          "target_type": "Pod",
          "comment": "Makes sure all pods have ephemeral-storage requests and limits set",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "konnectivity-agent",
            "summary": "Ephemeral Storage limit is not set",
            "description": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage"
          }
        ]
      },
      {
        "check": {
          "name": "Container Ephemeral Storage Request Equals Limit",
          "id": "container-ephemeral-storage-request-equals-limit",
          "target_type": "Pod",
          "comment": "Make sure all pods have matching ephemeral-storage requests and limits",
          "optional": true
        },
        "grade": 10,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-ephemeral-storage-request-equals-limit is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Pod NetworkPolicy",
          "id": "pod-networkpolicy",
          "target_type": "Pod",
          "comment": "Makes sure that all Pods are targeted by a NetworkPolicy",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "",
            "summary": "The pod does not have a matching NetworkPolicy",
            "description": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect."
          }
        ]
      },
      {
        "check": {
          "name": "Pod Probes",
          "id": "pod-probes",
          "target_type": "Pod",
          "comment": "Makes sure that all Pods have safe probe configurations",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": [
          {
            "path": "",
            "summary": "The pod is not targeted by a service, skipping probe checks.",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Security Context ReadOnlyRootFilesystem",
          "id": "container-security-context-readonlyrootfilesystem",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have a security context with read only filesystem set",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "konnectivity-agent",
            "summary": "The pod has a container with a writable root filesystem",
            "description": "Set securityContext.readOnlyRootFilesystem to true"
          }
        ]
      },
      {
        "check": {
          "name": "Container Image Tag",
          "id": "container-image-tag",
          "target_type": "Pod",
          "comment": "Makes sure that a explicit non-latest tag is used",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Container Security Context User Group ID",
          "id": "container-security-context-user-group-id",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have a security context with valid UID and GID set ",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "konnectivity-agent",
            "summary": "The container is running with a low user ID",
            "description": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value \u003e 10000"
          },
          {
            "path": "konnectivity-agent",
            "summary": "The container running with a low group ID",
            "description": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value \u003e 10000"
          }
        ]
      },
      {
        "check": {
          "name": "Container Resources",
          "id": "container-resources",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "konnectivity-agent",
            "summary": "CPU limit is not set",
            "description": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu"
          }
        ]
      },
      {
        "check": {
          "name": "Container CPU Requests Equal Limits",
          "id": "container-cpu-requests-equal-limits",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have the same CPU requests as limits set.",
          "optional": true
        },
        "grade": 1,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-cpu-requests-equal-limits is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Image Pull Policy",
          "id": "container-image-pull-policy",
          "target_type": "Pod",
          "comment": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "konnectivity-agent",
            "summary": "ImagePullPolicy is not set to Always",
            "description": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want."
          }
        ]
      },
      {
        "check": {
          "name": "Environment Variable Key Duplication",
          "id": "environment-variable-key-duplication",
          "target_type": "Pod",
          "comment": "Makes sure that duplicated environment variable keys are not duplicated",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Container Security Context Privileged",
          "id": "container-security-context-privileged",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have a unprivileged security context set",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      }
    ],
    "file_name": "/tmp/kube-security-scanner/yaml/ALL/ALL.yaml",
    "file_row": 18854
  },
  {
    "object_name": "Service/v1/kube-system/antrea",
    "type_meta": {
      "kind": "Service",
      "apiVersion": "v1"
    },
    "object_meta": {
      "name": "antrea",
      "namespace": "kube-system",
      "resourceVersion": "894",
      "creationTimestamp": null,
      "labels": {
        "addonmanager.kubernetes.io/mode": "Reconcile",
        "app": "antrea"
      }
    },
    "checks": [
      {
        "check": {
          "name": "Stable version",
          "id": "stable-version",
          "target_type": "all",
          "comment": "Checks if the object is using a deprecated apiVersion",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Label values",
          "id": "label-values",
          "target_type": "all",
          "comment": "Validates label values",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Service Targets Pod",
          "id": "service-targets-pod",
          "target_type": "Service",
          "comment": "Makes sure that all Services targets a Pod",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "",
            "summary": "The services selector does not match any pods",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Service Type",
          "id": "service-type",
          "target_type": "Service",
          "comment": "Makes sure that the Service type is not NodePort",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      }
    ],
    "file_name": "/tmp/kube-security-scanner/yaml/ALL/ALL.yaml",
    "file_row": 14879
  },
  {
    "object_name": "Pod/v1/gmp-system/collector-tnzrw",
    "type_meta": {
      "kind": "Pod",
      "apiVersion": "v1"
    },
    "object_meta": {
      "name": "collector-tnzrw",
      "generateName": "collector-",
      "namespace": "gmp-system",
      "resourceVersion": "2187",
      "creationTimestamp": null,
      "labels": {
        "app": "managed-prometheus-collector",
        "app.kubernetes.io/name": "collector",
        "app.kubernetes.io/version": "0.7.4",
        "controller-revision-hash": "6ddf68f764",
        "pod-template-generation": "2"
      },
      "ownerReferences": [
        {
          "apiVersion": "apps/v1",
          "kind": "DaemonSet",
          "name": "collector",
          "uid": "7bb9d8a7-3d77-4248-b9ad-f27c7d99296d",
          "controller": true,
          "blockOwnerDeletion": true
        }
      ]
    },
    "checks": [
      {
        "check": {
          "name": "Label values",
          "id": "label-values",
          "target_type": "all",
          "comment": "Validates label values",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Stable version",
          "id": "stable-version",
          "target_type": "all",
          "comment": "Checks if the object is using a deprecated apiVersion",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Stable version",
          "id": "stable-version",
          "target_type": "all",
          "comment": "Checks if the object is using a deprecated apiVersion",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Label values",
          "id": "label-values",
          "target_type": "all",
          "comment": "Validates label values",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Container Ephemeral Storage Request Equals Limit",
          "id": "container-ephemeral-storage-request-equals-limit",
          "target_type": "Pod",
          "comment": "Make sure all pods have matching ephemeral-storage requests and limits",
          "optional": true
        },
        "grade": 10,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-ephemeral-storage-request-equals-limit is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Pod NetworkPolicy",
          "id": "pod-networkpolicy",
          "target_type": "Pod",
          "comment": "Makes sure that all Pods are targeted by a NetworkPolicy",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "",
            "summary": "The pod does not have a matching NetworkPolicy",
            "description": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect."
          }
        ]
      },
      {
        "check": {
          "name": "Pod Probes",
          "id": "pod-probes",
          "target_type": "Pod",
          "comment": "Makes sure that all Pods have safe probe configurations",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": [
          {
            "path": "",
            "summary": "The pod is not targeted by a service, skipping probe checks.",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Security Context ReadOnlyRootFilesystem",
          "id": "container-security-context-readonlyrootfilesystem",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have a security context with read only filesystem set",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "config-init",
            "summary": "The pod has a container with a writable root filesystem",
            "description": "Set securityContext.readOnlyRootFilesystem to true"
          },
          {
            "path": "prometheus",
            "summary": "The pod has a container with a writable root filesystem",
            "description": "Set securityContext.readOnlyRootFilesystem to true"
          },
          {
            "path": "config-reloader",
            "summary": "The pod has a container with a writable root filesystem",
            "description": "Set securityContext.readOnlyRootFilesystem to true"
          }
        ]
      },
      {
        "check": {
          "name": "Container Seccomp Profile",
          "id": "container-seccomp-profile",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have at a seccomp policy configured.",
          "optional": true
        },
        "grade": 5,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-seccomp-profile is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Resource Requests Equal Limits",
          "id": "container-resource-requests-equal-limits",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have the same requests as limits on resources set.",
          "optional": true
        },
        "grade": 1,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-resource-requests-equal-limits is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Memory Requests Equal Limits",
          "id": "container-memory-requests-equal-limits",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have the same memory requests as limits set.",
          "optional": true
        },
        "grade": 1,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-memory-requests-equal-limits is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Ephemeral Storage Request and Limit",
          "id": "container-ephemeral-storage-request-and-limit",
          "target_type": "Pod",
          "comment": "Makes sure all pods have ephemeral-storage requests and limits set",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "config-init",
            "summary": "Ephemeral Storage limit is not set",
            "description": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage"
          },
          {
            "path": "prometheus",
            "summary": "Ephemeral Storage limit is not set",
            "description": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage"
          },
          {
            "path": "config-reloader",
            "summary": "Ephemeral Storage limit is not set",
            "description": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage"
          }
        ]
      },
      {
        "check": {
          "name": "Container Image Tag",
          "id": "container-image-tag",
          "target_type": "Pod",
          "comment": "Makes sure that a explicit non-latest tag is used",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Container Security Context User Group ID",
          "id": "container-security-context-user-group-id",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have a security context with valid UID and GID set ",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "config-init",
            "summary": "The container is running with a low user ID",
            "description": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value \u003e 10000"
          },
          {
            "path": "config-init",
            "summary": "The container running with a low group ID",
            "description": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value \u003e 10000"
          },
          {
            "path": "prometheus",
            "summary": "The container is running with a low user ID",
            "description": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value \u003e 10000"
          },
          {
            "path": "prometheus",
            "summary": "The container running with a low group ID",
            "description": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value \u003e 10000"
          },
          {
            "path": "config-reloader",
            "summary": "The container is running with a low user ID",
            "description": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value \u003e 10000"
          },
          {
            "path": "config-reloader",
            "summary": "The container running with a low group ID",
            "description": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value \u003e 10000"
          }
        ]
      },
      {
        "check": {
          "name": "Environment Variable Key Duplication",
          "id": "environment-variable-key-duplication",
          "target_type": "Pod",
          "comment": "Makes sure that duplicated environment variable keys are not duplicated",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Container Security Context Privileged",
          "id": "container-security-context-privileged",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have a unprivileged security context set",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Container Resources",
          "id": "container-resources",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "config-init",
            "summary": "CPU limit is not set",
            "description": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu"
          },
          {
            "path": "config-init",
            "summary": "Memory limit is not set",
            "description": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.memory"
          },
          {
            "path": "config-init",
            "summary": "CPU request is not set",
            "description": "Resource requests are recommended to make sure that the application can start and run without crashing. Set resources.requests.cpu"
          },
          {
            "path": "config-init",
            "summary": "Memory request is not set",
            "description": "Resource requests are recommended to make sure that the application can start and run without crashing. Set resources.requests.memory"
          },
          {
            "path": "prometheus",
            "summary": "CPU limit is not set",
            "description": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu"
          },
          {
            "path": "config-reloader",
            "summary": "CPU limit is not set",
            "description": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu"
          }
        ]
      },
      {
        "check": {
          "name": "Container CPU Requests Equal Limits",
          "id": "container-cpu-requests-equal-limits",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have the same CPU requests as limits set.",
          "optional": true
        },
        "grade": 1,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-cpu-requests-equal-limits is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Image Pull Policy",
          "id": "container-image-pull-policy",
          "target_type": "Pod",
          "comment": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "config-init",
            "summary": "ImagePullPolicy is not set to Always",
            "description": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want."
          },
          {
            "path": "prometheus",
            "summary": "ImagePullPolicy is not set to Always",
            "description": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want."
          },
          {
            "path": "config-reloader",
            "summary": "ImagePullPolicy is not set to Always",
            "description": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want."
          }
        ]
      },
      {
        "check": {
          "name": "Container Ports Check",
          "id": "container-ports-check",
          "target_type": "Pod",
          "comment": "Container Ports Checks",
          "optional": true
        },
        "grade": 10,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-ports-check is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Pod NetworkPolicy",
          "id": "pod-networkpolicy",
          "target_type": "Pod",
          "comment": "Makes sure that all Pods are targeted by a NetworkPolicy",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "",
            "summary": "The pod does not have a matching NetworkPolicy",
            "description": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect."
          }
        ]
      },
      {
        "check": {
          "name": "Pod Probes",
          "id": "pod-probes",
          "target_type": "Pod",
          "comment": "Makes sure that all Pods have safe probe configurations",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": [
          {
            "path": "",
            "summary": "The pod is not targeted by a service, skipping probe checks.",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Security Context ReadOnlyRootFilesystem",
          "id": "container-security-context-readonlyrootfilesystem",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have a security context with read only filesystem set",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "config-init",
            "summary": "The pod has a container with a writable root filesystem",
            "description": "Set securityContext.readOnlyRootFilesystem to true"
          },
          {
            "path": "prometheus",
            "summary": "The pod has a container with a writable root filesystem",
            "description": "Set securityContext.readOnlyRootFilesystem to true"
          },
          {
            "path": "config-reloader",
            "summary": "The pod has a container with a writable root filesystem",
            "description": "Set securityContext.readOnlyRootFilesystem to true"
          }
        ]
      },
      {
        "check": {
          "name": "Container Seccomp Profile",
          "id": "container-seccomp-profile",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have at a seccomp policy configured.",
          "optional": true
        },
        "grade": 5,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-seccomp-profile is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Resource Requests Equal Limits",
          "id": "container-resource-requests-equal-limits",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have the same requests as limits on resources set.",
          "optional": true
        },
        "grade": 1,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-resource-requests-equal-limits is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Memory Requests Equal Limits",
          "id": "container-memory-requests-equal-limits",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have the same memory requests as limits set.",
          "optional": true
        },
        "grade": 1,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-memory-requests-equal-limits is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Ephemeral Storage Request and Limit",
          "id": "container-ephemeral-storage-request-and-limit",
          "target_type": "Pod",
          "comment": "Makes sure all pods have ephemeral-storage requests and limits set",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "config-init",
            "summary": "Ephemeral Storage limit is not set",
            "description": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage"
          },
          {
            "path": "prometheus",
            "summary": "Ephemeral Storage limit is not set",
            "description": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage"
          },
          {
            "path": "config-reloader",
            "summary": "Ephemeral Storage limit is not set",
            "description": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage"
          }
        ]
      },
      {
        "check": {
          "name": "Container Ephemeral Storage Request Equals Limit",
          "id": "container-ephemeral-storage-request-equals-limit",
          "target_type": "Pod",
          "comment": "Make sure all pods have matching ephemeral-storage requests and limits",
          "optional": true
        },
        "grade": 10,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-ephemeral-storage-request-equals-limit is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Image Tag",
          "id": "container-image-tag",
          "target_type": "Pod",
          "comment": "Makes sure that a explicit non-latest tag is used",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Container Security Context User Group ID",
          "id": "container-security-context-user-group-id",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have a security context with valid UID and GID set ",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "config-init",
            "summary": "The container is running with a low user ID",
            "description": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value \u003e 10000"
          },
          {
            "path": "config-init",
            "summary": "The container running with a low group ID",
            "description": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value \u003e 10000"
          },
          {
            "path": "prometheus",
            "summary": "The container is running with a low user ID",
            "description": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value \u003e 10000"
          },
          {
            "path": "prometheus",
            "summary": "The container running with a low group ID",
            "description": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value \u003e 10000"
          },
          {
            "path": "config-reloader",
            "summary": "The container is running with a low user ID",
            "description": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value \u003e 10000"
          },
          {
            "path": "config-reloader",
            "summary": "The container running with a low group ID",
            "description": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value \u003e 10000"
          }
        ]
      },
      {
        "check": {
          "name": "Container Security Context Privileged",
          "id": "container-security-context-privileged",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have a unprivileged security context set",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Container Resources",
          "id": "container-resources",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "config-init",
            "summary": "CPU limit is not set",
            "description": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu"
          },
          {
            "path": "config-init",
            "summary": "Memory limit is not set",
            "description": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.memory"
          },
          {
            "path": "config-init",
            "summary": "CPU request is not set",
            "description": "Resource requests are recommended to make sure that the application can start and run without crashing. Set resources.requests.cpu"
          },
          {
            "path": "config-init",
            "summary": "Memory request is not set",
            "description": "Resource requests are recommended to make sure that the application can start and run without crashing. Set resources.requests.memory"
          },
          {
            "path": "prometheus",
            "summary": "CPU limit is not set",
            "description": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu"
          },
          {
            "path": "config-reloader",
            "summary": "CPU limit is not set",
            "description": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu"
          }
        ]
      },
      {
        "check": {
          "name": "Container CPU Requests Equal Limits",
          "id": "container-cpu-requests-equal-limits",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have the same CPU requests as limits set.",
          "optional": true
        },
        "grade": 1,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-cpu-requests-equal-limits is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Image Pull Policy",
          "id": "container-image-pull-policy",
          "target_type": "Pod",
          "comment": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "config-init",
            "summary": "ImagePullPolicy is not set to Always",
            "description": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want."
          },
          {
            "path": "prometheus",
            "summary": "ImagePullPolicy is not set to Always",
            "description": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want."
          },
          {
            "path": "config-reloader",
            "summary": "ImagePullPolicy is not set to Always",
            "description": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want."
          }
        ]
      },
      {
        "check": {
          "name": "Environment Variable Key Duplication",
          "id": "environment-variable-key-duplication",
          "target_type": "Pod",
          "comment": "Makes sure that duplicated environment variable keys are not duplicated",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Container Ports Check",
          "id": "container-ports-check",
          "target_type": "Pod",
          "comment": "Container Ports Checks",
          "optional": true
        },
        "grade": 10,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-ports-check is ignored",
            "description": ""
          }
        ]
      }
    ],
    "file_name": "/tmp/kube-security-scanner/yaml/ALL/ALL.yaml",
    "file_row": 2725
  },
  {
    "object_name": "Pod/v1/gmp-system/gmp-operator-7f99f58f48-cx7cp",
    "type_meta": {
      "kind": "Pod",
      "apiVersion": "v1"
    },
    "object_meta": {
      "name": "gmp-operator-7f99f58f48-cx7cp",
      "generateName": "gmp-operator-7f99f58f48-",
      "namespace": "gmp-system",
      "resourceVersion": "1908",
      "creationTimestamp": null,
      "labels": {
        "app": "managed-prometheus-operator",
        "app.kubernetes.io/component": "operator",
        "app.kubernetes.io/name": "gmp-operator",
        "app.kubernetes.io/part-of": "gmp",
        "app.kubernetes.io/version": "0.7.4",
        "pod-template-hash": "7f99f58f48"
      },
      "ownerReferences": [
        {
          "apiVersion": "apps/v1",
          "kind": "ReplicaSet",
          "name": "gmp-operator-7f99f58f48",
          "uid": "1c2d5184-8933-4aeb-a6e0-e4485b1005ce",
          "controller": true,
          "blockOwnerDeletion": true
        }
      ]
    },
    "checks": [
      {
        "check": {
          "name": "Stable version",
          "id": "stable-version",
          "target_type": "all",
          "comment": "Checks if the object is using a deprecated apiVersion",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Label values",
          "id": "label-values",
          "target_type": "all",
          "comment": "Validates label values",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Stable version",
          "id": "stable-version",
          "target_type": "all",
          "comment": "Checks if the object is using a deprecated apiVersion",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Label values",
          "id": "label-values",
          "target_type": "all",
          "comment": "Validates label values",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Pod Probes",
          "id": "pod-probes",
          "target_type": "Pod",
          "comment": "Makes sure that all Pods have safe probe configurations",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "",
            "summary": "Container is missing a readinessProbe",
            "description": "A readinessProbe should be used to indicate when the service is ready to receive traffic. Without it, the Pod is risking to receive traffic before it has booted. It's also used during rollouts, and can prevent downtime if a new version of the application is failing."
          }
        ]
      },
      {
        "check": {
          "name": "Container Security Context ReadOnlyRootFilesystem",
          "id": "container-security-context-readonlyrootfilesystem",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have a security context with read only filesystem set",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "operator",
            "summary": "The pod has a container with a writable root filesystem",
            "description": "Set securityContext.readOnlyRootFilesystem to true"
          }
        ]
      },
      {
        "check": {
          "name": "Container Seccomp Profile",
          "id": "container-seccomp-profile",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have at a seccomp policy configured.",
          "optional": true
        },
        "grade": 5,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-seccomp-profile is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Resource Requests Equal Limits",
          "id": "container-resource-requests-equal-limits",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have the same requests as limits on resources set.",
          "optional": true
        },
        "grade": 1,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-resource-requests-equal-limits is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Memory Requests Equal Limits",
          "id": "container-memory-requests-equal-limits",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have the same memory requests as limits set.",
          "optional": true
        },
        "grade": 1,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-memory-requests-equal-limits is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Ephemeral Storage Request and Limit",
          "id": "container-ephemeral-storage-request-and-limit",
          "target_type": "Pod",
          "comment": "Makes sure all pods have ephemeral-storage requests and limits set",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "operator",
            "summary": "Ephemeral Storage limit is not set",
            "description": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage"
          }
        ]
      },
      {
        "check": {
          "name": "Container Ephemeral Storage Request Equals Limit",
          "id": "container-ephemeral-storage-request-equals-limit",
          "target_type": "Pod",
          "comment": "Make sure all pods have matching ephemeral-storage requests and limits",
          "optional": true
        },
        "grade": 10,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-ephemeral-storage-request-equals-limit is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Pod NetworkPolicy",
          "id": "pod-networkpolicy",
          "target_type": "Pod",
          "comment": "Makes sure that all Pods are targeted by a NetworkPolicy",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "",
            "summary": "The pod does not have a matching NetworkPolicy",
            "description": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect."
          }
        ]
      },
      {
        "check": {
          "name": "Container Image Tag",
          "id": "container-image-tag",
          "target_type": "Pod",
          "comment": "Makes sure that a explicit non-latest tag is used",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Container Security Context User Group ID",
          "id": "container-security-context-user-group-id",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have a security context with valid UID and GID set ",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "operator",
            "summary": "The container is running with a low user ID",
            "description": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value \u003e 10000"
          },
          {
            "path": "operator",
            "summary": "The container running with a low group ID",
            "description": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value \u003e 10000"
          }
        ]
      },
      {
        "check": {
          "name": "Container Resources",
          "id": "container-resources",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "operator",
            "summary": "CPU limit is not set",
            "description": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu"
          }
        ]
      },
      {
        "check": {
          "name": "Container CPU Requests Equal Limits",
          "id": "container-cpu-requests-equal-limits",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have the same CPU requests as limits set.",
          "optional": true
        },
        "grade": 1,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-cpu-requests-equal-limits is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Image Pull Policy",
          "id": "container-image-pull-policy",
          "target_type": "Pod",
          "comment": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "operator",
            "summary": "ImagePullPolicy is not set to Always",
            "description": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want."
          }
        ]
      },
      {
        "check": {
          "name": "Environment Variable Key Duplication",
          "id": "environment-variable-key-duplication",
          "target_type": "Pod",
          "comment": "Makes sure that duplicated environment variable keys are not duplicated",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Container Security Context Privileged",
          "id": "container-security-context-privileged",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have a unprivileged security context set",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Container Ports Check",
          "id": "container-ports-check",
          "target_type": "Pod",
          "comment": "Container Ports Checks",
          "optional": true
        },
        "grade": 10,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-ports-check is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Security Context ReadOnlyRootFilesystem",
          "id": "container-security-context-readonlyrootfilesystem",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have a security context with read only filesystem set",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "operator",
            "summary": "The pod has a container with a writable root filesystem",
            "description": "Set securityContext.readOnlyRootFilesystem to true"
          }
        ]
      },
      {
        "check": {
          "name": "Container Seccomp Profile",
          "id": "container-seccomp-profile",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have at a seccomp policy configured.",
          "optional": true
        },
        "grade": 5,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-seccomp-profile is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Resource Requests Equal Limits",
          "id": "container-resource-requests-equal-limits",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have the same requests as limits on resources set.",
          "optional": true
        },
        "grade": 1,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-resource-requests-equal-limits is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Memory Requests Equal Limits",
          "id": "container-memory-requests-equal-limits",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have the same memory requests as limits set.",
          "optional": true
        },
        "grade": 1,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-memory-requests-equal-limits is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Ephemeral Storage Request and Limit",
          "id": "container-ephemeral-storage-request-and-limit",
          "target_type": "Pod",
          "comment": "Makes sure all pods have ephemeral-storage requests and limits set",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "operator",
            "summary": "Ephemeral Storage limit is not set",
            "description": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage"
          }
        ]
      },
      {
        "check": {
          "name": "Container Ephemeral Storage Request Equals Limit",
          "id": "container-ephemeral-storage-request-equals-limit",
          "target_type": "Pod",
          "comment": "Make sure all pods have matching ephemeral-storage requests and limits",
          "optional": true
        },
        "grade": 10,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-ephemeral-storage-request-equals-limit is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Pod NetworkPolicy",
          "id": "pod-networkpolicy",
          "target_type": "Pod",
          "comment": "Makes sure that all Pods are targeted by a NetworkPolicy",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "",
            "summary": "The pod does not have a matching NetworkPolicy",
            "description": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect."
          }
        ]
      },
      {
        "check": {
          "name": "Pod Probes",
          "id": "pod-probes",
          "target_type": "Pod",
          "comment": "Makes sure that all Pods have safe probe configurations",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "",
            "summary": "Container is missing a readinessProbe",
            "description": "A readinessProbe should be used to indicate when the service is ready to receive traffic. Without it, the Pod is risking to receive traffic before it has booted. It's also used during rollouts, and can prevent downtime if a new version of the application is failing."
          }
        ]
      },
      {
        "check": {
          "name": "Container Image Tag",
          "id": "container-image-tag",
          "target_type": "Pod",
          "comment": "Makes sure that a explicit non-latest tag is used",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Container Security Context User Group ID",
          "id": "container-security-context-user-group-id",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have a security context with valid UID and GID set ",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "operator",
            "summary": "The container is running with a low user ID",
            "description": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value \u003e 10000"
          },
          {
            "path": "operator",
            "summary": "The container running with a low group ID",
            "description": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value \u003e 10000"
          }
        ]
      },
      {
        "check": {
          "name": "Container Resources",
          "id": "container-resources",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "operator",
            "summary": "CPU limit is not set",
            "description": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu"
          }
        ]
      },
      {
        "check": {
          "name": "Container CPU Requests Equal Limits",
          "id": "container-cpu-requests-equal-limits",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have the same CPU requests as limits set.",
          "optional": true
        },
        "grade": 1,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-cpu-requests-equal-limits is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Image Pull Policy",
          "id": "container-image-pull-policy",
          "target_type": "Pod",
          "comment": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "operator",
            "summary": "ImagePullPolicy is not set to Always",
            "description": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want."
          }
        ]
      },
      {
        "check": {
          "name": "Environment Variable Key Duplication",
          "id": "environment-variable-key-duplication",
          "target_type": "Pod",
          "comment": "Makes sure that duplicated environment variable keys are not duplicated",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Container Security Context Privileged",
          "id": "container-security-context-privileged",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have a unprivileged security context set",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Container Ports Check",
          "id": "container-ports-check",
          "target_type": "Pod",
          "comment": "Container Ports Checks",
          "optional": true
        },
        "grade": 10,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-ports-check is ignored",
            "description": ""
          }
        ]
      }
    ],
    "file_name": "/tmp/kube-security-scanner/yaml/ALL/ALL.yaml",
    "file_row": 2967
  },
  {
    "object_name": "Service/v1/gmp-system/alertmanager",
    "type_meta": {
      "kind": "Service",
      "apiVersion": "v1"
    },
    "object_meta": {
      "name": "alertmanager",
      "namespace": "gmp-system",
      "resourceVersion": "767",
      "creationTimestamp": null,
      "labels": {
        "addonmanager.kubernetes.io/mode": "Reconcile"
      }
    },
    "checks": [
      {
        "check": {
          "name": "Label values",
          "id": "label-values",
          "target_type": "all",
          "comment": "Validates label values",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Stable version",
          "id": "stable-version",
          "target_type": "all",
          "comment": "Checks if the object is using a deprecated apiVersion",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Service Targets Pod",
          "id": "service-targets-pod",
          "target_type": "Service",
          "comment": "Makes sure that all Services targets a Pod",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Service Type",
          "id": "service-type",
          "target_type": "Service",
          "comment": "Makes sure that the Service type is not NodePort",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      }
    ],
    "file_name": "/tmp/kube-security-scanner/yaml/ALL/ALL.yaml",
    "file_row": 2231
  },
  {
    "object_name": "Pod/v1/kube-system/event-exporter-gke-7bf6c99dcb-4mm68",
    "type_meta": {
      "kind": "Pod",
      "apiVersion": "v1"
    },
    "object_meta": {
      "name": "event-exporter-gke-7bf6c99dcb-4mm68",
      "generateName": "event-exporter-gke-7bf6c99dcb-",
      "namespace": "kube-system",
      "resourceVersion": "1959",
      "creationTimestamp": null,
      "labels": {
        "k8s-app": "event-exporter",
        "pod-template-hash": "7bf6c99dcb",
        "version": "v0.4.0"
      },
      "ownerReferences": [
        {
          "apiVersion": "apps/v1",
          "kind": "ReplicaSet",
          "name": "event-exporter-gke-7bf6c99dcb",
          "uid": "fd0e08d4-330b-4ecd-9868-b57407428b2c",
          "controller": true,
          "blockOwnerDeletion": true
        }
      ]
    },
    "checks": [
      {
        "check": {
          "name": "Stable version",
          "id": "stable-version",
          "target_type": "all",
          "comment": "Checks if the object is using a deprecated apiVersion",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Label values",
          "id": "label-values",
          "target_type": "all",
          "comment": "Validates label values",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Stable version",
          "id": "stable-version",
          "target_type": "all",
          "comment": "Checks if the object is using a deprecated apiVersion",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Label values",
          "id": "label-values",
          "target_type": "all",
          "comment": "Validates label values",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Container Ports Check",
          "id": "container-ports-check",
          "target_type": "Pod",
          "comment": "Container Ports Checks",
          "optional": true
        },
        "grade": 10,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-ports-check is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Pod NetworkPolicy",
          "id": "pod-networkpolicy",
          "target_type": "Pod",
          "comment": "Makes sure that all Pods are targeted by a NetworkPolicy",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "",
            "summary": "The pod does not have a matching NetworkPolicy",
            "description": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect."
          }
        ]
      },
      {
        "check": {
          "name": "Pod Probes",
          "id": "pod-probes",
          "target_type": "Pod",
          "comment": "Makes sure that all Pods have safe probe configurations",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": [
          {
            "path": "",
            "summary": "The pod is not targeted by a service, skipping probe checks.",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Security Context ReadOnlyRootFilesystem",
          "id": "container-security-context-readonlyrootfilesystem",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have a security context with read only filesystem set",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "event-exporter",
            "summary": "The pod has a container with a writable root filesystem",
            "description": "Set securityContext.readOnlyRootFilesystem to true"
          },
          {
            "path": "prometheus-to-sd-exporter",
            "summary": "The pod has a container with a writable root filesystem",
            "description": "Set securityContext.readOnlyRootFilesystem to true"
          }
        ]
      },
      {
        "check": {
          "name": "Container Seccomp Profile",
          "id": "container-seccomp-profile",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have at a seccomp policy configured.",
          "optional": true
        },
        "grade": 5,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-seccomp-profile is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Resource Requests Equal Limits",
          "id": "container-resource-requests-equal-limits",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have the same requests as limits on resources set.",
          "optional": true
        },
        "grade": 1,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-resource-requests-equal-limits is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Memory Requests Equal Limits",
          "id": "container-memory-requests-equal-limits",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have the same memory requests as limits set.",
          "optional": true
        },
        "grade": 1,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-memory-requests-equal-limits is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Ephemeral Storage Request and Limit",
          "id": "container-ephemeral-storage-request-and-limit",
          "target_type": "Pod",
          "comment": "Makes sure all pods have ephemeral-storage requests and limits set",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "event-exporter",
            "summary": "Ephemeral Storage limit is not set",
            "description": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage"
          },
          {
            "path": "prometheus-to-sd-exporter",
            "summary": "Ephemeral Storage limit is not set",
            "description": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage"
          }
        ]
      },
      {
        "check": {
          "name": "Container Ephemeral Storage Request Equals Limit",
          "id": "container-ephemeral-storage-request-equals-limit",
          "target_type": "Pod",
          "comment": "Make sure all pods have matching ephemeral-storage requests and limits",
          "optional": true
        },
        "grade": 10,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-ephemeral-storage-request-equals-limit is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Image Tag",
          "id": "container-image-tag",
          "target_type": "Pod",
          "comment": "Makes sure that a explicit non-latest tag is used",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Container Security Context User Group ID",
          "id": "container-security-context-user-group-id",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have a security context with valid UID and GID set ",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "event-exporter",
            "summary": "The container is running with a low user ID",
            "description": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value \u003e 10000"
          },
          {
            "path": "event-exporter",
            "summary": "The container running with a low group ID",
            "description": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value \u003e 10000"
          },
          {
            "path": "prometheus-to-sd-exporter",
            "summary": "The container is running with a low user ID",
            "description": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value \u003e 10000"
          },
          {
            "path": "prometheus-to-sd-exporter",
            "summary": "The container running with a low group ID",
            "description": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value \u003e 10000"
          }
        ]
      },
      {
        "check": {
          "name": "Container Security Context Privileged",
          "id": "container-security-context-privileged",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have a unprivileged security context set",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Container Resources",
          "id": "container-resources",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "event-exporter",
            "summary": "CPU limit is not set",
            "description": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu"
          },
          {
            "path": "event-exporter",
            "summary": "Memory limit is not set",
            "description": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.memory"
          },
          {
            "path": "prometheus-to-sd-exporter",
            "summary": "CPU limit is not set",
            "description": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu"
          },
          {
            "path": "prometheus-to-sd-exporter",
            "summary": "Memory limit is not set",
            "description": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.memory"
          },
          {
            "path": "prometheus-to-sd-exporter",
            "summary": "CPU request is not set",
            "description": "Resource requests are recommended to make sure that the application can start and run without crashing. Set resources.requests.cpu"
          },
          {
            "path": "prometheus-to-sd-exporter",
            "summary": "Memory request is not set",
            "description": "Resource requests are recommended to make sure that the application can start and run without crashing. Set resources.requests.memory"
          }
        ]
      },
      {
        "check": {
          "name": "Container CPU Requests Equal Limits",
          "id": "container-cpu-requests-equal-limits",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have the same CPU requests as limits set.",
          "optional": true
        },
        "grade": 1,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-cpu-requests-equal-limits is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Image Pull Policy",
          "id": "container-image-pull-policy",
          "target_type": "Pod",
          "comment": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "event-exporter",
            "summary": "ImagePullPolicy is not set to Always",
            "description": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want."
          },
          {
            "path": "prometheus-to-sd-exporter",
            "summary": "ImagePullPolicy is not set to Always",
            "description": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want."
          }
        ]
      },
      {
        "check": {
          "name": "Environment Variable Key Duplication",
          "id": "environment-variable-key-duplication",
          "target_type": "Pod",
          "comment": "Makes sure that duplicated environment variable keys are not duplicated",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Container CPU Requests Equal Limits",
          "id": "container-cpu-requests-equal-limits",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have the same CPU requests as limits set.",
          "optional": true
        },
        "grade": 1,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-cpu-requests-equal-limits is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Image Pull Policy",
          "id": "container-image-pull-policy",
          "target_type": "Pod",
          "comment": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "event-exporter",
            "summary": "ImagePullPolicy is not set to Always",
            "description": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want."
          },
          {
            "path": "prometheus-to-sd-exporter",
            "summary": "ImagePullPolicy is not set to Always",
            "description": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want."
          }
        ]
      },
      {
        "check": {
          "name": "Environment Variable Key Duplication",
          "id": "environment-variable-key-duplication",
          "target_type": "Pod",
          "comment": "Makes sure that duplicated environment variable keys are not duplicated",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Container Security Context Privileged",
          "id": "container-security-context-privileged",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have a unprivileged security context set",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Container Resources",
          "id": "container-resources",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "event-exporter",
            "summary": "CPU limit is not set",
            "description": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu"
          },
          {
            "path": "event-exporter",
            "summary": "Memory limit is not set",
            "description": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.memory"
          },
          {
            "path": "prometheus-to-sd-exporter",
            "summary": "CPU limit is not set",
            "description": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu"
          },
          {
            "path": "prometheus-to-sd-exporter",
            "summary": "Memory limit is not set",
            "description": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.memory"
          },
          {
            "path": "prometheus-to-sd-exporter",
            "summary": "CPU request is not set",
            "description": "Resource requests are recommended to make sure that the application can start and run without crashing. Set resources.requests.cpu"
          },
          {
            "path": "prometheus-to-sd-exporter",
            "summary": "Memory request is not set",
            "description": "Resource requests are recommended to make sure that the application can start and run without crashing. Set resources.requests.memory"
          }
        ]
      },
      {
        "check": {
          "name": "Container Ports Check",
          "id": "container-ports-check",
          "target_type": "Pod",
          "comment": "Container Ports Checks",
          "optional": true
        },
        "grade": 10,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-ports-check is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Memory Requests Equal Limits",
          "id": "container-memory-requests-equal-limits",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have the same memory requests as limits set.",
          "optional": true
        },
        "grade": 1,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-memory-requests-equal-limits is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Ephemeral Storage Request and Limit",
          "id": "container-ephemeral-storage-request-and-limit",
          "target_type": "Pod",
          "comment": "Makes sure all pods have ephemeral-storage requests and limits set",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "event-exporter",
            "summary": "Ephemeral Storage limit is not set",
            "description": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage"
          },
          {
            "path": "prometheus-to-sd-exporter",
            "summary": "Ephemeral Storage limit is not set",
            "description": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage"
          }
        ]
      },
      {
        "check": {
          "name": "Container Ephemeral Storage Request Equals Limit",
          "id": "container-ephemeral-storage-request-equals-limit",
          "target_type": "Pod",
          "comment": "Make sure all pods have matching ephemeral-storage requests and limits",
          "optional": true
        },
        "grade": 10,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-ephemeral-storage-request-equals-limit is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Pod NetworkPolicy",
          "id": "pod-networkpolicy",
          "target_type": "Pod",
          "comment": "Makes sure that all Pods are targeted by a NetworkPolicy",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "",
            "summary": "The pod does not have a matching NetworkPolicy",
            "description": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect."
          }
        ]
      },
      {
        "check": {
          "name": "Pod Probes",
          "id": "pod-probes",
          "target_type": "Pod",
          "comment": "Makes sure that all Pods have safe probe configurations",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": [
          {
            "path": "",
            "summary": "The pod is not targeted by a service, skipping probe checks.",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Security Context ReadOnlyRootFilesystem",
          "id": "container-security-context-readonlyrootfilesystem",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have a security context with read only filesystem set",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "event-exporter",
            "summary": "The pod has a container with a writable root filesystem",
            "description": "Set securityContext.readOnlyRootFilesystem to true"
          },
          {
            "path": "prometheus-to-sd-exporter",
            "summary": "The pod has a container with a writable root filesystem",
            "description": "Set securityContext.readOnlyRootFilesystem to true"
          }
        ]
      },
      {
        "check": {
          "name": "Container Seccomp Profile",
          "id": "container-seccomp-profile",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have at a seccomp policy configured.",
          "optional": true
        },
        "grade": 5,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-seccomp-profile is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Resource Requests Equal Limits",
          "id": "container-resource-requests-equal-limits",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have the same requests as limits on resources set.",
          "optional": true
        },
        "grade": 1,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-resource-requests-equal-limits is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Security Context User Group ID",
          "id": "container-security-context-user-group-id",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have a security context with valid UID and GID set ",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "event-exporter",
            "summary": "The container is running with a low user ID",
            "description": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value \u003e 10000"
          },
          {
            "path": "event-exporter",
            "summary": "The container running with a low group ID",
            "description": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value \u003e 10000"
          },
          {
            "path": "prometheus-to-sd-exporter",
            "summary": "The container is running with a low user ID",
            "description": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value \u003e 10000"
          },
          {
            "path": "prometheus-to-sd-exporter",
            "summary": "The container running with a low group ID",
            "description": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value \u003e 10000"
          }
        ]
      },
      {
        "check": {
          "name": "Container Image Tag",
          "id": "container-image-tag",
          "target_type": "Pod",
          "comment": "Makes sure that a explicit non-latest tag is used",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      }
    ],
    "file_name": "/tmp/kube-security-scanner/yaml/ALL/ALL.yaml",
    "file_row": 17867
  },
  {
    "object_name": "Pod/v1/kube-system/l7-default-backend-d86c96845-n5zl9",
    "type_meta": {
      "kind": "Pod",
      "apiVersion": "v1"
    },
    "object_meta": {
      "name": "l7-default-backend-d86c96845-n5zl9",
      "generateName": "l7-default-backend-d86c96845-",
      "namespace": "kube-system",
      "resourceVersion": "1857",
      "creationTimestamp": null,
      "labels": {
        "k8s-app": "glbc",
        "name": "glbc",
        "pod-template-hash": "d86c96845"
      },
      "ownerReferences": [
        {
          "apiVersion": "apps/v1",
          "kind": "ReplicaSet",
          "name": "l7-default-backend-d86c96845",
          "uid": "880cc9a8-f995-4a1a-9ee8-1eae6e6b0de9",
          "controller": true,
          "blockOwnerDeletion": true
        }
      ]
    },
    "checks": [
      {
        "check": {
          "name": "Stable version",
          "id": "stable-version",
          "target_type": "all",
          "comment": "Checks if the object is using a deprecated apiVersion",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Label values",
          "id": "label-values",
          "target_type": "all",
          "comment": "Validates label values",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Stable version",
          "id": "stable-version",
          "target_type": "all",
          "comment": "Checks if the object is using a deprecated apiVersion",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Label values",
          "id": "label-values",
          "target_type": "all",
          "comment": "Validates label values",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Container Ports Check",
          "id": "container-ports-check",
          "target_type": "Pod",
          "comment": "Container Ports Checks",
          "optional": true
        },
        "grade": 10,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-ports-check is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Security Context ReadOnlyRootFilesystem",
          "id": "container-security-context-readonlyrootfilesystem",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have a security context with read only filesystem set",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "default-http-backend",
            "summary": "The pod has a container with a writable root filesystem",
            "description": "Set securityContext.readOnlyRootFilesystem to true"
          }
        ]
      },
      {
        "check": {
          "name": "Container Seccomp Profile",
          "id": "container-seccomp-profile",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have at a seccomp policy configured.",
          "optional": true
        },
        "grade": 5,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-seccomp-profile is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Resource Requests Equal Limits",
          "id": "container-resource-requests-equal-limits",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have the same requests as limits on resources set.",
          "optional": true
        },
        "grade": 1,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-resource-requests-equal-limits is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Memory Requests Equal Limits",
          "id": "container-memory-requests-equal-limits",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have the same memory requests as limits set.",
          "optional": true
        },
        "grade": 1,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-memory-requests-equal-limits is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Ephemeral Storage Request and Limit",
          "id": "container-ephemeral-storage-request-and-limit",
          "target_type": "Pod",
          "comment": "Makes sure all pods have ephemeral-storage requests and limits set",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "default-http-backend",
            "summary": "Ephemeral Storage limit is not set",
            "description": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage"
          }
        ]
      },
      {
        "check": {
          "name": "Container Ephemeral Storage Request Equals Limit",
          "id": "container-ephemeral-storage-request-equals-limit",
          "target_type": "Pod",
          "comment": "Make sure all pods have matching ephemeral-storage requests and limits",
          "optional": true
        },
        "grade": 10,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-ephemeral-storage-request-equals-limit is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Pod NetworkPolicy",
          "id": "pod-networkpolicy",
          "target_type": "Pod",
          "comment": "Makes sure that all Pods are targeted by a NetworkPolicy",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "",
            "summary": "The pod does not have a matching NetworkPolicy",
            "description": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect."
          }
        ]
      },
      {
        "check": {
          "name": "Pod Probes",
          "id": "pod-probes",
          "target_type": "Pod",
          "comment": "Makes sure that all Pods have safe probe configurations",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "",
            "summary": "Container is missing a readinessProbe",
            "description": "A readinessProbe should be used to indicate when the service is ready to receive traffic. Without it, the Pod is risking to receive traffic before it has booted. It's also used during rollouts, and can prevent downtime if a new version of the application is failing."
          }
        ]
      },
      {
        "check": {
          "name": "Container Image Tag",
          "id": "container-image-tag",
          "target_type": "Pod",
          "comment": "Makes sure that a explicit non-latest tag is used",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Container Security Context User Group ID",
          "id": "container-security-context-user-group-id",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have a security context with valid UID and GID set ",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "default-http-backend",
            "summary": "The container is running with a low user ID",
            "description": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value \u003e 10000"
          },
          {
            "path": "default-http-backend",
            "summary": "The container running with a low group ID",
            "description": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value \u003e 10000"
          }
        ]
      },
      {
        "check": {
          "name": "Container Resources",
          "id": "container-resources",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "default-http-backend",
            "summary": "CPU limit is not set",
            "description": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu"
          },
          {
            "path": "default-http-backend",
            "summary": "Memory limit is not set",
            "description": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.memory"
          }
        ]
      },
      {
        "check": {
          "name": "Container CPU Requests Equal Limits",
          "id": "container-cpu-requests-equal-limits",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have the same CPU requests as limits set.",
          "optional": true
        },
        "grade": 1,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-cpu-requests-equal-limits is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Image Pull Policy",
          "id": "container-image-pull-policy",
          "target_type": "Pod",
          "comment": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "default-http-backend",
            "summary": "ImagePullPolicy is not set to Always",
            "description": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want."
          }
        ]
      },
      {
        "check": {
          "name": "Environment Variable Key Duplication",
          "id": "environment-variable-key-duplication",
          "target_type": "Pod",
          "comment": "Makes sure that duplicated environment variable keys are not duplicated",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Container Security Context Privileged",
          "id": "container-security-context-privileged",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have a unprivileged security context set",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Container Memory Requests Equal Limits",
          "id": "container-memory-requests-equal-limits",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have the same memory requests as limits set.",
          "optional": true
        },
        "grade": 1,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-memory-requests-equal-limits is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Ephemeral Storage Request and Limit",
          "id": "container-ephemeral-storage-request-and-limit",
          "target_type": "Pod",
          "comment": "Makes sure all pods have ephemeral-storage requests and limits set",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "default-http-backend",
            "summary": "Ephemeral Storage limit is not set",
            "description": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage"
          }
        ]
      },
      {
        "check": {
          "name": "Container Ephemeral Storage Request Equals Limit",
          "id": "container-ephemeral-storage-request-equals-limit",
          "target_type": "Pod",
          "comment": "Make sure all pods have matching ephemeral-storage requests and limits",
          "optional": true
        },
        "grade": 10,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-ephemeral-storage-request-equals-limit is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Pod NetworkPolicy",
          "id": "pod-networkpolicy",
          "target_type": "Pod",
          "comment": "Makes sure that all Pods are targeted by a NetworkPolicy",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "",
            "summary": "The pod does not have a matching NetworkPolicy",
            "description": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect."
          }
        ]
      },
      {
        "check": {
          "name": "Pod Probes",
          "id": "pod-probes",
          "target_type": "Pod",
          "comment": "Makes sure that all Pods have safe probe configurations",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "",
            "summary": "Container is missing a readinessProbe",
            "description": "A readinessProbe should be used to indicate when the service is ready to receive traffic. Without it, the Pod is risking to receive traffic before it has booted. It's also used during rollouts, and can prevent downtime if a new version of the application is failing."
          }
        ]
      },
      {
        "check": {
          "name": "Container Security Context ReadOnlyRootFilesystem",
          "id": "container-security-context-readonlyrootfilesystem",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have a security context with read only filesystem set",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "default-http-backend",
            "summary": "The pod has a container with a writable root filesystem",
            "description": "Set securityContext.readOnlyRootFilesystem to true"
          }
        ]
      },
      {
        "check": {
          "name": "Container Seccomp Profile",
          "id": "container-seccomp-profile",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have at a seccomp policy configured.",
          "optional": true
        },
        "grade": 5,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-seccomp-profile is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Resource Requests Equal Limits",
          "id": "container-resource-requests-equal-limits",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have the same requests as limits on resources set.",
          "optional": true
        },
        "grade": 1,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-resource-requests-equal-limits is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Security Context User Group ID",
          "id": "container-security-context-user-group-id",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have a security context with valid UID and GID set ",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "default-http-backend",
            "summary": "The container is running with a low user ID",
            "description": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value \u003e 10000"
          },
          {
            "path": "default-http-backend",
            "summary": "The container running with a low group ID",
            "description": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value \u003e 10000"
          }
        ]
      },
      {
        "check": {
          "name": "Container Image Tag",
          "id": "container-image-tag",
          "target_type": "Pod",
          "comment": "Makes sure that a explicit non-latest tag is used",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Container CPU Requests Equal Limits",
          "id": "container-cpu-requests-equal-limits",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have the same CPU requests as limits set.",
          "optional": true
        },
        "grade": 1,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-cpu-requests-equal-limits is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Image Pull Policy",
          "id": "container-image-pull-policy",
          "target_type": "Pod",
          "comment": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "default-http-backend",
            "summary": "ImagePullPolicy is not set to Always",
            "description": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want."
          }
        ]
      },
      {
        "check": {
          "name": "Environment Variable Key Duplication",
          "id": "environment-variable-key-duplication",
          "target_type": "Pod",
          "comment": "Makes sure that duplicated environment variable keys are not duplicated",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Container Security Context Privileged",
          "id": "container-security-context-privileged",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have a unprivileged security context set",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Container Resources",
          "id": "container-resources",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "default-http-backend",
            "summary": "CPU limit is not set",
            "description": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu"
          },
          {
            "path": "default-http-backend",
            "summary": "Memory limit is not set",
            "description": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.memory"
          }
        ]
      },
      {
        "check": {
          "name": "Container Ports Check",
          "id": "container-ports-check",
          "target_type": "Pod",
          "comment": "Container Ports Checks",
          "optional": true
        },
        "grade": 10,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-ports-check is ignored",
            "description": ""
          }
        ]
      }
    ],
    "file_name": "/tmp/kube-security-scanner/yaml/ALL/ALL.yaml",
    "file_row": 19489
  },
  {
    "object_name": "Pod/v1/kube-system/netd-mbqmw",
    "type_meta": {
      "kind": "Pod",
      "apiVersion": "v1"
    },
    "object_meta": {
      "name": "netd-mbqmw",
      "generateName": "netd-",
      "namespace": "kube-system",
      "resourceVersion": "1645",
      "creationTimestamp": null,
      "labels": {
        "controller-revision-hash": "7c8f59cb6b",
        "k8s-app": "netd",
        "pod-template-generation": "1"
      },
      "ownerReferences": [
        {
          "apiVersion": "apps/v1",
          "kind": "DaemonSet",
          "name": "netd",
          "uid": "293c1ae1-68a0-4644-80c2-70eccb821b5f",
          "controller": true,
          "blockOwnerDeletion": true
        }
      ]
    },
    "checks": [
      {
        "check": {
          "name": "Stable version",
          "id": "stable-version",
          "target_type": "all",
          "comment": "Checks if the object is using a deprecated apiVersion",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Label values",
          "id": "label-values",
          "target_type": "all",
          "comment": "Validates label values",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Stable version",
          "id": "stable-version",
          "target_type": "all",
          "comment": "Checks if the object is using a deprecated apiVersion",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Label values",
          "id": "label-values",
          "target_type": "all",
          "comment": "Validates label values",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Container Seccomp Profile",
          "id": "container-seccomp-profile",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have at a seccomp policy configured.",
          "optional": true
        },
        "grade": 5,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-seccomp-profile is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Resource Requests Equal Limits",
          "id": "container-resource-requests-equal-limits",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have the same requests as limits on resources set.",
          "optional": true
        },
        "grade": 1,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-resource-requests-equal-limits is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Memory Requests Equal Limits",
          "id": "container-memory-requests-equal-limits",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have the same memory requests as limits set.",
          "optional": true
        },
        "grade": 1,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-memory-requests-equal-limits is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Ephemeral Storage Request and Limit",
          "id": "container-ephemeral-storage-request-and-limit",
          "target_type": "Pod",
          "comment": "Makes sure all pods have ephemeral-storage requests and limits set",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "install-cni",
            "summary": "Ephemeral Storage limit is not set",
            "description": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage"
          },
          {
            "path": "netd",
            "summary": "Ephemeral Storage limit is not set",
            "description": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage"
          }
        ]
      },
      {
        "check": {
          "name": "Container Ephemeral Storage Request Equals Limit",
          "id": "container-ephemeral-storage-request-equals-limit",
          "target_type": "Pod",
          "comment": "Make sure all pods have matching ephemeral-storage requests and limits",
          "optional": true
        },
        "grade": 10,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-ephemeral-storage-request-equals-limit is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Pod NetworkPolicy",
          "id": "pod-networkpolicy",
          "target_type": "Pod",
          "comment": "Makes sure that all Pods are targeted by a NetworkPolicy",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "",
            "summary": "The pod does not have a matching NetworkPolicy",
            "description": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect."
          }
        ]
      },
      {
        "check": {
          "name": "Pod Probes",
          "id": "pod-probes",
          "target_type": "Pod",
          "comment": "Makes sure that all Pods have safe probe configurations",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": [
          {
            "path": "",
            "summary": "The pod is not targeted by a service, skipping probe checks.",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Security Context ReadOnlyRootFilesystem",
          "id": "container-security-context-readonlyrootfilesystem",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have a security context with read only filesystem set",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "install-cni",
            "summary": "The pod has a container with a writable root filesystem",
            "description": "Set securityContext.readOnlyRootFilesystem to true"
          },
          {
            "path": "netd",
            "summary": "The pod has a container with a writable root filesystem",
            "description": "Set securityContext.readOnlyRootFilesystem to true"
          }
        ]
      },
      {
        "check": {
          "name": "Container Image Tag",
          "id": "container-image-tag",
          "target_type": "Pod",
          "comment": "Makes sure that a explicit non-latest tag is used",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Container Security Context User Group ID",
          "id": "container-security-context-user-group-id",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have a security context with valid UID and GID set ",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "install-cni",
            "summary": "The container is running with a low user ID",
            "description": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value \u003e 10000"
          },
          {
            "path": "install-cni",
            "summary": "The container running with a low group ID",
            "description": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value \u003e 10000"
          },
          {
            "path": "netd",
            "summary": "The container is running with a low user ID",
            "description": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value \u003e 10000"
          },
          {
            "path": "netd",
            "summary": "The container running with a low group ID",
            "description": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value \u003e 10000"
          }
        ]
      },
      {
        "check": {
          "name": "Container Resources",
          "id": "container-resources",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "install-cni",
            "summary": "CPU limit is not set",
            "description": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu"
          },
          {
            "path": "install-cni",
            "summary": "Memory limit is not set",
            "description": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.memory"
          },
          {
            "path": "install-cni",
            "summary": "CPU request is not set",
            "description": "Resource requests are recommended to make sure that the application can start and run without crashing. Set resources.requests.cpu"
          },
          {
            "path": "install-cni",
            "summary": "Memory request is not set",
            "description": "Resource requests are recommended to make sure that the application can start and run without crashing. Set resources.requests.memory"
          },
          {
            "path": "netd",
            "summary": "CPU limit is not set",
            "description": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu"
          },
          {
            "path": "netd",
            "summary": "Memory limit is not set",
            "description": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.memory"
          }
        ]
      },
      {
        "check": {
          "name": "Container CPU Requests Equal Limits",
          "id": "container-cpu-requests-equal-limits",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have the same CPU requests as limits set.",
          "optional": true
        },
        "grade": 1,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-cpu-requests-equal-limits is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Image Pull Policy",
          "id": "container-image-pull-policy",
          "target_type": "Pod",
          "comment": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "install-cni",
            "summary": "ImagePullPolicy is not set to Always",
            "description": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want."
          },
          {
            "path": "netd",
            "summary": "ImagePullPolicy is not set to Always",
            "description": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want."
          }
        ]
      },
      {
        "check": {
          "name": "Environment Variable Key Duplication",
          "id": "environment-variable-key-duplication",
          "target_type": "Pod",
          "comment": "Makes sure that duplicated environment variable keys are not duplicated",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Container Security Context Privileged",
          "id": "container-security-context-privileged",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have a unprivileged security context set",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "install-cni",
            "summary": "The container is privileged",
            "description": "Set securityContext.privileged to false. Privileged containers can access all devices on the host, and grants almost the same access as non-containerized processes on the host."
          },
          {
            "path": "netd",
            "summary": "The container is privileged",
            "description": "Set securityContext.privileged to false. Privileged containers can access all devices on the host, and grants almost the same access as non-containerized processes on the host."
          }
        ]
      },
      {
        "check": {
          "name": "Container Ports Check",
          "id": "container-ports-check",
          "target_type": "Pod",
          "comment": "Container Ports Checks",
          "optional": true
        },
        "grade": 10,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-ports-check is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Resources",
          "id": "container-resources",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "install-cni",
            "summary": "CPU limit is not set",
            "description": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu"
          },
          {
            "path": "install-cni",
            "summary": "Memory limit is not set",
            "description": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.memory"
          },
          {
            "path": "install-cni",
            "summary": "CPU request is not set",
            "description": "Resource requests are recommended to make sure that the application can start and run without crashing. Set resources.requests.cpu"
          },
          {
            "path": "install-cni",
            "summary": "Memory request is not set",
            "description": "Resource requests are recommended to make sure that the application can start and run without crashing. Set resources.requests.memory"
          },
          {
            "path": "netd",
            "summary": "CPU limit is not set",
            "description": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu"
          },
          {
            "path": "netd",
            "summary": "Memory limit is not set",
            "description": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.memory"
          }
        ]
      },
      {
        "check": {
          "name": "Container CPU Requests Equal Limits",
          "id": "container-cpu-requests-equal-limits",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have the same CPU requests as limits set.",
          "optional": true
        },
        "grade": 1,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-cpu-requests-equal-limits is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Image Pull Policy",
          "id": "container-image-pull-policy",
          "target_type": "Pod",
          "comment": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "install-cni",
            "summary": "ImagePullPolicy is not set to Always",
            "description": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want."
          },
          {
            "path": "netd",
            "summary": "ImagePullPolicy is not set to Always",
            "description": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want."
          }
        ]
      },
      {
        "check": {
          "name": "Environment Variable Key Duplication",
          "id": "environment-variable-key-duplication",
          "target_type": "Pod",
          "comment": "Makes sure that duplicated environment variable keys are not duplicated",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Container Security Context Privileged",
          "id": "container-security-context-privileged",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have a unprivileged security context set",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "install-cni",
            "summary": "The container is privileged",
            "description": "Set securityContext.privileged to false. Privileged containers can access all devices on the host, and grants almost the same access as non-containerized processes on the host."
          },
          {
            "path": "netd",
            "summary": "The container is privileged",
            "description": "Set securityContext.privileged to false. Privileged containers can access all devices on the host, and grants almost the same access as non-containerized processes on the host."
          }
        ]
      },
      {
        "check": {
          "name": "Container Ports Check",
          "id": "container-ports-check",
          "target_type": "Pod",
          "comment": "Container Ports Checks",
          "optional": true
        },
        "grade": 10,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-ports-check is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Pod Probes",
          "id": "pod-probes",
          "target_type": "Pod",
          "comment": "Makes sure that all Pods have safe probe configurations",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": [
          {
            "path": "",
            "summary": "The pod is not targeted by a service, skipping probe checks.",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Security Context ReadOnlyRootFilesystem",
          "id": "container-security-context-readonlyrootfilesystem",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have a security context with read only filesystem set",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "install-cni",
            "summary": "The pod has a container with a writable root filesystem",
            "description": "Set securityContext.readOnlyRootFilesystem to true"
          },
          {
            "path": "netd",
            "summary": "The pod has a container with a writable root filesystem",
            "description": "Set securityContext.readOnlyRootFilesystem to true"
          }
        ]
      },
      {
        "check": {
          "name": "Container Seccomp Profile",
          "id": "container-seccomp-profile",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have at a seccomp policy configured.",
          "optional": true
        },
        "grade": 5,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-seccomp-profile is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Resource Requests Equal Limits",
          "id": "container-resource-requests-equal-limits",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have the same requests as limits on resources set.",
          "optional": true
        },
        "grade": 1,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-resource-requests-equal-limits is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Memory Requests Equal Limits",
          "id": "container-memory-requests-equal-limits",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have the same memory requests as limits set.",
          "optional": true
        },
        "grade": 1,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-memory-requests-equal-limits is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Ephemeral Storage Request and Limit",
          "id": "container-ephemeral-storage-request-and-limit",
          "target_type": "Pod",
          "comment": "Makes sure all pods have ephemeral-storage requests and limits set",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "install-cni",
            "summary": "Ephemeral Storage limit is not set",
            "description": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage"
          },
          {
            "path": "netd",
            "summary": "Ephemeral Storage limit is not set",
            "description": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage"
          }
        ]
      },
      {
        "check": {
          "name": "Container Ephemeral Storage Request Equals Limit",
          "id": "container-ephemeral-storage-request-equals-limit",
          "target_type": "Pod",
          "comment": "Make sure all pods have matching ephemeral-storage requests and limits",
          "optional": true
        },
        "grade": 10,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-ephemeral-storage-request-equals-limit is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Pod NetworkPolicy",
          "id": "pod-networkpolicy",
          "target_type": "Pod",
          "comment": "Makes sure that all Pods are targeted by a NetworkPolicy",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "",
            "summary": "The pod does not have a matching NetworkPolicy",
            "description": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect."
          }
        ]
      },
      {
        "check": {
          "name": "Container Image Tag",
          "id": "container-image-tag",
          "target_type": "Pod",
          "comment": "Makes sure that a explicit non-latest tag is used",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Container Security Context User Group ID",
          "id": "container-security-context-user-group-id",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have a security context with valid UID and GID set ",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "install-cni",
            "summary": "The container is running with a low user ID",
            "description": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value \u003e 10000"
          },
          {
            "path": "install-cni",
            "summary": "The container running with a low group ID",
            "description": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value \u003e 10000"
          },
          {
            "path": "netd",
            "summary": "The container is running with a low user ID",
            "description": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value \u003e 10000"
          },
          {
            "path": "netd",
            "summary": "The container running with a low group ID",
            "description": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value \u003e 10000"
          }
        ]
      }
    ],
    "file_name": "/tmp/kube-security-scanner/yaml/ALL/ALL.yaml",
    "file_row": 19790
  },
  {
    "object_name": "Service/v1/kube-system/metrics-server",
    "type_meta": {
      "kind": "Service",
      "apiVersion": "v1"
    },
    "object_meta": {
      "name": "metrics-server",
      "namespace": "kube-system",
      "resourceVersion": "816",
      "creationTimestamp": null,
      "labels": {
        "addonmanager.kubernetes.io/mode": "Reconcile",
        "kubernetes.io/cluster-service": "true",
        "kubernetes.io/name": "Metrics-server"
      }
    },
    "checks": [
      {
        "check": {
          "name": "Stable version",
          "id": "stable-version",
          "target_type": "all",
          "comment": "Checks if the object is using a deprecated apiVersion",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Label values",
          "id": "label-values",
          "target_type": "all",
          "comment": "Validates label values",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Service Targets Pod",
          "id": "service-targets-pod",
          "target_type": "Service",
          "comment": "Makes sure that all Services targets a Pod",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Service Type",
          "id": "service-type",
          "target_type": "Service",
          "comment": "Makes sure that the Service type is not NodePort",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      }
    ],
    "file_name": "/tmp/kube-security-scanner/yaml/ALL/ALL.yaml",
    "file_row": 14969
  },
  {
    "object_name": "Pod/v1/kube-system/konnectivity-agent-autoscaler-5d9dbcc6d8-zgt6n",
    "type_meta": {
      "kind": "Pod",
      "apiVersion": "v1"
    },
    "object_meta": {
      "name": "konnectivity-agent-autoscaler-5d9dbcc6d8-zgt6n",
      "generateName": "konnectivity-agent-autoscaler-5d9dbcc6d8-",
      "namespace": "kube-system",
      "resourceVersion": "1855",
      "creationTimestamp": null,
      "labels": {
        "k8s-app": "konnectivity-agent-autoscaler",
        "pod-template-hash": "5d9dbcc6d8"
      },
      "ownerReferences": [
        {
          "apiVersion": "apps/v1",
          "kind": "ReplicaSet",
          "name": "konnectivity-agent-autoscaler-5d9dbcc6d8",
          "uid": "1884b717-51c4-4f0d-b188-39e5d7f96296",
          "controller": true,
          "blockOwnerDeletion": true
        }
      ]
    },
    "checks": [
      {
        "check": {
          "name": "Stable version",
          "id": "stable-version",
          "target_type": "all",
          "comment": "Checks if the object is using a deprecated apiVersion",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Label values",
          "id": "label-values",
          "target_type": "all",
          "comment": "Validates label values",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Stable version",
          "id": "stable-version",
          "target_type": "all",
          "comment": "Checks if the object is using a deprecated apiVersion",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Label values",
          "id": "label-values",
          "target_type": "all",
          "comment": "Validates label values",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Container Image Tag",
          "id": "container-image-tag",
          "target_type": "Pod",
          "comment": "Makes sure that a explicit non-latest tag is used",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Container Security Context User Group ID",
          "id": "container-security-context-user-group-id",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have a security context with valid UID and GID set ",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "autoscaler",
            "summary": "The container is running with a low user ID",
            "description": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value \u003e 10000"
          },
          {
            "path": "autoscaler",
            "summary": "The container running with a low group ID",
            "description": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value \u003e 10000"
          }
        ]
      },
      {
        "check": {
          "name": "Container Resources",
          "id": "container-resources",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "autoscaler",
            "summary": "CPU limit is not set",
            "description": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu"
          },
          {
            "path": "autoscaler",
            "summary": "Memory limit is not set",
            "description": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.memory"
          }
        ]
      },
      {
        "check": {
          "name": "Container CPU Requests Equal Limits",
          "id": "container-cpu-requests-equal-limits",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have the same CPU requests as limits set.",
          "optional": true
        },
        "grade": 1,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-cpu-requests-equal-limits is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Image Pull Policy",
          "id": "container-image-pull-policy",
          "target_type": "Pod",
          "comment": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "autoscaler",
            "summary": "ImagePullPolicy is not set to Always",
            "description": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want."
          }
        ]
      },
      {
        "check": {
          "name": "Environment Variable Key Duplication",
          "id": "environment-variable-key-duplication",
          "target_type": "Pod",
          "comment": "Makes sure that duplicated environment variable keys are not duplicated",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Container Security Context Privileged",
          "id": "container-security-context-privileged",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have a unprivileged security context set",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Container Ports Check",
          "id": "container-ports-check",
          "target_type": "Pod",
          "comment": "Container Ports Checks",
          "optional": true
        },
        "grade": 10,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-ports-check is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Pod Probes",
          "id": "pod-probes",
          "target_type": "Pod",
          "comment": "Makes sure that all Pods have safe probe configurations",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": [
          {
            "path": "",
            "summary": "The pod is not targeted by a service, skipping probe checks.",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Security Context ReadOnlyRootFilesystem",
          "id": "container-security-context-readonlyrootfilesystem",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have a security context with read only filesystem set",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "autoscaler",
            "summary": "The pod has a container with a writable root filesystem",
            "description": "Set securityContext.readOnlyRootFilesystem to true"
          }
        ]
      },
      {
        "check": {
          "name": "Container Seccomp Profile",
          "id": "container-seccomp-profile",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have at a seccomp policy configured.",
          "optional": true
        },
        "grade": 5,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-seccomp-profile is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Resource Requests Equal Limits",
          "id": "container-resource-requests-equal-limits",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have the same requests as limits on resources set.",
          "optional": true
        },
        "grade": 1,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-resource-requests-equal-limits is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Memory Requests Equal Limits",
          "id": "container-memory-requests-equal-limits",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have the same memory requests as limits set.",
          "optional": true
        },
        "grade": 1,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-memory-requests-equal-limits is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Ephemeral Storage Request and Limit",
          "id": "container-ephemeral-storage-request-and-limit",
          "target_type": "Pod",
          "comment": "Makes sure all pods have ephemeral-storage requests and limits set",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "autoscaler",
            "summary": "Ephemeral Storage limit is not set",
            "description": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage"
          }
        ]
      },
      {
        "check": {
          "name": "Container Ephemeral Storage Request Equals Limit",
          "id": "container-ephemeral-storage-request-equals-limit",
          "target_type": "Pod",
          "comment": "Make sure all pods have matching ephemeral-storage requests and limits",
          "optional": true
        },
        "grade": 10,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-ephemeral-storage-request-equals-limit is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Pod NetworkPolicy",
          "id": "pod-networkpolicy",
          "target_type": "Pod",
          "comment": "Makes sure that all Pods are targeted by a NetworkPolicy",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "",
            "summary": "The pod does not have a matching NetworkPolicy",
            "description": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect."
          }
        ]
      },
      {
        "check": {
          "name": "Environment Variable Key Duplication",
          "id": "environment-variable-key-duplication",
          "target_type": "Pod",
          "comment": "Makes sure that duplicated environment variable keys are not duplicated",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Container Security Context Privileged",
          "id": "container-security-context-privileged",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have a unprivileged security context set",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Container Resources",
          "id": "container-resources",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "autoscaler",
            "summary": "CPU limit is not set",
            "description": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu"
          },
          {
            "path": "autoscaler",
            "summary": "Memory limit is not set",
            "description": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.memory"
          }
        ]
      },
      {
        "check": {
          "name": "Container CPU Requests Equal Limits",
          "id": "container-cpu-requests-equal-limits",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have the same CPU requests as limits set.",
          "optional": true
        },
        "grade": 1,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-cpu-requests-equal-limits is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Image Pull Policy",
          "id": "container-image-pull-policy",
          "target_type": "Pod",
          "comment": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "autoscaler",
            "summary": "ImagePullPolicy is not set to Always",
            "description": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want."
          }
        ]
      },
      {
        "check": {
          "name": "Container Ports Check",
          "id": "container-ports-check",
          "target_type": "Pod",
          "comment": "Container Ports Checks",
          "optional": true
        },
        "grade": 10,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-ports-check is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Ephemeral Storage Request Equals Limit",
          "id": "container-ephemeral-storage-request-equals-limit",
          "target_type": "Pod",
          "comment": "Make sure all pods have matching ephemeral-storage requests and limits",
          "optional": true
        },
        "grade": 10,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-ephemeral-storage-request-equals-limit is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Pod NetworkPolicy",
          "id": "pod-networkpolicy",
          "target_type": "Pod",
          "comment": "Makes sure that all Pods are targeted by a NetworkPolicy",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "",
            "summary": "The pod does not have a matching NetworkPolicy",
            "description": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect."
          }
        ]
      },
      {
        "check": {
          "name": "Pod Probes",
          "id": "pod-probes",
          "target_type": "Pod",
          "comment": "Makes sure that all Pods have safe probe configurations",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": [
          {
            "path": "",
            "summary": "The pod is not targeted by a service, skipping probe checks.",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Security Context ReadOnlyRootFilesystem",
          "id": "container-security-context-readonlyrootfilesystem",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have a security context with read only filesystem set",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "autoscaler",
            "summary": "The pod has a container with a writable root filesystem",
            "description": "Set securityContext.readOnlyRootFilesystem to true"
          }
        ]
      },
      {
        "check": {
          "name": "Container Seccomp Profile",
          "id": "container-seccomp-profile",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have at a seccomp policy configured.",
          "optional": true
        },
        "grade": 5,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-seccomp-profile is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Resource Requests Equal Limits",
          "id": "container-resource-requests-equal-limits",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have the same requests as limits on resources set.",
          "optional": true
        },
        "grade": 1,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-resource-requests-equal-limits is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Memory Requests Equal Limits",
          "id": "container-memory-requests-equal-limits",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have the same memory requests as limits set.",
          "optional": true
        },
        "grade": 1,
        "skipped": true,
        "comments": [
          {
            "path": "",
            "summary": "Skipped because container-memory-requests-equal-limits is ignored",
            "description": ""
          }
        ]
      },
      {
        "check": {
          "name": "Container Ephemeral Storage Request and Limit",
          "id": "container-ephemeral-storage-request-and-limit",
          "target_type": "Pod",
          "comment": "Makes sure all pods have ephemeral-storage requests and limits set",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "autoscaler",
            "summary": "Ephemeral Storage limit is not set",
            "description": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage"
          }
        ]
      },
      {
        "check": {
          "name": "Container Image Tag",
          "id": "container-image-tag",
          "target_type": "Pod",
          "comment": "Makes sure that a explicit non-latest tag is used",
          "optional": false
        },
        "grade": 10,
        "skipped": false,
        "comments": null
      },
      {
        "check": {
          "name": "Container Security Context User Group ID",
          "id": "container-security-context-user-group-id",
          "target_type": "Pod",
          "comment": "Makes sure that all pods have a security context with valid UID and GID set ",
          "optional": false
        },
        "grade": 1,
        "skipped": false,
        "comments": [
          {
            "path": "autoscaler",
            "summary": "The container is running with a low user ID",
            "description": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value \u003e 10000"
          },
          {
            "path": "autoscaler",
            "summary": "The container running with a low group ID",
            "description": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value \u003e 10000"
          }
        ]
      }
    ],
    "file_name": "/tmp/kube-security-scanner/yaml/ALL/ALL.yaml",
    "file_row": 19018
  }
]

{
  "scanId": "65b3aa116bf67a3d37ef0928",
  "aggregated": true,
  "namespacedResources": {
    "default": [
      {
        "kind": "Service",
        "namespace": "default",
        "name": "kubernetes",
        "checks": [
          {
            "severity": "MEDIUM",
            "title": " The services selector does not match any pods",
            "description": "Makes sure that all Services targets a Pod",
            "remediation": "",
            "origin": "kube-score",
            "originId": "service-targets-pod",
            "passed": false,
            "skipped": false,
            "skipReason": null
          }
        ]
      }
    ],
    "local-path-storage": [
      {
        "kind": "ReplicaSet",
        "namespace": "local-path-storage",
        "name": "local-path-provisioner-844bd8758f",
        "checks": [
          {
            "severity": "CRITICAL",
            "title": " The pod is not targeted by a service, skipping probe checks.",
            "description": "Makes sure that all Pods have safe probe configurations",
            "remediation": "",
            "origin": "kube-score",
            "originId": "pod-probes",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "local-path-provisioner ImagePullPolicy is not set to Always",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want.",
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "local-path-provisioner Container has no configured security context",
            "description": "Makes sure that all pods have a security context with read only filesystem set",
            "remediation": "Set securityContext to run the container in a more secure context.",
            "origin": "kube-score",
            "originId": "container-security-context-readonlyrootfilesystem",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "local-path-provisioner The container is running with a low user ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "local-path-provisioner The container running with a low group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "local-path-provisioner CPU limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "local-path-provisioner Memory limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.memory",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "local-path-provisioner CPU request is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource requests are recommended to make sure that the application can start and run without crashing. Set resources.requests.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "local-path-provisioner Memory request is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource requests are recommended to make sure that the application can start and run without crashing. Set resources.requests.memory",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "local-path-provisioner Ephemeral Storage limit is not set",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage",
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": " The pod does not have a matching NetworkPolicy",
            "description": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "remediation": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect.",
            "origin": "kube-score",
            "originId": "pod-networkpolicy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": " The pod does not have a matching NetworkPolicy",
            "description": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "remediation": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect.",
            "origin": "kube-score",
            "originId": "pod-networkpolicy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "local-path-provisioner The container is running with a low user ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "local-path-provisioner The container running with a low group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "local-path-provisioner CPU limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "local-path-provisioner Memory limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.memory",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "local-path-provisioner CPU request is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource requests are recommended to make sure that the application can start and run without crashing. Set resources.requests.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "local-path-provisioner Memory request is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource requests are recommended to make sure that the application can start and run without crashing. Set resources.requests.memory",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "local-path-provisioner Ephemeral Storage limit is not set",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage",
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "CRITICAL",
            "title": " The pod is not targeted by a service, skipping probe checks.",
            "description": "Makes sure that all Pods have safe probe configurations",
            "remediation": "",
            "origin": "kube-score",
            "originId": "pod-probes",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "local-path-provisioner Container has no configured security context",
            "description": "Makes sure that all pods have a security context with read only filesystem set",
            "remediation": "Set securityContext to run the container in a more secure context.",
            "origin": "kube-score",
            "originId": "container-security-context-readonlyrootfilesystem",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "local-path-provisioner ImagePullPolicy is not set to Always",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want.",
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          }
        ]
      },
      {
        "kind": "Deployment",
        "namespace": "local-path-storage",
        "name": "local-path-provisioner",
        "checks": [
          {
            "severity": "MEDIUM",
            "title": "Can elevate its own privileges",
            "description": "A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.",
            "remediation": "Set 'set containers[].securityContext.allowPrivilegeEscalation' to 'false'.",
            "origin": "trivy",
            "originId": "KSV001",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Runs as root user",
            "description": "Force the running image to run as a non-root user to ensure least privileges.",
            "remediation": "Set 'containers[].securityContext.runAsNonRoot' to true.",
            "origin": "trivy",
            "originId": "KSV012",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Seccomp policies disabled",
            "description": "A program inside the container can bypass Seccomp protection policies.",
            "remediation": "Specify seccomp either by annotation or by seccomp profile type having allowed values as per pod security standards",
            "origin": "trivy",
            "originId": "KSV104",
            "passed": false,
            "skipped": false,
            "skipReason": null
          }
        ]
      }
    ],
    "kube-node-lease": [],
    "kube-system": [
      {
        "kind": "DaemonSet",
        "namespace": "kube-system",
        "name": "rke2-ingress-nginx-controller",
        "checks": [
          {
            "severity": "MEDIUM",
            "title": "Can elevate its own privileges",
            "description": "A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.",
            "remediation": "Set 'set containers[].securityContext.allowPrivilegeEscalation' to 'false'.",
            "origin": "trivy",
            "originId": "KSV001",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Runs as root user",
            "description": "Force the running image to run as a non-root user to ensure least privileges.",
            "remediation": "Set 'containers[].securityContext.runAsNonRoot' to true.",
            "origin": "trivy",
            "originId": "KSV012",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Specific capabilities added",
            "description": "According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.",
            "remediation": "Do not set spec.containers[*].securityContext.capabilities.add and spec.initContainers[*].securityContext.capabilities.add.",
            "origin": "trivy",
            "originId": "KSV022",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "Access to host ports",
            "description": "According to pod security standard 'Host Ports', hostPorts should be disallowed, or at minimum restricted to a known list.",
            "remediation": "Do not set spec.containers[*].ports[*].hostPort and spec.initContainers[*].ports[*].hostPort.",
            "origin": "trivy",
            "originId": "KSV024",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Seccomp policies disabled",
            "description": "A program inside the container can bypass Seccomp protection policies.",
            "remediation": "Specify seccomp either by annotation or by seccomp profile type having allowed values as per pod security standards",
            "origin": "trivy",
            "originId": "KSV104",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "Prevent binding to privileged ports",
            "description": "The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.",
            "remediation": "Do not map the container ports to privileged host ports when starting a container.",
            "origin": "trivy",
            "originId": "KSV117",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": " Container has the same readiness and liveness probe",
            "description": "Makes sure that all Pods have safe probe configurations",
            "remediation": "Using the same probe for liveness and readiness is very likely dangerous. Generally it's better to avoid the livenessProbe than re-using the readinessProbe.",
            "origin": "kube-score",
            "originId": "pod-probes",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "rke2-ingress-nginx-controller ImagePullPolicy is not set to Always",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want.",
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "rke2-ingress-nginx-controller The pod has a container with a writable root filesystem",
            "description": "Makes sure that all pods have a security context with read only filesystem set",
            "remediation": "Set securityContext.readOnlyRootFilesystem to true",
            "origin": "kube-score",
            "originId": "container-security-context-readonlyrootfilesystem",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "rke2-ingress-nginx-controller CPU limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "rke2-ingress-nginx-controller Memory limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.memory",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "rke2-ingress-nginx-controller Ephemeral Storage limit is not set",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage",
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": " The pod does not have a matching NetworkPolicy",
            "description": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "remediation": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect.",
            "origin": "kube-score",
            "originId": "pod-networkpolicy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "rke2-ingress-nginx-controller The container is running with a low user ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "rke2-ingress-nginx-controller The container running with a low group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": " Container has the same readiness and liveness probe",
            "description": "Makes sure that all Pods have safe probe configurations",
            "remediation": "Using the same probe for liveness and readiness is very likely dangerous. Generally it's better to avoid the livenessProbe than re-using the readinessProbe.",
            "origin": "kube-score",
            "originId": "pod-probes",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "rke2-ingress-nginx-controller The pod has a container with a writable root filesystem",
            "description": "Makes sure that all pods have a security context with read only filesystem set",
            "remediation": "Set securityContext.readOnlyRootFilesystem to true",
            "origin": "kube-score",
            "originId": "container-security-context-readonlyrootfilesystem",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "rke2-ingress-nginx-controller ImagePullPolicy is not set to Always",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want.",
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": " The pod does not have a matching NetworkPolicy",
            "description": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "remediation": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect.",
            "origin": "kube-score",
            "originId": "pod-networkpolicy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "rke2-ingress-nginx-controller The container is running with a low user ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "rke2-ingress-nginx-controller The container running with a low group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "rke2-ingress-nginx-controller CPU limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "rke2-ingress-nginx-controller Memory limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.memory",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "rke2-ingress-nginx-controller Ephemeral Storage limit is not set",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage",
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": " Container has the same readiness and liveness probe",
            "description": "Makes sure that all Pods have safe probe configurations",
            "remediation": "Using the same probe for liveness and readiness is very likely dangerous. Generally it's better to avoid the livenessProbe than re-using the readinessProbe.",
            "origin": "kube-score",
            "originId": "pod-probes",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "rke2-ingress-nginx-controller ImagePullPolicy is not set to Always",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want.",
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "rke2-ingress-nginx-controller The pod has a container with a writable root filesystem",
            "description": "Makes sure that all pods have a security context with read only filesystem set",
            "remediation": "Set securityContext.readOnlyRootFilesystem to true",
            "origin": "kube-score",
            "originId": "container-security-context-readonlyrootfilesystem",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": " The pod does not have a matching NetworkPolicy",
            "description": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "remediation": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect.",
            "origin": "kube-score",
            "originId": "pod-networkpolicy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "rke2-ingress-nginx-controller The container is running with a low user ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "rke2-ingress-nginx-controller The container running with a low group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "rke2-ingress-nginx-controller CPU limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "rke2-ingress-nginx-controller Memory limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.memory",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "rke2-ingress-nginx-controller Ephemeral Storage limit is not set",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage",
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": " The pod does not have a matching NetworkPolicy",
            "description": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "remediation": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect.",
            "origin": "kube-score",
            "originId": "pod-networkpolicy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "rke2-ingress-nginx-controller The container is running with a low user ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "rke2-ingress-nginx-controller The container running with a low group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "rke2-ingress-nginx-controller CPU limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "rke2-ingress-nginx-controller Memory limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.memory",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "rke2-ingress-nginx-controller Ephemeral Storage limit is not set",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage",
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": " Container has the same readiness and liveness probe",
            "description": "Makes sure that all Pods have safe probe configurations",
            "remediation": "Using the same probe for liveness and readiness is very likely dangerous. Generally it's better to avoid the livenessProbe than re-using the readinessProbe.",
            "origin": "kube-score",
            "originId": "pod-probes",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "rke2-ingress-nginx-controller The pod has a container with a writable root filesystem",
            "description": "Makes sure that all pods have a security context with read only filesystem set",
            "remediation": "Set securityContext.readOnlyRootFilesystem to true",
            "origin": "kube-score",
            "originId": "container-security-context-readonlyrootfilesystem",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "rke2-ingress-nginx-controller ImagePullPolicy is not set to Always",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want.",
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": " Container has the same readiness and liveness probe",
            "description": "Makes sure that all Pods have safe probe configurations",
            "remediation": "Using the same probe for liveness and readiness is very likely dangerous. Generally it's better to avoid the livenessProbe than re-using the readinessProbe.",
            "origin": "kube-score",
            "originId": "pod-probes",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "rke2-ingress-nginx-controller ImagePullPolicy is not set to Always",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want.",
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "rke2-ingress-nginx-controller The pod has a container with a writable root filesystem",
            "description": "Makes sure that all pods have a security context with read only filesystem set",
            "remediation": "Set securityContext.readOnlyRootFilesystem to true",
            "origin": "kube-score",
            "originId": "container-security-context-readonlyrootfilesystem",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "rke2-ingress-nginx-controller CPU limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "rke2-ingress-nginx-controller Memory limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.memory",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "rke2-ingress-nginx-controller Ephemeral Storage limit is not set",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage",
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": " The pod does not have a matching NetworkPolicy",
            "description": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "remediation": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect.",
            "origin": "kube-score",
            "originId": "pod-networkpolicy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "rke2-ingress-nginx-controller The container is running with a low user ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "rke2-ingress-nginx-controller The container running with a low group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": " Container has the same readiness and liveness probe",
            "description": "Makes sure that all Pods have safe probe configurations",
            "remediation": "Using the same probe for liveness and readiness is very likely dangerous. Generally it's better to avoid the livenessProbe than re-using the readinessProbe.",
            "origin": "kube-score",
            "originId": "pod-probes",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "rke2-ingress-nginx-controller The pod has a container with a writable root filesystem",
            "description": "Makes sure that all pods have a security context with read only filesystem set",
            "remediation": "Set securityContext.readOnlyRootFilesystem to true",
            "origin": "kube-score",
            "originId": "container-security-context-readonlyrootfilesystem",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "rke2-ingress-nginx-controller ImagePullPolicy is not set to Always",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want.",
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": " The pod does not have a matching NetworkPolicy",
            "description": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "remediation": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect.",
            "origin": "kube-score",
            "originId": "pod-networkpolicy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "rke2-ingress-nginx-controller The container is running with a low user ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "rke2-ingress-nginx-controller The container running with a low group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "rke2-ingress-nginx-controller CPU limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "rke2-ingress-nginx-controller Memory limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.memory",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "rke2-ingress-nginx-controller Ephemeral Storage limit is not set",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage",
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": " Container has the same readiness and liveness probe",
            "description": "Makes sure that all Pods have safe probe configurations",
            "remediation": "Using the same probe for liveness and readiness is very likely dangerous. Generally it's better to avoid the livenessProbe than re-using the readinessProbe.",
            "origin": "kube-score",
            "originId": "pod-probes",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "rke2-ingress-nginx-controller ImagePullPolicy is not set to Always",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want.",
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "rke2-ingress-nginx-controller The pod has a container with a writable root filesystem",
            "description": "Makes sure that all pods have a security context with read only filesystem set",
            "remediation": "Set securityContext.readOnlyRootFilesystem to true",
            "origin": "kube-score",
            "originId": "container-security-context-readonlyrootfilesystem",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": " The pod does not have a matching NetworkPolicy",
            "description": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "remediation": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect.",
            "origin": "kube-score",
            "originId": "pod-networkpolicy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "rke2-ingress-nginx-controller The container is running with a low user ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "rke2-ingress-nginx-controller The container running with a low group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "rke2-ingress-nginx-controller CPU limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "rke2-ingress-nginx-controller Memory limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.memory",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "rke2-ingress-nginx-controller Ephemeral Storage limit is not set",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage",
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": " The pod does not have a matching NetworkPolicy",
            "description": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "remediation": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect.",
            "origin": "kube-score",
            "originId": "pod-networkpolicy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "rke2-ingress-nginx-controller The container is running with a low user ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "rke2-ingress-nginx-controller The container running with a low group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "rke2-ingress-nginx-controller CPU limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "rke2-ingress-nginx-controller Memory limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.memory",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "rke2-ingress-nginx-controller Ephemeral Storage limit is not set",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage",
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": " Container has the same readiness and liveness probe",
            "description": "Makes sure that all Pods have safe probe configurations",
            "remediation": "Using the same probe for liveness and readiness is very likely dangerous. Generally it's better to avoid the livenessProbe than re-using the readinessProbe.",
            "origin": "kube-score",
            "originId": "pod-probes",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "rke2-ingress-nginx-controller The pod has a container with a writable root filesystem",
            "description": "Makes sure that all pods have a security context with read only filesystem set",
            "remediation": "Set securityContext.readOnlyRootFilesystem to true",
            "origin": "kube-score",
            "originId": "container-security-context-readonlyrootfilesystem",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "rke2-ingress-nginx-controller ImagePullPolicy is not set to Always",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want.",
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          }
        ]
      },
      {
        "kind": "Deployment",
        "namespace": "kube-system",
        "name": "rke2-metrics-server",
        "checks": [
          {
            "severity": "MEDIUM",
            "title": "Seccomp policies disabled",
            "description": "A program inside the container can bypass Seccomp protection policies.",
            "remediation": "Specify seccomp either by annotation or by seccomp profile type having allowed values as per pod security standards",
            "origin": "trivy",
            "originId": "KSV104",
            "passed": false,
            "skipped": false,
            "skipReason": null
          }
        ]
      },
      {
        "kind": "Role",
        "namespace": "kube-system",
        "name": "rke2-ingress-nginx",
        "checks": [
          {
            "severity": "MEDIUM",
            "title": "Manage namespace secrets",
            "description": "Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.",
            "remediation": "Manage namespace secrets are not allowed. Remove resource 'secrets' from role",
            "origin": "trivy",
            "originId": "KSV113",
            "passed": false,
            "skipped": false,
            "skipReason": null
          }
        ]
      },
      {
        "kind": "Role",
        "namespace": "kube-system",
        "name": "system:controller:token-cleaner",
        "checks": [
          {
            "severity": "MEDIUM",
            "title": "Manage namespace secrets",
            "description": "Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.",
            "remediation": "Manage namespace secrets are not allowed. Remove resource 'secrets' from role",
            "origin": "trivy",
            "originId": "KSV113",
            "passed": false,
            "skipped": false,
            "skipReason": null
          }
        ]
      },
      {
        "kind": "Deployment",
        "namespace": "kube-system",
        "name": "rke2-coredns-rke2-coredns-autoscaler",
        "checks": [
          {
            "severity": "MEDIUM",
            "title": "Can elevate its own privileges",
            "description": "A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.",
            "remediation": "Set 'set containers[].securityContext.allowPrivilegeEscalation' to 'false'.",
            "origin": "trivy",
            "originId": "KSV001",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Runs as root user",
            "description": "Force the running image to run as a non-root user to ensure least privileges.",
            "remediation": "Set 'containers[].securityContext.runAsNonRoot' to true.",
            "origin": "trivy",
            "originId": "KSV012",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Seccomp policies disabled",
            "description": "A program inside the container can bypass Seccomp protection policies.",
            "remediation": "Specify seccomp either by annotation or by seccomp profile type having allowed values as per pod security standards",
            "origin": "trivy",
            "originId": "KSV104",
            "passed": false,
            "skipped": false,
            "skipReason": null
          }
        ]
      },
      {
        "kind": "Job",
        "namespace": "kube-system",
        "name": "helm-install-rke2-coredns",
        "checks": [
          {
            "severity": "MEDIUM",
            "title": "Can elevate its own privileges",
            "description": "A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.",
            "remediation": "Set 'set containers[].securityContext.allowPrivilegeEscalation' to 'false'.",
            "origin": "trivy",
            "originId": "KSV001",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "Access to host network",
            "description": "Sharing the host’s network namespace permits processes in the pod to communicate with processes bound to the host’s loopback adapter.",
            "remediation": "Do not set 'spec.template.spec.hostNetwork' to true.",
            "origin": "trivy",
            "originId": "KSV009",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Runs as root user",
            "description": "Force the running image to run as a non-root user to ensure least privileges.",
            "remediation": "Set 'containers[].securityContext.runAsNonRoot' to true.",
            "origin": "trivy",
            "originId": "KSV012",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Seccomp policies disabled",
            "description": "A program inside the container can bypass Seccomp protection policies.",
            "remediation": "Specify seccomp either by annotation or by seccomp profile type having allowed values as per pod security standards",
            "origin": "trivy",
            "originId": "KSV104",
            "passed": false,
            "skipped": false,
            "skipReason": null
          }
        ]
      },
      {
        "kind": "DaemonSet",
        "namespace": "kube-system",
        "name": "rke2-canal",
        "checks": [
          {
            "severity": "MEDIUM",
            "title": "Can elevate its own privileges",
            "description": "A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.",
            "remediation": "Set 'set containers[].securityContext.allowPrivilegeEscalation' to 'false'.",
            "origin": "trivy",
            "originId": "KSV001",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Can elevate its own privileges",
            "description": "A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.",
            "remediation": "Set 'set containers[].securityContext.allowPrivilegeEscalation' to 'false'.",
            "origin": "trivy",
            "originId": "KSV001",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Can elevate its own privileges",
            "description": "A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.",
            "remediation": "Set 'set containers[].securityContext.allowPrivilegeEscalation' to 'false'.",
            "origin": "trivy",
            "originId": "KSV001",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Can elevate its own privileges",
            "description": "A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.",
            "remediation": "Set 'set containers[].securityContext.allowPrivilegeEscalation' to 'false'.",
            "origin": "trivy",
            "originId": "KSV001",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "Access to host network",
            "description": "Sharing the host’s network namespace permits processes in the pod to communicate with processes bound to the host’s loopback adapter.",
            "remediation": "Do not set 'spec.template.spec.hostNetwork' to true.",
            "origin": "trivy",
            "originId": "KSV009",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Runs as root user",
            "description": "Force the running image to run as a non-root user to ensure least privileges.",
            "remediation": "Set 'containers[].securityContext.runAsNonRoot' to true.",
            "origin": "trivy",
            "originId": "KSV012",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Runs as root user",
            "description": "Force the running image to run as a non-root user to ensure least privileges.",
            "remediation": "Set 'containers[].securityContext.runAsNonRoot' to true.",
            "origin": "trivy",
            "originId": "KSV012",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Runs as root user",
            "description": "Force the running image to run as a non-root user to ensure least privileges.",
            "remediation": "Set 'containers[].securityContext.runAsNonRoot' to true.",
            "origin": "trivy",
            "originId": "KSV012",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Runs as root user",
            "description": "Force the running image to run as a non-root user to ensure least privileges.",
            "remediation": "Set 'containers[].securityContext.runAsNonRoot' to true.",
            "origin": "trivy",
            "originId": "KSV012",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "Privileged",
            "description": "Privileged containers share namespaces with the host system and do not offer any security. They should be used exclusively for system containers that require high privileges.",
            "remediation": "Change 'containers[].securityContext.privileged' to 'false'.",
            "origin": "trivy",
            "originId": "KSV017",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "Privileged",
            "description": "Privileged containers share namespaces with the host system and do not offer any security. They should be used exclusively for system containers that require high privileges.",
            "remediation": "Change 'containers[].securityContext.privileged' to 'false'.",
            "origin": "trivy",
            "originId": "KSV017",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "Privileged",
            "description": "Privileged containers share namespaces with the host system and do not offer any security. They should be used exclusively for system containers that require high privileges.",
            "remediation": "Change 'containers[].securityContext.privileged' to 'false'.",
            "origin": "trivy",
            "originId": "KSV017",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "Privileged",
            "description": "Privileged containers share namespaces with the host system and do not offer any security. They should be used exclusively for system containers that require high privileges.",
            "remediation": "Change 'containers[].securityContext.privileged' to 'false'.",
            "origin": "trivy",
            "originId": "KSV017",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "hostPath volumes mounted",
            "description": "According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.",
            "remediation": "Do not set 'spec.volumes[*].hostPath'.",
            "origin": "trivy",
            "originId": "KSV023",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Seccomp policies disabled",
            "description": "A program inside the container can bypass Seccomp protection policies.",
            "remediation": "Specify seccomp either by annotation or by seccomp profile type having allowed values as per pod security standards",
            "origin": "trivy",
            "originId": "KSV104",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Seccomp policies disabled",
            "description": "A program inside the container can bypass Seccomp protection policies.",
            "remediation": "Specify seccomp either by annotation or by seccomp profile type having allowed values as per pod security standards",
            "origin": "trivy",
            "originId": "KSV104",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Seccomp policies disabled",
            "description": "A program inside the container can bypass Seccomp protection policies.",
            "remediation": "Specify seccomp either by annotation or by seccomp profile type having allowed values as per pod security standards",
            "origin": "trivy",
            "originId": "KSV104",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Seccomp policies disabled",
            "description": "A program inside the container can bypass Seccomp protection policies.",
            "remediation": "Specify seccomp either by annotation or by seccomp profile type having allowed values as per pod security standards",
            "origin": "trivy",
            "originId": "KSV104",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": " The pod does not have a matching NetworkPolicy",
            "description": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "remediation": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect.",
            "origin": "kube-score",
            "originId": "pod-networkpolicy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "install-cni The container is running with a low user ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "install-cni The container running with a low group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "flexvol-driver The container is running with a low user ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "flexvol-driver The container running with a low group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "calico-node The container is running with a low user ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "calico-node The container running with a low group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-flannel The container is running with a low user ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-flannel The container running with a low group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "install-cni CPU limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "install-cni Memory limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.memory",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "install-cni CPU request is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource requests are recommended to make sure that the application can start and run without crashing. Set resources.requests.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "install-cni Memory request is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource requests are recommended to make sure that the application can start and run without crashing. Set resources.requests.memory",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "flexvol-driver CPU limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "flexvol-driver Memory limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.memory",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "flexvol-driver CPU request is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource requests are recommended to make sure that the application can start and run without crashing. Set resources.requests.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "flexvol-driver Memory request is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource requests are recommended to make sure that the application can start and run without crashing. Set resources.requests.memory",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "calico-node CPU limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "calico-node Memory limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.memory",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "calico-node Memory request is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource requests are recommended to make sure that the application can start and run without crashing. Set resources.requests.memory",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-flannel CPU limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-flannel Memory limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.memory",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-flannel CPU request is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource requests are recommended to make sure that the application can start and run without crashing. Set resources.requests.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-flannel Memory request is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource requests are recommended to make sure that the application can start and run without crashing. Set resources.requests.memory",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "install-cni Ephemeral Storage limit is not set",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage",
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "flexvol-driver Ephemeral Storage limit is not set",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage",
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "calico-node Ephemeral Storage limit is not set",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage",
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-flannel Ephemeral Storage limit is not set",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage",
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "CRITICAL",
            "title": " The pod is not targeted by a service, skipping probe checks.",
            "description": "Makes sure that all Pods have safe probe configurations",
            "remediation": "",
            "origin": "kube-score",
            "originId": "pod-probes",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "install-cni The container is privileged",
            "description": "Makes sure that all pods have a unprivileged security context set",
            "remediation": "Set securityContext.privileged to false. Privileged containers can access all devices on the host, and grants almost the same access as non-containerized processes on the host.",
            "origin": "kube-score",
            "originId": "container-security-context-privileged",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "flexvol-driver The container is privileged",
            "description": "Makes sure that all pods have a unprivileged security context set",
            "remediation": "Set securityContext.privileged to false. Privileged containers can access all devices on the host, and grants almost the same access as non-containerized processes on the host.",
            "origin": "kube-score",
            "originId": "container-security-context-privileged",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "calico-node The container is privileged",
            "description": "Makes sure that all pods have a unprivileged security context set",
            "remediation": "Set securityContext.privileged to false. Privileged containers can access all devices on the host, and grants almost the same access as non-containerized processes on the host.",
            "origin": "kube-score",
            "originId": "container-security-context-privileged",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-flannel The container is privileged",
            "description": "Makes sure that all pods have a unprivileged security context set",
            "remediation": "Set securityContext.privileged to false. Privileged containers can access all devices on the host, and grants almost the same access as non-containerized processes on the host.",
            "origin": "kube-score",
            "originId": "container-security-context-privileged",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "install-cni The pod has a container with a writable root filesystem",
            "description": "Makes sure that all pods have a security context with read only filesystem set",
            "remediation": "Set securityContext.readOnlyRootFilesystem to true",
            "origin": "kube-score",
            "originId": "container-security-context-readonlyrootfilesystem",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "flexvol-driver The pod has a container with a writable root filesystem",
            "description": "Makes sure that all pods have a security context with read only filesystem set",
            "remediation": "Set securityContext.readOnlyRootFilesystem to true",
            "origin": "kube-score",
            "originId": "container-security-context-readonlyrootfilesystem",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "calico-node The pod has a container with a writable root filesystem",
            "description": "Makes sure that all pods have a security context with read only filesystem set",
            "remediation": "Set securityContext.readOnlyRootFilesystem to true",
            "origin": "kube-score",
            "originId": "container-security-context-readonlyrootfilesystem",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-flannel The pod has a container with a writable root filesystem",
            "description": "Makes sure that all pods have a security context with read only filesystem set",
            "remediation": "Set securityContext.readOnlyRootFilesystem to true",
            "origin": "kube-score",
            "originId": "container-security-context-readonlyrootfilesystem",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "install-cni ImagePullPolicy is not set to Always",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want.",
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "flexvol-driver ImagePullPolicy is not set to Always",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want.",
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "calico-node ImagePullPolicy is not set to Always",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want.",
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-flannel ImagePullPolicy is not set to Always",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want.",
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": " The pod does not have a matching NetworkPolicy",
            "description": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "remediation": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect.",
            "origin": "kube-score",
            "originId": "pod-networkpolicy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "install-cni The container is running with a low user ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "install-cni The container running with a low group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "flexvol-driver The container is running with a low user ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "flexvol-driver The container running with a low group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "calico-node The container is running with a low user ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "calico-node The container running with a low group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-flannel The container is running with a low user ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-flannel The container running with a low group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "install-cni CPU limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "install-cni Memory limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.memory",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "install-cni CPU request is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource requests are recommended to make sure that the application can start and run without crashing. Set resources.requests.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "install-cni Memory request is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource requests are recommended to make sure that the application can start and run without crashing. Set resources.requests.memory",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "flexvol-driver CPU limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "flexvol-driver Memory limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.memory",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "flexvol-driver CPU request is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource requests are recommended to make sure that the application can start and run without crashing. Set resources.requests.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "flexvol-driver Memory request is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource requests are recommended to make sure that the application can start and run without crashing. Set resources.requests.memory",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "calico-node CPU limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "calico-node Memory limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.memory",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "calico-node Memory request is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource requests are recommended to make sure that the application can start and run without crashing. Set resources.requests.memory",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-flannel CPU limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-flannel Memory limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.memory",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-flannel CPU request is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource requests are recommended to make sure that the application can start and run without crashing. Set resources.requests.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-flannel Memory request is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource requests are recommended to make sure that the application can start and run without crashing. Set resources.requests.memory",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "install-cni Ephemeral Storage limit is not set",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage",
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "flexvol-driver Ephemeral Storage limit is not set",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage",
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "calico-node Ephemeral Storage limit is not set",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage",
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-flannel Ephemeral Storage limit is not set",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage",
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "CRITICAL",
            "title": " The pod is not targeted by a service, skipping probe checks.",
            "description": "Makes sure that all Pods have safe probe configurations",
            "remediation": "",
            "origin": "kube-score",
            "originId": "pod-probes",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "install-cni The pod has a container with a writable root filesystem",
            "description": "Makes sure that all pods have a security context with read only filesystem set",
            "remediation": "Set securityContext.readOnlyRootFilesystem to true",
            "origin": "kube-score",
            "originId": "container-security-context-readonlyrootfilesystem",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "flexvol-driver The pod has a container with a writable root filesystem",
            "description": "Makes sure that all pods have a security context with read only filesystem set",
            "remediation": "Set securityContext.readOnlyRootFilesystem to true",
            "origin": "kube-score",
            "originId": "container-security-context-readonlyrootfilesystem",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "calico-node The pod has a container with a writable root filesystem",
            "description": "Makes sure that all pods have a security context with read only filesystem set",
            "remediation": "Set securityContext.readOnlyRootFilesystem to true",
            "origin": "kube-score",
            "originId": "container-security-context-readonlyrootfilesystem",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-flannel The pod has a container with a writable root filesystem",
            "description": "Makes sure that all pods have a security context with read only filesystem set",
            "remediation": "Set securityContext.readOnlyRootFilesystem to true",
            "origin": "kube-score",
            "originId": "container-security-context-readonlyrootfilesystem",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "install-cni ImagePullPolicy is not set to Always",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want.",
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "flexvol-driver ImagePullPolicy is not set to Always",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want.",
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "calico-node ImagePullPolicy is not set to Always",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want.",
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-flannel ImagePullPolicy is not set to Always",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want.",
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "install-cni The container is privileged",
            "description": "Makes sure that all pods have a unprivileged security context set",
            "remediation": "Set securityContext.privileged to false. Privileged containers can access all devices on the host, and grants almost the same access as non-containerized processes on the host.",
            "origin": "kube-score",
            "originId": "container-security-context-privileged",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "flexvol-driver The container is privileged",
            "description": "Makes sure that all pods have a unprivileged security context set",
            "remediation": "Set securityContext.privileged to false. Privileged containers can access all devices on the host, and grants almost the same access as non-containerized processes on the host.",
            "origin": "kube-score",
            "originId": "container-security-context-privileged",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "calico-node The container is privileged",
            "description": "Makes sure that all pods have a unprivileged security context set",
            "remediation": "Set securityContext.privileged to false. Privileged containers can access all devices on the host, and grants almost the same access as non-containerized processes on the host.",
            "origin": "kube-score",
            "originId": "container-security-context-privileged",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-flannel The container is privileged",
            "description": "Makes sure that all pods have a unprivileged security context set",
            "remediation": "Set securityContext.privileged to false. Privileged containers can access all devices on the host, and grants almost the same access as non-containerized processes on the host.",
            "origin": "kube-score",
            "originId": "container-security-context-privileged",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "install-cni The container is running with a low user ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "install-cni The container running with a low group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "flexvol-driver The container is running with a low user ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "flexvol-driver The container running with a low group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "calico-node The container is running with a low user ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "calico-node The container running with a low group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-flannel The container is running with a low user ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-flannel The container running with a low group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "install-cni CPU limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "install-cni Memory limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.memory",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "install-cni CPU request is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource requests are recommended to make sure that the application can start and run without crashing. Set resources.requests.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "install-cni Memory request is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource requests are recommended to make sure that the application can start and run without crashing. Set resources.requests.memory",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "flexvol-driver CPU limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "flexvol-driver Memory limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.memory",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "flexvol-driver CPU request is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource requests are recommended to make sure that the application can start and run without crashing. Set resources.requests.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "flexvol-driver Memory request is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource requests are recommended to make sure that the application can start and run without crashing. Set resources.requests.memory",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "calico-node CPU limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "calico-node Memory limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.memory",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "calico-node Memory request is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource requests are recommended to make sure that the application can start and run without crashing. Set resources.requests.memory",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-flannel CPU limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-flannel Memory limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.memory",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-flannel CPU request is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource requests are recommended to make sure that the application can start and run without crashing. Set resources.requests.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-flannel Memory request is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource requests are recommended to make sure that the application can start and run without crashing. Set resources.requests.memory",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "install-cni Ephemeral Storage limit is not set",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage",
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "flexvol-driver Ephemeral Storage limit is not set",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage",
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "calico-node Ephemeral Storage limit is not set",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage",
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-flannel Ephemeral Storage limit is not set",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage",
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": " The pod does not have a matching NetworkPolicy",
            "description": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "remediation": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect.",
            "origin": "kube-score",
            "originId": "pod-networkpolicy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "CRITICAL",
            "title": " The pod is not targeted by a service, skipping probe checks.",
            "description": "Makes sure that all Pods have safe probe configurations",
            "remediation": "",
            "origin": "kube-score",
            "originId": "pod-probes",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "install-cni ImagePullPolicy is not set to Always",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want.",
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "flexvol-driver ImagePullPolicy is not set to Always",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want.",
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "calico-node ImagePullPolicy is not set to Always",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want.",
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-flannel ImagePullPolicy is not set to Always",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want.",
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "install-cni The container is privileged",
            "description": "Makes sure that all pods have a unprivileged security context set",
            "remediation": "Set securityContext.privileged to false. Privileged containers can access all devices on the host, and grants almost the same access as non-containerized processes on the host.",
            "origin": "kube-score",
            "originId": "container-security-context-privileged",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "flexvol-driver The container is privileged",
            "description": "Makes sure that all pods have a unprivileged security context set",
            "remediation": "Set securityContext.privileged to false. Privileged containers can access all devices on the host, and grants almost the same access as non-containerized processes on the host.",
            "origin": "kube-score",
            "originId": "container-security-context-privileged",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "calico-node The container is privileged",
            "description": "Makes sure that all pods have a unprivileged security context set",
            "remediation": "Set securityContext.privileged to false. Privileged containers can access all devices on the host, and grants almost the same access as non-containerized processes on the host.",
            "origin": "kube-score",
            "originId": "container-security-context-privileged",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-flannel The container is privileged",
            "description": "Makes sure that all pods have a unprivileged security context set",
            "remediation": "Set securityContext.privileged to false. Privileged containers can access all devices on the host, and grants almost the same access as non-containerized processes on the host.",
            "origin": "kube-score",
            "originId": "container-security-context-privileged",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "install-cni The pod has a container with a writable root filesystem",
            "description": "Makes sure that all pods have a security context with read only filesystem set",
            "remediation": "Set securityContext.readOnlyRootFilesystem to true",
            "origin": "kube-score",
            "originId": "container-security-context-readonlyrootfilesystem",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "flexvol-driver The pod has a container with a writable root filesystem",
            "description": "Makes sure that all pods have a security context with read only filesystem set",
            "remediation": "Set securityContext.readOnlyRootFilesystem to true",
            "origin": "kube-score",
            "originId": "container-security-context-readonlyrootfilesystem",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "calico-node The pod has a container with a writable root filesystem",
            "description": "Makes sure that all pods have a security context with read only filesystem set",
            "remediation": "Set securityContext.readOnlyRootFilesystem to true",
            "origin": "kube-score",
            "originId": "container-security-context-readonlyrootfilesystem",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-flannel The pod has a container with a writable root filesystem",
            "description": "Makes sure that all pods have a security context with read only filesystem set",
            "remediation": "Set securityContext.readOnlyRootFilesystem to true",
            "origin": "kube-score",
            "originId": "container-security-context-readonlyrootfilesystem",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "install-cni ImagePullPolicy is not set to Always",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want.",
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "flexvol-driver ImagePullPolicy is not set to Always",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want.",
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "calico-node ImagePullPolicy is not set to Always",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want.",
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-flannel ImagePullPolicy is not set to Always",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want.",
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "install-cni The container is privileged",
            "description": "Makes sure that all pods have a unprivileged security context set",
            "remediation": "Set securityContext.privileged to false. Privileged containers can access all devices on the host, and grants almost the same access as non-containerized processes on the host.",
            "origin": "kube-score",
            "originId": "container-security-context-privileged",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "flexvol-driver The container is privileged",
            "description": "Makes sure that all pods have a unprivileged security context set",
            "remediation": "Set securityContext.privileged to false. Privileged containers can access all devices on the host, and grants almost the same access as non-containerized processes on the host.",
            "origin": "kube-score",
            "originId": "container-security-context-privileged",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "calico-node The container is privileged",
            "description": "Makes sure that all pods have a unprivileged security context set",
            "remediation": "Set securityContext.privileged to false. Privileged containers can access all devices on the host, and grants almost the same access as non-containerized processes on the host.",
            "origin": "kube-score",
            "originId": "container-security-context-privileged",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-flannel The container is privileged",
            "description": "Makes sure that all pods have a unprivileged security context set",
            "remediation": "Set securityContext.privileged to false. Privileged containers can access all devices on the host, and grants almost the same access as non-containerized processes on the host.",
            "origin": "kube-score",
            "originId": "container-security-context-privileged",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "install-cni The pod has a container with a writable root filesystem",
            "description": "Makes sure that all pods have a security context with read only filesystem set",
            "remediation": "Set securityContext.readOnlyRootFilesystem to true",
            "origin": "kube-score",
            "originId": "container-security-context-readonlyrootfilesystem",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "flexvol-driver The pod has a container with a writable root filesystem",
            "description": "Makes sure that all pods have a security context with read only filesystem set",
            "remediation": "Set securityContext.readOnlyRootFilesystem to true",
            "origin": "kube-score",
            "originId": "container-security-context-readonlyrootfilesystem",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "calico-node The pod has a container with a writable root filesystem",
            "description": "Makes sure that all pods have a security context with read only filesystem set",
            "remediation": "Set securityContext.readOnlyRootFilesystem to true",
            "origin": "kube-score",
            "originId": "container-security-context-readonlyrootfilesystem",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-flannel The pod has a container with a writable root filesystem",
            "description": "Makes sure that all pods have a security context with read only filesystem set",
            "remediation": "Set securityContext.readOnlyRootFilesystem to true",
            "origin": "kube-score",
            "originId": "container-security-context-readonlyrootfilesystem",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "install-cni CPU limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "install-cni Memory limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.memory",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "install-cni CPU request is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource requests are recommended to make sure that the application can start and run without crashing. Set resources.requests.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "install-cni Memory request is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource requests are recommended to make sure that the application can start and run without crashing. Set resources.requests.memory",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "flexvol-driver CPU limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "flexvol-driver Memory limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.memory",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "flexvol-driver CPU request is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource requests are recommended to make sure that the application can start and run without crashing. Set resources.requests.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "flexvol-driver Memory request is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource requests are recommended to make sure that the application can start and run without crashing. Set resources.requests.memory",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "calico-node CPU limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "calico-node Memory limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.memory",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "calico-node Memory request is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource requests are recommended to make sure that the application can start and run without crashing. Set resources.requests.memory",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-flannel CPU limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-flannel Memory limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.memory",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-flannel CPU request is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource requests are recommended to make sure that the application can start and run without crashing. Set resources.requests.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-flannel Memory request is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource requests are recommended to make sure that the application can start and run without crashing. Set resources.requests.memory",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "install-cni Ephemeral Storage limit is not set",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage",
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "flexvol-driver Ephemeral Storage limit is not set",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage",
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "calico-node Ephemeral Storage limit is not set",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage",
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-flannel Ephemeral Storage limit is not set",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage",
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": " The pod does not have a matching NetworkPolicy",
            "description": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "remediation": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect.",
            "origin": "kube-score",
            "originId": "pod-networkpolicy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "install-cni The container is running with a low user ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "install-cni The container running with a low group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "flexvol-driver The container is running with a low user ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "flexvol-driver The container running with a low group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "calico-node The container is running with a low user ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "calico-node The container running with a low group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-flannel The container is running with a low user ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-flannel The container running with a low group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "CRITICAL",
            "title": " The pod is not targeted by a service, skipping probe checks.",
            "description": "Makes sure that all Pods have safe probe configurations",
            "remediation": "",
            "origin": "kube-score",
            "originId": "pod-probes",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": " The pod does not have a matching NetworkPolicy",
            "description": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "remediation": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect.",
            "origin": "kube-score",
            "originId": "pod-networkpolicy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "install-cni The container is running with a low user ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "install-cni The container running with a low group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "flexvol-driver The container is running with a low user ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "flexvol-driver The container running with a low group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "calico-node The container is running with a low user ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "calico-node The container running with a low group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-flannel The container is running with a low user ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-flannel The container running with a low group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "install-cni CPU limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "install-cni Memory limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.memory",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "install-cni CPU request is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource requests are recommended to make sure that the application can start and run without crashing. Set resources.requests.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "install-cni Memory request is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource requests are recommended to make sure that the application can start and run without crashing. Set resources.requests.memory",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "flexvol-driver CPU limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "flexvol-driver Memory limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.memory",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "flexvol-driver CPU request is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource requests are recommended to make sure that the application can start and run without crashing. Set resources.requests.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "flexvol-driver Memory request is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource requests are recommended to make sure that the application can start and run without crashing. Set resources.requests.memory",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "calico-node CPU limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "calico-node Memory limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.memory",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "calico-node Memory request is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource requests are recommended to make sure that the application can start and run without crashing. Set resources.requests.memory",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-flannel CPU limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-flannel Memory limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.memory",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-flannel CPU request is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource requests are recommended to make sure that the application can start and run without crashing. Set resources.requests.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-flannel Memory request is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource requests are recommended to make sure that the application can start and run without crashing. Set resources.requests.memory",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "install-cni Ephemeral Storage limit is not set",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage",
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "flexvol-driver Ephemeral Storage limit is not set",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage",
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "calico-node Ephemeral Storage limit is not set",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage",
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-flannel Ephemeral Storage limit is not set",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage",
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "CRITICAL",
            "title": " The pod is not targeted by a service, skipping probe checks.",
            "description": "Makes sure that all Pods have safe probe configurations",
            "remediation": "",
            "origin": "kube-score",
            "originId": "pod-probes",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "install-cni The container is privileged",
            "description": "Makes sure that all pods have a unprivileged security context set",
            "remediation": "Set securityContext.privileged to false. Privileged containers can access all devices on the host, and grants almost the same access as non-containerized processes on the host.",
            "origin": "kube-score",
            "originId": "container-security-context-privileged",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "flexvol-driver The container is privileged",
            "description": "Makes sure that all pods have a unprivileged security context set",
            "remediation": "Set securityContext.privileged to false. Privileged containers can access all devices on the host, and grants almost the same access as non-containerized processes on the host.",
            "origin": "kube-score",
            "originId": "container-security-context-privileged",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "calico-node The container is privileged",
            "description": "Makes sure that all pods have a unprivileged security context set",
            "remediation": "Set securityContext.privileged to false. Privileged containers can access all devices on the host, and grants almost the same access as non-containerized processes on the host.",
            "origin": "kube-score",
            "originId": "container-security-context-privileged",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-flannel The container is privileged",
            "description": "Makes sure that all pods have a unprivileged security context set",
            "remediation": "Set securityContext.privileged to false. Privileged containers can access all devices on the host, and grants almost the same access as non-containerized processes on the host.",
            "origin": "kube-score",
            "originId": "container-security-context-privileged",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "install-cni The pod has a container with a writable root filesystem",
            "description": "Makes sure that all pods have a security context with read only filesystem set",
            "remediation": "Set securityContext.readOnlyRootFilesystem to true",
            "origin": "kube-score",
            "originId": "container-security-context-readonlyrootfilesystem",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "flexvol-driver The pod has a container with a writable root filesystem",
            "description": "Makes sure that all pods have a security context with read only filesystem set",
            "remediation": "Set securityContext.readOnlyRootFilesystem to true",
            "origin": "kube-score",
            "originId": "container-security-context-readonlyrootfilesystem",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "calico-node The pod has a container with a writable root filesystem",
            "description": "Makes sure that all pods have a security context with read only filesystem set",
            "remediation": "Set securityContext.readOnlyRootFilesystem to true",
            "origin": "kube-score",
            "originId": "container-security-context-readonlyrootfilesystem",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-flannel The pod has a container with a writable root filesystem",
            "description": "Makes sure that all pods have a security context with read only filesystem set",
            "remediation": "Set securityContext.readOnlyRootFilesystem to true",
            "origin": "kube-score",
            "originId": "container-security-context-readonlyrootfilesystem",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "install-cni ImagePullPolicy is not set to Always",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want.",
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "flexvol-driver ImagePullPolicy is not set to Always",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want.",
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "calico-node ImagePullPolicy is not set to Always",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want.",
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-flannel ImagePullPolicy is not set to Always",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want.",
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": " The pod does not have a matching NetworkPolicy",
            "description": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "remediation": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect.",
            "origin": "kube-score",
            "originId": "pod-networkpolicy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "install-cni The container is running with a low user ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "install-cni The container running with a low group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "flexvol-driver The container is running with a low user ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "flexvol-driver The container running with a low group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "calico-node The container is running with a low user ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "calico-node The container running with a low group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-flannel The container is running with a low user ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-flannel The container running with a low group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "install-cni CPU limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "install-cni Memory limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.memory",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "install-cni CPU request is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource requests are recommended to make sure that the application can start and run without crashing. Set resources.requests.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "install-cni Memory request is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource requests are recommended to make sure that the application can start and run without crashing. Set resources.requests.memory",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "flexvol-driver CPU limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "flexvol-driver Memory limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.memory",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "flexvol-driver CPU request is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource requests are recommended to make sure that the application can start and run without crashing. Set resources.requests.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "flexvol-driver Memory request is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource requests are recommended to make sure that the application can start and run without crashing. Set resources.requests.memory",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "calico-node CPU limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "calico-node Memory limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.memory",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "calico-node Memory request is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource requests are recommended to make sure that the application can start and run without crashing. Set resources.requests.memory",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-flannel CPU limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-flannel Memory limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.memory",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-flannel CPU request is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource requests are recommended to make sure that the application can start and run without crashing. Set resources.requests.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-flannel Memory request is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource requests are recommended to make sure that the application can start and run without crashing. Set resources.requests.memory",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "install-cni Ephemeral Storage limit is not set",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage",
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "flexvol-driver Ephemeral Storage limit is not set",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage",
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "calico-node Ephemeral Storage limit is not set",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage",
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-flannel Ephemeral Storage limit is not set",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage",
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "CRITICAL",
            "title": " The pod is not targeted by a service, skipping probe checks.",
            "description": "Makes sure that all Pods have safe probe configurations",
            "remediation": "",
            "origin": "kube-score",
            "originId": "pod-probes",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "install-cni The pod has a container with a writable root filesystem",
            "description": "Makes sure that all pods have a security context with read only filesystem set",
            "remediation": "Set securityContext.readOnlyRootFilesystem to true",
            "origin": "kube-score",
            "originId": "container-security-context-readonlyrootfilesystem",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "flexvol-driver The pod has a container with a writable root filesystem",
            "description": "Makes sure that all pods have a security context with read only filesystem set",
            "remediation": "Set securityContext.readOnlyRootFilesystem to true",
            "origin": "kube-score",
            "originId": "container-security-context-readonlyrootfilesystem",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "calico-node The pod has a container with a writable root filesystem",
            "description": "Makes sure that all pods have a security context with read only filesystem set",
            "remediation": "Set securityContext.readOnlyRootFilesystem to true",
            "origin": "kube-score",
            "originId": "container-security-context-readonlyrootfilesystem",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-flannel The pod has a container with a writable root filesystem",
            "description": "Makes sure that all pods have a security context with read only filesystem set",
            "remediation": "Set securityContext.readOnlyRootFilesystem to true",
            "origin": "kube-score",
            "originId": "container-security-context-readonlyrootfilesystem",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "install-cni ImagePullPolicy is not set to Always",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want.",
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "flexvol-driver ImagePullPolicy is not set to Always",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want.",
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "calico-node ImagePullPolicy is not set to Always",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want.",
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-flannel ImagePullPolicy is not set to Always",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want.",
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "install-cni The container is privileged",
            "description": "Makes sure that all pods have a unprivileged security context set",
            "remediation": "Set securityContext.privileged to false. Privileged containers can access all devices on the host, and grants almost the same access as non-containerized processes on the host.",
            "origin": "kube-score",
            "originId": "container-security-context-privileged",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "flexvol-driver The container is privileged",
            "description": "Makes sure that all pods have a unprivileged security context set",
            "remediation": "Set securityContext.privileged to false. Privileged containers can access all devices on the host, and grants almost the same access as non-containerized processes on the host.",
            "origin": "kube-score",
            "originId": "container-security-context-privileged",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "calico-node The container is privileged",
            "description": "Makes sure that all pods have a unprivileged security context set",
            "remediation": "Set securityContext.privileged to false. Privileged containers can access all devices on the host, and grants almost the same access as non-containerized processes on the host.",
            "origin": "kube-score",
            "originId": "container-security-context-privileged",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-flannel The container is privileged",
            "description": "Makes sure that all pods have a unprivileged security context set",
            "remediation": "Set securityContext.privileged to false. Privileged containers can access all devices on the host, and grants almost the same access as non-containerized processes on the host.",
            "origin": "kube-score",
            "originId": "container-security-context-privileged",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "install-cni The container is running with a low user ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "install-cni The container running with a low group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "flexvol-driver The container is running with a low user ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "flexvol-driver The container running with a low group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "calico-node The container is running with a low user ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "calico-node The container running with a low group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-flannel The container is running with a low user ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-flannel The container running with a low group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "install-cni CPU limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "install-cni Memory limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.memory",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "install-cni CPU request is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource requests are recommended to make sure that the application can start and run without crashing. Set resources.requests.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "install-cni Memory request is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource requests are recommended to make sure that the application can start and run without crashing. Set resources.requests.memory",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "flexvol-driver CPU limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "flexvol-driver Memory limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.memory",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "flexvol-driver CPU request is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource requests are recommended to make sure that the application can start and run without crashing. Set resources.requests.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "flexvol-driver Memory request is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource requests are recommended to make sure that the application can start and run without crashing. Set resources.requests.memory",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "calico-node CPU limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "calico-node Memory limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.memory",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "calico-node Memory request is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource requests are recommended to make sure that the application can start and run without crashing. Set resources.requests.memory",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-flannel CPU limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-flannel Memory limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.memory",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-flannel CPU request is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource requests are recommended to make sure that the application can start and run without crashing. Set resources.requests.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-flannel Memory request is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource requests are recommended to make sure that the application can start and run without crashing. Set resources.requests.memory",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "install-cni Ephemeral Storage limit is not set",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage",
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "flexvol-driver Ephemeral Storage limit is not set",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage",
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "calico-node Ephemeral Storage limit is not set",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage",
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-flannel Ephemeral Storage limit is not set",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage",
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": " The pod does not have a matching NetworkPolicy",
            "description": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "remediation": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect.",
            "origin": "kube-score",
            "originId": "pod-networkpolicy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "CRITICAL",
            "title": " The pod is not targeted by a service, skipping probe checks.",
            "description": "Makes sure that all Pods have safe probe configurations",
            "remediation": "",
            "origin": "kube-score",
            "originId": "pod-probes",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "install-cni ImagePullPolicy is not set to Always",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want.",
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "flexvol-driver ImagePullPolicy is not set to Always",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want.",
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "calico-node ImagePullPolicy is not set to Always",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want.",
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-flannel ImagePullPolicy is not set to Always",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want.",
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "install-cni The container is privileged",
            "description": "Makes sure that all pods have a unprivileged security context set",
            "remediation": "Set securityContext.privileged to false. Privileged containers can access all devices on the host, and grants almost the same access as non-containerized processes on the host.",
            "origin": "kube-score",
            "originId": "container-security-context-privileged",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "flexvol-driver The container is privileged",
            "description": "Makes sure that all pods have a unprivileged security context set",
            "remediation": "Set securityContext.privileged to false. Privileged containers can access all devices on the host, and grants almost the same access as non-containerized processes on the host.",
            "origin": "kube-score",
            "originId": "container-security-context-privileged",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "calico-node The container is privileged",
            "description": "Makes sure that all pods have a unprivileged security context set",
            "remediation": "Set securityContext.privileged to false. Privileged containers can access all devices on the host, and grants almost the same access as non-containerized processes on the host.",
            "origin": "kube-score",
            "originId": "container-security-context-privileged",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-flannel The container is privileged",
            "description": "Makes sure that all pods have a unprivileged security context set",
            "remediation": "Set securityContext.privileged to false. Privileged containers can access all devices on the host, and grants almost the same access as non-containerized processes on the host.",
            "origin": "kube-score",
            "originId": "container-security-context-privileged",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "install-cni The pod has a container with a writable root filesystem",
            "description": "Makes sure that all pods have a security context with read only filesystem set",
            "remediation": "Set securityContext.readOnlyRootFilesystem to true",
            "origin": "kube-score",
            "originId": "container-security-context-readonlyrootfilesystem",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "flexvol-driver The pod has a container with a writable root filesystem",
            "description": "Makes sure that all pods have a security context with read only filesystem set",
            "remediation": "Set securityContext.readOnlyRootFilesystem to true",
            "origin": "kube-score",
            "originId": "container-security-context-readonlyrootfilesystem",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "calico-node The pod has a container with a writable root filesystem",
            "description": "Makes sure that all pods have a security context with read only filesystem set",
            "remediation": "Set securityContext.readOnlyRootFilesystem to true",
            "origin": "kube-score",
            "originId": "container-security-context-readonlyrootfilesystem",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-flannel The pod has a container with a writable root filesystem",
            "description": "Makes sure that all pods have a security context with read only filesystem set",
            "remediation": "Set securityContext.readOnlyRootFilesystem to true",
            "origin": "kube-score",
            "originId": "container-security-context-readonlyrootfilesystem",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "install-cni ImagePullPolicy is not set to Always",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want.",
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "flexvol-driver ImagePullPolicy is not set to Always",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want.",
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "calico-node ImagePullPolicy is not set to Always",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want.",
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-flannel ImagePullPolicy is not set to Always",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want.",
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "install-cni The container is privileged",
            "description": "Makes sure that all pods have a unprivileged security context set",
            "remediation": "Set securityContext.privileged to false. Privileged containers can access all devices on the host, and grants almost the same access as non-containerized processes on the host.",
            "origin": "kube-score",
            "originId": "container-security-context-privileged",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "flexvol-driver The container is privileged",
            "description": "Makes sure that all pods have a unprivileged security context set",
            "remediation": "Set securityContext.privileged to false. Privileged containers can access all devices on the host, and grants almost the same access as non-containerized processes on the host.",
            "origin": "kube-score",
            "originId": "container-security-context-privileged",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "calico-node The container is privileged",
            "description": "Makes sure that all pods have a unprivileged security context set",
            "remediation": "Set securityContext.privileged to false. Privileged containers can access all devices on the host, and grants almost the same access as non-containerized processes on the host.",
            "origin": "kube-score",
            "originId": "container-security-context-privileged",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-flannel The container is privileged",
            "description": "Makes sure that all pods have a unprivileged security context set",
            "remediation": "Set securityContext.privileged to false. Privileged containers can access all devices on the host, and grants almost the same access as non-containerized processes on the host.",
            "origin": "kube-score",
            "originId": "container-security-context-privileged",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "install-cni The pod has a container with a writable root filesystem",
            "description": "Makes sure that all pods have a security context with read only filesystem set",
            "remediation": "Set securityContext.readOnlyRootFilesystem to true",
            "origin": "kube-score",
            "originId": "container-security-context-readonlyrootfilesystem",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "flexvol-driver The pod has a container with a writable root filesystem",
            "description": "Makes sure that all pods have a security context with read only filesystem set",
            "remediation": "Set securityContext.readOnlyRootFilesystem to true",
            "origin": "kube-score",
            "originId": "container-security-context-readonlyrootfilesystem",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "calico-node The pod has a container with a writable root filesystem",
            "description": "Makes sure that all pods have a security context with read only filesystem set",
            "remediation": "Set securityContext.readOnlyRootFilesystem to true",
            "origin": "kube-score",
            "originId": "container-security-context-readonlyrootfilesystem",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-flannel The pod has a container with a writable root filesystem",
            "description": "Makes sure that all pods have a security context with read only filesystem set",
            "remediation": "Set securityContext.readOnlyRootFilesystem to true",
            "origin": "kube-score",
            "originId": "container-security-context-readonlyrootfilesystem",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "install-cni CPU limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "install-cni Memory limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.memory",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "install-cni CPU request is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource requests are recommended to make sure that the application can start and run without crashing. Set resources.requests.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "install-cni Memory request is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource requests are recommended to make sure that the application can start and run without crashing. Set resources.requests.memory",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "flexvol-driver CPU limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "flexvol-driver Memory limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.memory",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "flexvol-driver CPU request is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource requests are recommended to make sure that the application can start and run without crashing. Set resources.requests.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "flexvol-driver Memory request is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource requests are recommended to make sure that the application can start and run without crashing. Set resources.requests.memory",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "calico-node CPU limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "calico-node Memory limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.memory",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "calico-node Memory request is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource requests are recommended to make sure that the application can start and run without crashing. Set resources.requests.memory",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-flannel CPU limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-flannel Memory limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.memory",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-flannel CPU request is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource requests are recommended to make sure that the application can start and run without crashing. Set resources.requests.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-flannel Memory request is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource requests are recommended to make sure that the application can start and run without crashing. Set resources.requests.memory",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "install-cni Ephemeral Storage limit is not set",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage",
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "flexvol-driver Ephemeral Storage limit is not set",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage",
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "calico-node Ephemeral Storage limit is not set",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage",
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-flannel Ephemeral Storage limit is not set",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage",
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": " The pod does not have a matching NetworkPolicy",
            "description": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "remediation": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect.",
            "origin": "kube-score",
            "originId": "pod-networkpolicy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "install-cni The container is running with a low user ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "install-cni The container running with a low group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "flexvol-driver The container is running with a low user ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "flexvol-driver The container running with a low group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "calico-node The container is running with a low user ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "calico-node The container running with a low group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-flannel The container is running with a low user ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-flannel The container running with a low group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "CRITICAL",
            "title": " The pod is not targeted by a service, skipping probe checks.",
            "description": "Makes sure that all Pods have safe probe configurations",
            "remediation": "",
            "origin": "kube-score",
            "originId": "pod-probes",
            "passed": false,
            "skipped": false,
            "skipReason": null
          }
        ]
      },
      {
        "kind": "Pod",
        "namespace": "kube-system",
        "name": "etcd-ubuntu1",
        "checks": [
          {
            "severity": "MEDIUM",
            "title": "Can elevate its own privileges",
            "description": "A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.",
            "remediation": "Set 'set containers[].securityContext.allowPrivilegeEscalation' to 'false'.",
            "origin": "trivy",
            "originId": "KSV001",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "Access to host network",
            "description": "Sharing the host’s network namespace permits processes in the pod to communicate with processes bound to the host’s loopback adapter.",
            "remediation": "Do not set 'spec.template.spec.hostNetwork' to true.",
            "origin": "trivy",
            "originId": "KSV009",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Runs as root user",
            "description": "Force the running image to run as a non-root user to ensure least privileges.",
            "remediation": "Set 'containers[].securityContext.runAsNonRoot' to true.",
            "origin": "trivy",
            "originId": "KSV012",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "hostPath volumes mounted",
            "description": "According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.",
            "remediation": "Do not set 'spec.volumes[*].hostPath'.",
            "origin": "trivy",
            "originId": "KSV023",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Seccomp policies disabled",
            "description": "A program inside the container can bypass Seccomp protection policies.",
            "remediation": "Specify seccomp either by annotation or by seccomp profile type having allowed values as per pod security standards",
            "origin": "trivy",
            "originId": "KSV104",
            "passed": false,
            "skipped": false,
            "skipReason": null
          }
        ]
      },
      {
        "kind": "Deployment",
        "namespace": "kube-system",
        "name": "rke2-coredns-rke2-coredns",
        "checks": [
          {
            "severity": "MEDIUM",
            "title": "Can elevate its own privileges",
            "description": "A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.",
            "remediation": "Set 'set containers[].securityContext.allowPrivilegeEscalation' to 'false'.",
            "origin": "trivy",
            "originId": "KSV001",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Runs as root user",
            "description": "Force the running image to run as a non-root user to ensure least privileges.",
            "remediation": "Set 'containers[].securityContext.runAsNonRoot' to true.",
            "origin": "trivy",
            "originId": "KSV012",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Specific capabilities added",
            "description": "According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.",
            "remediation": "Do not set spec.containers[*].securityContext.capabilities.add and spec.initContainers[*].securityContext.capabilities.add.",
            "origin": "trivy",
            "originId": "KSV022",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Seccomp policies disabled",
            "description": "A program inside the container can bypass Seccomp protection policies.",
            "remediation": "Specify seccomp either by annotation or by seccomp profile type having allowed values as per pod security standards",
            "origin": "trivy",
            "originId": "KSV104",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "Prevent binding to privileged ports",
            "description": "The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.",
            "remediation": "Do not map the container ports to privileged host ports when starting a container.",
            "origin": "trivy",
            "originId": "KSV117",
            "passed": false,
            "skipped": false,
            "skipReason": null
          }
        ]
      },
      {
        "kind": "Pod",
        "namespace": "kube-system",
        "name": "kube-proxy-ubuntu1",
        "checks": [
          {
            "severity": "MEDIUM",
            "title": "Can elevate its own privileges",
            "description": "A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.",
            "remediation": "Set 'set containers[].securityContext.allowPrivilegeEscalation' to 'false'.",
            "origin": "trivy",
            "originId": "KSV001",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "Access to host network",
            "description": "Sharing the host’s network namespace permits processes in the pod to communicate with processes bound to the host’s loopback adapter.",
            "remediation": "Do not set 'spec.template.spec.hostNetwork' to true.",
            "origin": "trivy",
            "originId": "KSV009",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Runs as root user",
            "description": "Force the running image to run as a non-root user to ensure least privileges.",
            "remediation": "Set 'containers[].securityContext.runAsNonRoot' to true.",
            "origin": "trivy",
            "originId": "KSV012",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "Privileged",
            "description": "Privileged containers share namespaces with the host system and do not offer any security. They should be used exclusively for system containers that require high privileges.",
            "remediation": "Change 'containers[].securityContext.privileged' to 'false'.",
            "origin": "trivy",
            "originId": "KSV017",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "hostPath volumes mounted",
            "description": "According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.",
            "remediation": "Do not set 'spec.volumes[*].hostPath'.",
            "origin": "trivy",
            "originId": "KSV023",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Seccomp policies disabled",
            "description": "A program inside the container can bypass Seccomp protection policies.",
            "remediation": "Specify seccomp either by annotation or by seccomp profile type having allowed values as per pod security standards",
            "origin": "trivy",
            "originId": "KSV104",
            "passed": false,
            "skipped": false,
            "skipReason": null
          }
        ]
      },
      {
        "kind": "ConfigMap",
        "namespace": "kube-system",
        "name": "extension-apiserver-authentication",
        "checks": [
          {
            "severity": "MEDIUM",
            "title": "ConfigMap with sensitive content",
            "description": "Storing sensitive content such as usernames and email addresses in configMaps is unsafe",
            "remediation": "Remove sensitive content from configMap data value",
            "origin": "trivy",
            "originId": "AVD-KSV-01010",
            "passed": false,
            "skipped": false,
            "skipReason": null
          }
        ]
      },
      {
        "kind": "Pod",
        "namespace": "kube-system",
        "name": "kube-proxy-ubuntu2",
        "checks": [
          {
            "severity": "MEDIUM",
            "title": "Can elevate its own privileges",
            "description": "A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.",
            "remediation": "Set 'set containers[].securityContext.allowPrivilegeEscalation' to 'false'.",
            "origin": "trivy",
            "originId": "KSV001",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "Access to host network",
            "description": "Sharing the host’s network namespace permits processes in the pod to communicate with processes bound to the host’s loopback adapter.",
            "remediation": "Do not set 'spec.template.spec.hostNetwork' to true.",
            "origin": "trivy",
            "originId": "KSV009",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Runs as root user",
            "description": "Force the running image to run as a non-root user to ensure least privileges.",
            "remediation": "Set 'containers[].securityContext.runAsNonRoot' to true.",
            "origin": "trivy",
            "originId": "KSV012",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "Privileged",
            "description": "Privileged containers share namespaces with the host system and do not offer any security. They should be used exclusively for system containers that require high privileges.",
            "remediation": "Change 'containers[].securityContext.privileged' to 'false'.",
            "origin": "trivy",
            "originId": "KSV017",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "hostPath volumes mounted",
            "description": "According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.",
            "remediation": "Do not set 'spec.volumes[*].hostPath'.",
            "origin": "trivy",
            "originId": "KSV023",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Seccomp policies disabled",
            "description": "A program inside the container can bypass Seccomp protection policies.",
            "remediation": "Specify seccomp either by annotation or by seccomp profile type having allowed values as per pod security standards",
            "origin": "trivy",
            "originId": "KSV104",
            "passed": false,
            "skipped": false,
            "skipReason": null
          }
        ]
      },
      {
        "kind": "Role",
        "namespace": "kube-system",
        "name": "system:controller:cloud-provider",
        "checks": [
          {
            "severity": "MEDIUM",
            "title": "Manage configmaps",
            "description": "Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.",
            "remediation": "Remove write permission verbs for resource 'configmaps'",
            "origin": "trivy",
            "originId": "KSV049",
            "passed": false,
            "skipped": false,
            "skipReason": null
          }
        ]
      },
      {
        "kind": "ConfigMap",
        "namespace": "kube-system",
        "name": "chart-content-rke2-snapshot-controller",
        "checks": [
          {
            "severity": "MEDIUM",
            "title": "ConfigMap with sensitive content",
            "description": "Storing sensitive content such as usernames and email addresses in configMaps is unsafe",
            "remediation": "Remove sensitive content from configMap data value",
            "origin": "trivy",
            "originId": "AVD-KSV-01010",
            "passed": false,
            "skipped": false,
            "skipReason": null
          }
        ]
      },
      {
        "kind": "Deployment",
        "namespace": "kube-system",
        "name": "rke2-snapshot-controller",
        "checks": [
          {
            "severity": "MEDIUM",
            "title": "Can elevate its own privileges",
            "description": "A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.",
            "remediation": "Set 'set containers[].securityContext.allowPrivilegeEscalation' to 'false'.",
            "origin": "trivy",
            "originId": "KSV001",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Seccomp policies disabled",
            "description": "A program inside the container can bypass Seccomp protection policies.",
            "remediation": "Specify seccomp either by annotation or by seccomp profile type having allowed values as per pod security standards",
            "origin": "trivy",
            "originId": "KSV104",
            "passed": false,
            "skipped": false,
            "skipReason": null
          }
        ]
      },
      {
        "kind": "ReplicaSet",
        "namespace": "kube-system",
        "name": "rke2-snapshot-controller-59cc9cd8f4",
        "checks": [
          {
            "severity": "MEDIUM",
            "title": "rke2-snapshot-controller ImagePullPolicy is not set to Always",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want.",
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "rke2-snapshot-controller Ephemeral Storage limit is not set",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage",
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": " The pod does not have a matching NetworkPolicy",
            "description": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "remediation": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect.",
            "origin": "kube-score",
            "originId": "pod-networkpolicy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "rke2-snapshot-controller The container is running with a low user ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "rke2-snapshot-controller The container running with a low group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "rke2-snapshot-controller CPU limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "rke2-snapshot-controller Memory limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.memory",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "rke2-snapshot-controller CPU request is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource requests are recommended to make sure that the application can start and run without crashing. Set resources.requests.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "rke2-snapshot-controller Memory request is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource requests are recommended to make sure that the application can start and run without crashing. Set resources.requests.memory",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "CRITICAL",
            "title": " The pod is not targeted by a service, skipping probe checks.",
            "description": "Makes sure that all Pods have safe probe configurations",
            "remediation": "",
            "origin": "kube-score",
            "originId": "pod-probes",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "rke2-snapshot-controller CPU limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "rke2-snapshot-controller Memory limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.memory",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "rke2-snapshot-controller CPU request is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource requests are recommended to make sure that the application can start and run without crashing. Set resources.requests.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "rke2-snapshot-controller Memory request is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource requests are recommended to make sure that the application can start and run without crashing. Set resources.requests.memory",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "rke2-snapshot-controller Ephemeral Storage limit is not set",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage",
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": " The pod does not have a matching NetworkPolicy",
            "description": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "remediation": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect.",
            "origin": "kube-score",
            "originId": "pod-networkpolicy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "rke2-snapshot-controller The container is running with a low user ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "rke2-snapshot-controller The container running with a low group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "CRITICAL",
            "title": " The pod is not targeted by a service, skipping probe checks.",
            "description": "Makes sure that all Pods have safe probe configurations",
            "remediation": "",
            "origin": "kube-score",
            "originId": "pod-probes",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "rke2-snapshot-controller ImagePullPolicy is not set to Always",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want.",
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          }
        ]
      },
      {
        "kind": "Node",
        "namespace": "kube-system",
        "name": "ubuntu2",
        "checks": [
          {
            "severity": "MEDIUM",
            "title": " The pod does not have a matching NetworkPolicy",
            "description": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "remediation": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect.",
            "origin": "kube-score",
            "originId": "pod-networkpolicy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-proxy The container is running with a low user ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-proxy The container running with a low group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-proxy CPU limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-proxy Memory limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.memory",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-proxy Ephemeral Storage limit is not set",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage",
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "CRITICAL",
            "title": " The pod is not targeted by a service, skipping probe checks.",
            "description": "Makes sure that all Pods have safe probe configurations",
            "remediation": "",
            "origin": "kube-score",
            "originId": "pod-probes",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-proxy The container is privileged",
            "description": "Makes sure that all pods have a unprivileged security context set",
            "remediation": "Set securityContext.privileged to false. Privileged containers can access all devices on the host, and grants almost the same access as non-containerized processes on the host.",
            "origin": "kube-score",
            "originId": "container-security-context-privileged",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-proxy The pod has a container with a writable root filesystem",
            "description": "Makes sure that all pods have a security context with read only filesystem set",
            "remediation": "Set securityContext.readOnlyRootFilesystem to true",
            "origin": "kube-score",
            "originId": "container-security-context-readonlyrootfilesystem",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-proxy ImagePullPolicy is not set to Always",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want.",
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "CRITICAL",
            "title": " The pod is not targeted by a service, skipping probe checks.",
            "description": "Makes sure that all Pods have safe probe configurations",
            "remediation": "",
            "origin": "kube-score",
            "originId": "pod-probes",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-proxy ImagePullPolicy is not set to Always",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want.",
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-proxy The container is privileged",
            "description": "Makes sure that all pods have a unprivileged security context set",
            "remediation": "Set securityContext.privileged to false. Privileged containers can access all devices on the host, and grants almost the same access as non-containerized processes on the host.",
            "origin": "kube-score",
            "originId": "container-security-context-privileged",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-proxy The pod has a container with a writable root filesystem",
            "description": "Makes sure that all pods have a security context with read only filesystem set",
            "remediation": "Set securityContext.readOnlyRootFilesystem to true",
            "origin": "kube-score",
            "originId": "container-security-context-readonlyrootfilesystem",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-proxy CPU limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-proxy Memory limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.memory",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-proxy Ephemeral Storage limit is not set",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage",
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": " The pod does not have a matching NetworkPolicy",
            "description": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "remediation": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect.",
            "origin": "kube-score",
            "originId": "pod-networkpolicy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-proxy The container is running with a low user ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-proxy The container running with a low group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          }
        ]
      },
      {
        "kind": "ReplicaSet",
        "namespace": "kube-system",
        "name": "rke2-coredns-rke2-coredns-6b795db654",
        "checks": [
          {
            "severity": "MEDIUM",
            "title": "coredns Ephemeral Storage limit is not set",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage",
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": " The pod does not have a matching NetworkPolicy",
            "description": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "remediation": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect.",
            "origin": "kube-score",
            "originId": "pod-networkpolicy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "coredns The container is running with a low user ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "coredns The container running with a low group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "coredns ImagePullPolicy is not set to Always",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want.",
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "coredns The pod has a container with a writable root filesystem",
            "description": "Makes sure that all pods have a security context with read only filesystem set",
            "remediation": "Set securityContext.readOnlyRootFilesystem to true",
            "origin": "kube-score",
            "originId": "container-security-context-readonlyrootfilesystem",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "coredns Ephemeral Storage limit is not set",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage",
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": " The pod does not have a matching NetworkPolicy",
            "description": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "remediation": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect.",
            "origin": "kube-score",
            "originId": "pod-networkpolicy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "coredns The container is running with a low user ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "coredns The container running with a low group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "coredns The pod has a container with a writable root filesystem",
            "description": "Makes sure that all pods have a security context with read only filesystem set",
            "remediation": "Set securityContext.readOnlyRootFilesystem to true",
            "origin": "kube-score",
            "originId": "container-security-context-readonlyrootfilesystem",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "coredns ImagePullPolicy is not set to Always",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want.",
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "coredns Ephemeral Storage limit is not set",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage",
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": " The pod does not have a matching NetworkPolicy",
            "description": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "remediation": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect.",
            "origin": "kube-score",
            "originId": "pod-networkpolicy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "coredns The container is running with a low user ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "coredns The container running with a low group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "coredns ImagePullPolicy is not set to Always",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want.",
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "coredns The pod has a container with a writable root filesystem",
            "description": "Makes sure that all pods have a security context with read only filesystem set",
            "remediation": "Set securityContext.readOnlyRootFilesystem to true",
            "origin": "kube-score",
            "originId": "container-security-context-readonlyrootfilesystem",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "coredns ImagePullPolicy is not set to Always",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want.",
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "coredns The pod has a container with a writable root filesystem",
            "description": "Makes sure that all pods have a security context with read only filesystem set",
            "remediation": "Set securityContext.readOnlyRootFilesystem to true",
            "origin": "kube-score",
            "originId": "container-security-context-readonlyrootfilesystem",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "coredns Ephemeral Storage limit is not set",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage",
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": " The pod does not have a matching NetworkPolicy",
            "description": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "remediation": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect.",
            "origin": "kube-score",
            "originId": "pod-networkpolicy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "coredns The container is running with a low user ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "coredns The container running with a low group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          }
        ]
      },
      {
        "kind": "Node",
        "namespace": "kube-system",
        "name": "ubuntu1",
        "checks": [
          {
            "severity": "MEDIUM",
            "title": "cloud-controller-manager ImagePullPolicy is not set to Always",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want.",
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "cloud-controller-manager The pod has a container with a writable root filesystem",
            "description": "Makes sure that all pods have a security context with read only filesystem set",
            "remediation": "Set securityContext.readOnlyRootFilesystem to true",
            "origin": "kube-score",
            "originId": "container-security-context-readonlyrootfilesystem",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "cloud-controller-manager CPU limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "cloud-controller-manager Memory limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.memory",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "cloud-controller-manager Ephemeral Storage limit is not set",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage",
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": " The pod does not have a matching NetworkPolicy",
            "description": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "remediation": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect.",
            "origin": "kube-score",
            "originId": "pod-networkpolicy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "cloud-controller-manager The container is running with a low user ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "cloud-controller-manager The container running with a low group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "CRITICAL",
            "title": " The pod is not targeted by a service, skipping probe checks.",
            "description": "Makes sure that all Pods have safe probe configurations",
            "remediation": "",
            "origin": "kube-score",
            "originId": "pod-probes",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "cloud-controller-manager Ephemeral Storage limit is not set",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage",
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": " The pod does not have a matching NetworkPolicy",
            "description": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "remediation": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect.",
            "origin": "kube-score",
            "originId": "pod-networkpolicy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "cloud-controller-manager The container is running with a low user ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "cloud-controller-manager The container running with a low group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "cloud-controller-manager CPU limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "cloud-controller-manager Memory limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.memory",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "CRITICAL",
            "title": " The pod is not targeted by a service, skipping probe checks.",
            "description": "Makes sure that all Pods have safe probe configurations",
            "remediation": "",
            "origin": "kube-score",
            "originId": "pod-probes",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "cloud-controller-manager ImagePullPolicy is not set to Always",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want.",
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "cloud-controller-manager The pod has a container with a writable root filesystem",
            "description": "Makes sure that all pods have a security context with read only filesystem set",
            "remediation": "Set securityContext.readOnlyRootFilesystem to true",
            "origin": "kube-score",
            "originId": "container-security-context-readonlyrootfilesystem",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-proxy ImagePullPolicy is not set to Always",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want.",
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-proxy The container is privileged",
            "description": "Makes sure that all pods have a unprivileged security context set",
            "remediation": "Set securityContext.privileged to false. Privileged containers can access all devices on the host, and grants almost the same access as non-containerized processes on the host.",
            "origin": "kube-score",
            "originId": "container-security-context-privileged",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-proxy The pod has a container with a writable root filesystem",
            "description": "Makes sure that all pods have a security context with read only filesystem set",
            "remediation": "Set securityContext.readOnlyRootFilesystem to true",
            "origin": "kube-score",
            "originId": "container-security-context-readonlyrootfilesystem",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": " The pod does not have a matching NetworkPolicy",
            "description": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "remediation": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect.",
            "origin": "kube-score",
            "originId": "pod-networkpolicy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-proxy The container is running with a low user ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-proxy The container running with a low group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-proxy CPU limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-proxy Memory limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.memory",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-proxy Ephemeral Storage limit is not set",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage",
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "CRITICAL",
            "title": " The pod is not targeted by a service, skipping probe checks.",
            "description": "Makes sure that all Pods have safe probe configurations",
            "remediation": "",
            "origin": "kube-score",
            "originId": "pod-probes",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": " The pod does not have a matching NetworkPolicy",
            "description": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "remediation": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect.",
            "origin": "kube-score",
            "originId": "pod-networkpolicy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-proxy The container is running with a low user ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-proxy The container running with a low group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-proxy CPU limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-proxy Memory limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.memory",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-proxy Ephemeral Storage limit is not set",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage",
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "CRITICAL",
            "title": " The pod is not targeted by a service, skipping probe checks.",
            "description": "Makes sure that all Pods have safe probe configurations",
            "remediation": "",
            "origin": "kube-score",
            "originId": "pod-probes",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-proxy The pod has a container with a writable root filesystem",
            "description": "Makes sure that all pods have a security context with read only filesystem set",
            "remediation": "Set securityContext.readOnlyRootFilesystem to true",
            "origin": "kube-score",
            "originId": "container-security-context-readonlyrootfilesystem",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-proxy ImagePullPolicy is not set to Always",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want.",
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-proxy The container is privileged",
            "description": "Makes sure that all pods have a unprivileged security context set",
            "remediation": "Set securityContext.privileged to false. Privileged containers can access all devices on the host, and grants almost the same access as non-containerized processes on the host.",
            "origin": "kube-score",
            "originId": "container-security-context-privileged",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "CRITICAL",
            "title": " The pod is not targeted by a service, skipping probe checks.",
            "description": "Makes sure that all Pods have safe probe configurations",
            "remediation": "",
            "origin": "kube-score",
            "originId": "pod-probes",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "etcd ImagePullPolicy is not set to Always",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want.",
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "etcd The pod has a container with a writable root filesystem",
            "description": "Makes sure that all pods have a security context with read only filesystem set",
            "remediation": "Set securityContext.readOnlyRootFilesystem to true",
            "origin": "kube-score",
            "originId": "container-security-context-readonlyrootfilesystem",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": " The pod does not have a matching NetworkPolicy",
            "description": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "remediation": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect.",
            "origin": "kube-score",
            "originId": "pod-networkpolicy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "etcd The container is running with a low user ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "etcd The container running with a low group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "etcd CPU limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "etcd Memory limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.memory",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "etcd Ephemeral Storage limit is not set",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage",
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "etcd CPU limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "etcd Memory limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.memory",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "etcd Ephemeral Storage limit is not set",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage",
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": " The pod does not have a matching NetworkPolicy",
            "description": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "remediation": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect.",
            "origin": "kube-score",
            "originId": "pod-networkpolicy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "etcd The container is running with a low user ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "etcd The container running with a low group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "CRITICAL",
            "title": " The pod is not targeted by a service, skipping probe checks.",
            "description": "Makes sure that all Pods have safe probe configurations",
            "remediation": "",
            "origin": "kube-score",
            "originId": "pod-probes",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "etcd ImagePullPolicy is not set to Always",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want.",
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "etcd The pod has a container with a writable root filesystem",
            "description": "Makes sure that all pods have a security context with read only filesystem set",
            "remediation": "Set securityContext.readOnlyRootFilesystem to true",
            "origin": "kube-score",
            "originId": "container-security-context-readonlyrootfilesystem",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-scheduler The pod has a container with a writable root filesystem",
            "description": "Makes sure that all pods have a security context with read only filesystem set",
            "remediation": "Set securityContext.readOnlyRootFilesystem to true",
            "origin": "kube-score",
            "originId": "container-security-context-readonlyrootfilesystem",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-scheduler ImagePullPolicy is not set to Always",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want.",
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": " The pod does not have a matching NetworkPolicy",
            "description": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "remediation": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect.",
            "origin": "kube-score",
            "originId": "pod-networkpolicy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-scheduler The container is running with a low user ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-scheduler The container running with a low group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-scheduler CPU limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-scheduler Memory limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.memory",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-scheduler Ephemeral Storage limit is not set",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage",
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "CRITICAL",
            "title": " The pod is not targeted by a service, skipping probe checks.",
            "description": "Makes sure that all Pods have safe probe configurations",
            "remediation": "",
            "origin": "kube-score",
            "originId": "pod-probes",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": " The pod does not have a matching NetworkPolicy",
            "description": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "remediation": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect.",
            "origin": "kube-score",
            "originId": "pod-networkpolicy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-scheduler The container is running with a low user ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-scheduler The container running with a low group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-scheduler CPU limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-scheduler Memory limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.memory",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-scheduler Ephemeral Storage limit is not set",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage",
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "CRITICAL",
            "title": " The pod is not targeted by a service, skipping probe checks.",
            "description": "Makes sure that all Pods have safe probe configurations",
            "remediation": "",
            "origin": "kube-score",
            "originId": "pod-probes",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-scheduler ImagePullPolicy is not set to Always",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want.",
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-scheduler The pod has a container with a writable root filesystem",
            "description": "Makes sure that all pods have a security context with read only filesystem set",
            "remediation": "Set securityContext.readOnlyRootFilesystem to true",
            "origin": "kube-score",
            "originId": "container-security-context-readonlyrootfilesystem",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "CRITICAL",
            "title": " The pod is not targeted by a service, skipping probe checks.",
            "description": "Makes sure that all Pods have safe probe configurations",
            "remediation": "",
            "origin": "kube-score",
            "originId": "pod-probes",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-apiserver ImagePullPolicy is not set to Always",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want.",
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-apiserver The pod has a container with a writable root filesystem",
            "description": "Makes sure that all pods have a security context with read only filesystem set",
            "remediation": "Set securityContext.readOnlyRootFilesystem to true",
            "origin": "kube-score",
            "originId": "container-security-context-readonlyrootfilesystem",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-apiserver CPU limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-apiserver Memory limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.memory",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-apiserver Ephemeral Storage limit is not set",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage",
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": " The pod does not have a matching NetworkPolicy",
            "description": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "remediation": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect.",
            "origin": "kube-score",
            "originId": "pod-networkpolicy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-apiserver The container is running with a low user ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-apiserver The container running with a low group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-apiserver CPU limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-apiserver Memory limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.memory",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-apiserver Ephemeral Storage limit is not set",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage",
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": " The pod does not have a matching NetworkPolicy",
            "description": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "remediation": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect.",
            "origin": "kube-score",
            "originId": "pod-networkpolicy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-apiserver The container is running with a low user ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-apiserver The container running with a low group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "CRITICAL",
            "title": " The pod is not targeted by a service, skipping probe checks.",
            "description": "Makes sure that all Pods have safe probe configurations",
            "remediation": "",
            "origin": "kube-score",
            "originId": "pod-probes",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-apiserver ImagePullPolicy is not set to Always",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want.",
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-apiserver The pod has a container with a writable root filesystem",
            "description": "Makes sure that all pods have a security context with read only filesystem set",
            "remediation": "Set securityContext.readOnlyRootFilesystem to true",
            "origin": "kube-score",
            "originId": "container-security-context-readonlyrootfilesystem",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": " The pod does not have a matching NetworkPolicy",
            "description": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "remediation": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect.",
            "origin": "kube-score",
            "originId": "pod-networkpolicy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-controller-manager The container is running with a low user ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-controller-manager The container running with a low group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-controller-manager CPU limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-controller-manager Memory limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.memory",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-controller-manager Ephemeral Storage limit is not set",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage",
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "CRITICAL",
            "title": " The pod is not targeted by a service, skipping probe checks.",
            "description": "Makes sure that all Pods have safe probe configurations",
            "remediation": "",
            "origin": "kube-score",
            "originId": "pod-probes",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-controller-manager ImagePullPolicy is not set to Always",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want.",
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-controller-manager The pod has a container with a writable root filesystem",
            "description": "Makes sure that all pods have a security context with read only filesystem set",
            "remediation": "Set securityContext.readOnlyRootFilesystem to true",
            "origin": "kube-score",
            "originId": "container-security-context-readonlyrootfilesystem",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-controller-manager ImagePullPolicy is not set to Always",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want.",
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-controller-manager The pod has a container with a writable root filesystem",
            "description": "Makes sure that all pods have a security context with read only filesystem set",
            "remediation": "Set securityContext.readOnlyRootFilesystem to true",
            "origin": "kube-score",
            "originId": "container-security-context-readonlyrootfilesystem",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-controller-manager CPU limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-controller-manager Memory limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.memory",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-controller-manager Ephemeral Storage limit is not set",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage",
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": " The pod does not have a matching NetworkPolicy",
            "description": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "remediation": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect.",
            "origin": "kube-score",
            "originId": "pod-networkpolicy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-controller-manager The container is running with a low user ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-controller-manager The container running with a low group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "CRITICAL",
            "title": " The pod is not targeted by a service, skipping probe checks.",
            "description": "Makes sure that all Pods have safe probe configurations",
            "remediation": "",
            "origin": "kube-score",
            "originId": "pod-probes",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-proxy ImagePullPolicy is not set to Always",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want.",
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-proxy The container is privileged",
            "description": "Makes sure that all pods have a unprivileged security context set",
            "remediation": "Set securityContext.privileged to false. Privileged containers can access all devices on the host, and grants almost the same access as non-containerized processes on the host.",
            "origin": "kube-score",
            "originId": "container-security-context-privileged",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-proxy The pod has a container with a writable root filesystem",
            "description": "Makes sure that all pods have a security context with read only filesystem set",
            "remediation": "Set securityContext.readOnlyRootFilesystem to true",
            "origin": "kube-score",
            "originId": "container-security-context-readonlyrootfilesystem",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": " The pod does not have a matching NetworkPolicy",
            "description": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "remediation": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect.",
            "origin": "kube-score",
            "originId": "pod-networkpolicy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-proxy The container is running with a low user ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-proxy The container running with a low group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-proxy CPU limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-proxy Memory limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.memory",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-proxy Ephemeral Storage limit is not set",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage",
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "CRITICAL",
            "title": " The pod is not targeted by a service, skipping probe checks.",
            "description": "Makes sure that all Pods have safe probe configurations",
            "remediation": "",
            "origin": "kube-score",
            "originId": "pod-probes",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": " The pod does not have a matching NetworkPolicy",
            "description": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "remediation": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect.",
            "origin": "kube-score",
            "originId": "pod-networkpolicy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-proxy The container is running with a low user ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-proxy The container running with a low group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-proxy CPU limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-proxy Memory limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.memory",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-proxy Ephemeral Storage limit is not set",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage",
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "CRITICAL",
            "title": " The pod is not targeted by a service, skipping probe checks.",
            "description": "Makes sure that all Pods have safe probe configurations",
            "remediation": "",
            "origin": "kube-score",
            "originId": "pod-probes",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-proxy The pod has a container with a writable root filesystem",
            "description": "Makes sure that all pods have a security context with read only filesystem set",
            "remediation": "Set securityContext.readOnlyRootFilesystem to true",
            "origin": "kube-score",
            "originId": "container-security-context-readonlyrootfilesystem",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-proxy ImagePullPolicy is not set to Always",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want.",
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-proxy The container is privileged",
            "description": "Makes sure that all pods have a unprivileged security context set",
            "remediation": "Set securityContext.privileged to false. Privileged containers can access all devices on the host, and grants almost the same access as non-containerized processes on the host.",
            "origin": "kube-score",
            "originId": "container-security-context-privileged",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "CRITICAL",
            "title": " The pod is not targeted by a service, skipping probe checks.",
            "description": "Makes sure that all Pods have safe probe configurations",
            "remediation": "",
            "origin": "kube-score",
            "originId": "pod-probes",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "etcd ImagePullPolicy is not set to Always",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want.",
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "etcd The pod has a container with a writable root filesystem",
            "description": "Makes sure that all pods have a security context with read only filesystem set",
            "remediation": "Set securityContext.readOnlyRootFilesystem to true",
            "origin": "kube-score",
            "originId": "container-security-context-readonlyrootfilesystem",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": " The pod does not have a matching NetworkPolicy",
            "description": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "remediation": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect.",
            "origin": "kube-score",
            "originId": "pod-networkpolicy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "etcd The container is running with a low user ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "etcd The container running with a low group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "etcd CPU limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "etcd Memory limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.memory",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "etcd Ephemeral Storage limit is not set",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage",
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "etcd CPU limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "etcd Memory limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.memory",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "etcd Ephemeral Storage limit is not set",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage",
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": " The pod does not have a matching NetworkPolicy",
            "description": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "remediation": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect.",
            "origin": "kube-score",
            "originId": "pod-networkpolicy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "etcd The container is running with a low user ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "etcd The container running with a low group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "CRITICAL",
            "title": " The pod is not targeted by a service, skipping probe checks.",
            "description": "Makes sure that all Pods have safe probe configurations",
            "remediation": "",
            "origin": "kube-score",
            "originId": "pod-probes",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "etcd ImagePullPolicy is not set to Always",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want.",
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "etcd The pod has a container with a writable root filesystem",
            "description": "Makes sure that all pods have a security context with read only filesystem set",
            "remediation": "Set securityContext.readOnlyRootFilesystem to true",
            "origin": "kube-score",
            "originId": "container-security-context-readonlyrootfilesystem",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-scheduler The pod has a container with a writable root filesystem",
            "description": "Makes sure that all pods have a security context with read only filesystem set",
            "remediation": "Set securityContext.readOnlyRootFilesystem to true",
            "origin": "kube-score",
            "originId": "container-security-context-readonlyrootfilesystem",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-scheduler ImagePullPolicy is not set to Always",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want.",
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": " The pod does not have a matching NetworkPolicy",
            "description": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "remediation": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect.",
            "origin": "kube-score",
            "originId": "pod-networkpolicy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-scheduler The container is running with a low user ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-scheduler The container running with a low group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-scheduler CPU limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-scheduler Memory limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.memory",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-scheduler Ephemeral Storage limit is not set",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage",
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "CRITICAL",
            "title": " The pod is not targeted by a service, skipping probe checks.",
            "description": "Makes sure that all Pods have safe probe configurations",
            "remediation": "",
            "origin": "kube-score",
            "originId": "pod-probes",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": " The pod does not have a matching NetworkPolicy",
            "description": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "remediation": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect.",
            "origin": "kube-score",
            "originId": "pod-networkpolicy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-scheduler The container is running with a low user ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-scheduler The container running with a low group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-scheduler CPU limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-scheduler Memory limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.memory",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-scheduler Ephemeral Storage limit is not set",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage",
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "CRITICAL",
            "title": " The pod is not targeted by a service, skipping probe checks.",
            "description": "Makes sure that all Pods have safe probe configurations",
            "remediation": "",
            "origin": "kube-score",
            "originId": "pod-probes",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-scheduler ImagePullPolicy is not set to Always",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want.",
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-scheduler The pod has a container with a writable root filesystem",
            "description": "Makes sure that all pods have a security context with read only filesystem set",
            "remediation": "Set securityContext.readOnlyRootFilesystem to true",
            "origin": "kube-score",
            "originId": "container-security-context-readonlyrootfilesystem",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "CRITICAL",
            "title": " The pod is not targeted by a service, skipping probe checks.",
            "description": "Makes sure that all Pods have safe probe configurations",
            "remediation": "",
            "origin": "kube-score",
            "originId": "pod-probes",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-apiserver ImagePullPolicy is not set to Always",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want.",
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-apiserver The pod has a container with a writable root filesystem",
            "description": "Makes sure that all pods have a security context with read only filesystem set",
            "remediation": "Set securityContext.readOnlyRootFilesystem to true",
            "origin": "kube-score",
            "originId": "container-security-context-readonlyrootfilesystem",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-apiserver CPU limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-apiserver Memory limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.memory",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-apiserver Ephemeral Storage limit is not set",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage",
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": " The pod does not have a matching NetworkPolicy",
            "description": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "remediation": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect.",
            "origin": "kube-score",
            "originId": "pod-networkpolicy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-apiserver The container is running with a low user ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-apiserver The container running with a low group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-apiserver CPU limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-apiserver Memory limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.memory",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-apiserver Ephemeral Storage limit is not set",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage",
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": " The pod does not have a matching NetworkPolicy",
            "description": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "remediation": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect.",
            "origin": "kube-score",
            "originId": "pod-networkpolicy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-apiserver The container is running with a low user ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-apiserver The container running with a low group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "CRITICAL",
            "title": " The pod is not targeted by a service, skipping probe checks.",
            "description": "Makes sure that all Pods have safe probe configurations",
            "remediation": "",
            "origin": "kube-score",
            "originId": "pod-probes",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-apiserver ImagePullPolicy is not set to Always",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want.",
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-apiserver The pod has a container with a writable root filesystem",
            "description": "Makes sure that all pods have a security context with read only filesystem set",
            "remediation": "Set securityContext.readOnlyRootFilesystem to true",
            "origin": "kube-score",
            "originId": "container-security-context-readonlyrootfilesystem",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": " The pod does not have a matching NetworkPolicy",
            "description": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "remediation": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect.",
            "origin": "kube-score",
            "originId": "pod-networkpolicy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-controller-manager The container is running with a low user ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-controller-manager The container running with a low group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-controller-manager CPU limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-controller-manager Memory limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.memory",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-controller-manager Ephemeral Storage limit is not set",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage",
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "CRITICAL",
            "title": " The pod is not targeted by a service, skipping probe checks.",
            "description": "Makes sure that all Pods have safe probe configurations",
            "remediation": "",
            "origin": "kube-score",
            "originId": "pod-probes",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-controller-manager ImagePullPolicy is not set to Always",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want.",
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-controller-manager The pod has a container with a writable root filesystem",
            "description": "Makes sure that all pods have a security context with read only filesystem set",
            "remediation": "Set securityContext.readOnlyRootFilesystem to true",
            "origin": "kube-score",
            "originId": "container-security-context-readonlyrootfilesystem",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-controller-manager ImagePullPolicy is not set to Always",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want.",
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-controller-manager The pod has a container with a writable root filesystem",
            "description": "Makes sure that all pods have a security context with read only filesystem set",
            "remediation": "Set securityContext.readOnlyRootFilesystem to true",
            "origin": "kube-score",
            "originId": "container-security-context-readonlyrootfilesystem",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-controller-manager CPU limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-controller-manager Memory limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.memory",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-controller-manager Ephemeral Storage limit is not set",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage",
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": " The pod does not have a matching NetworkPolicy",
            "description": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "remediation": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect.",
            "origin": "kube-score",
            "originId": "pod-networkpolicy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-controller-manager The container is running with a low user ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-controller-manager The container running with a low group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "CRITICAL",
            "title": " The pod is not targeted by a service, skipping probe checks.",
            "description": "Makes sure that all Pods have safe probe configurations",
            "remediation": "",
            "origin": "kube-score",
            "originId": "pod-probes",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-proxy ImagePullPolicy is not set to Always",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want.",
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-proxy The container is privileged",
            "description": "Makes sure that all pods have a unprivileged security context set",
            "remediation": "Set securityContext.privileged to false. Privileged containers can access all devices on the host, and grants almost the same access as non-containerized processes on the host.",
            "origin": "kube-score",
            "originId": "container-security-context-privileged",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-proxy The pod has a container with a writable root filesystem",
            "description": "Makes sure that all pods have a security context with read only filesystem set",
            "remediation": "Set securityContext.readOnlyRootFilesystem to true",
            "origin": "kube-score",
            "originId": "container-security-context-readonlyrootfilesystem",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": " The pod does not have a matching NetworkPolicy",
            "description": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "remediation": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect.",
            "origin": "kube-score",
            "originId": "pod-networkpolicy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-proxy The container is running with a low user ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-proxy The container running with a low group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-proxy CPU limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-proxy Memory limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.memory",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-proxy Ephemeral Storage limit is not set",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage",
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "CRITICAL",
            "title": " The pod is not targeted by a service, skipping probe checks.",
            "description": "Makes sure that all Pods have safe probe configurations",
            "remediation": "",
            "origin": "kube-score",
            "originId": "pod-probes",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": " The pod does not have a matching NetworkPolicy",
            "description": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "remediation": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect.",
            "origin": "kube-score",
            "originId": "pod-networkpolicy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-proxy The container is running with a low user ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-proxy The container running with a low group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-proxy CPU limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-proxy Memory limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.memory",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-proxy Ephemeral Storage limit is not set",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage",
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "CRITICAL",
            "title": " The pod is not targeted by a service, skipping probe checks.",
            "description": "Makes sure that all Pods have safe probe configurations",
            "remediation": "",
            "origin": "kube-score",
            "originId": "pod-probes",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-proxy The pod has a container with a writable root filesystem",
            "description": "Makes sure that all pods have a security context with read only filesystem set",
            "remediation": "Set securityContext.readOnlyRootFilesystem to true",
            "origin": "kube-score",
            "originId": "container-security-context-readonlyrootfilesystem",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-proxy ImagePullPolicy is not set to Always",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want.",
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-proxy The container is privileged",
            "description": "Makes sure that all pods have a unprivileged security context set",
            "remediation": "Set securityContext.privileged to false. Privileged containers can access all devices on the host, and grants almost the same access as non-containerized processes on the host.",
            "origin": "kube-score",
            "originId": "container-security-context-privileged",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "CRITICAL",
            "title": " The pod is not targeted by a service, skipping probe checks.",
            "description": "Makes sure that all Pods have safe probe configurations",
            "remediation": "",
            "origin": "kube-score",
            "originId": "pod-probes",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "etcd ImagePullPolicy is not set to Always",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want.",
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "etcd The pod has a container with a writable root filesystem",
            "description": "Makes sure that all pods have a security context with read only filesystem set",
            "remediation": "Set securityContext.readOnlyRootFilesystem to true",
            "origin": "kube-score",
            "originId": "container-security-context-readonlyrootfilesystem",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": " The pod does not have a matching NetworkPolicy",
            "description": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "remediation": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect.",
            "origin": "kube-score",
            "originId": "pod-networkpolicy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "etcd The container is running with a low user ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "etcd The container running with a low group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "etcd CPU limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "etcd Memory limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.memory",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "etcd Ephemeral Storage limit is not set",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage",
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "etcd CPU limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "etcd Memory limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.memory",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "etcd Ephemeral Storage limit is not set",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage",
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": " The pod does not have a matching NetworkPolicy",
            "description": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "remediation": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect.",
            "origin": "kube-score",
            "originId": "pod-networkpolicy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "etcd The container is running with a low user ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "etcd The container running with a low group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "CRITICAL",
            "title": " The pod is not targeted by a service, skipping probe checks.",
            "description": "Makes sure that all Pods have safe probe configurations",
            "remediation": "",
            "origin": "kube-score",
            "originId": "pod-probes",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "etcd ImagePullPolicy is not set to Always",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want.",
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "etcd The pod has a container with a writable root filesystem",
            "description": "Makes sure that all pods have a security context with read only filesystem set",
            "remediation": "Set securityContext.readOnlyRootFilesystem to true",
            "origin": "kube-score",
            "originId": "container-security-context-readonlyrootfilesystem",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-scheduler The pod has a container with a writable root filesystem",
            "description": "Makes sure that all pods have a security context with read only filesystem set",
            "remediation": "Set securityContext.readOnlyRootFilesystem to true",
            "origin": "kube-score",
            "originId": "container-security-context-readonlyrootfilesystem",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-scheduler ImagePullPolicy is not set to Always",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want.",
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": " The pod does not have a matching NetworkPolicy",
            "description": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "remediation": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect.",
            "origin": "kube-score",
            "originId": "pod-networkpolicy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-scheduler The container is running with a low user ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-scheduler The container running with a low group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-scheduler CPU limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-scheduler Memory limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.memory",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-scheduler Ephemeral Storage limit is not set",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage",
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "CRITICAL",
            "title": " The pod is not targeted by a service, skipping probe checks.",
            "description": "Makes sure that all Pods have safe probe configurations",
            "remediation": "",
            "origin": "kube-score",
            "originId": "pod-probes",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": " The pod does not have a matching NetworkPolicy",
            "description": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "remediation": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect.",
            "origin": "kube-score",
            "originId": "pod-networkpolicy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-scheduler The container is running with a low user ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-scheduler The container running with a low group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-scheduler CPU limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-scheduler Memory limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.memory",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-scheduler Ephemeral Storage limit is not set",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage",
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "CRITICAL",
            "title": " The pod is not targeted by a service, skipping probe checks.",
            "description": "Makes sure that all Pods have safe probe configurations",
            "remediation": "",
            "origin": "kube-score",
            "originId": "pod-probes",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-scheduler ImagePullPolicy is not set to Always",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want.",
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-scheduler The pod has a container with a writable root filesystem",
            "description": "Makes sure that all pods have a security context with read only filesystem set",
            "remediation": "Set securityContext.readOnlyRootFilesystem to true",
            "origin": "kube-score",
            "originId": "container-security-context-readonlyrootfilesystem",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "CRITICAL",
            "title": " The pod is not targeted by a service, skipping probe checks.",
            "description": "Makes sure that all Pods have safe probe configurations",
            "remediation": "",
            "origin": "kube-score",
            "originId": "pod-probes",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-apiserver ImagePullPolicy is not set to Always",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want.",
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-apiserver The pod has a container with a writable root filesystem",
            "description": "Makes sure that all pods have a security context with read only filesystem set",
            "remediation": "Set securityContext.readOnlyRootFilesystem to true",
            "origin": "kube-score",
            "originId": "container-security-context-readonlyrootfilesystem",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-apiserver CPU limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-apiserver Memory limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.memory",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-apiserver Ephemeral Storage limit is not set",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage",
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": " The pod does not have a matching NetworkPolicy",
            "description": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "remediation": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect.",
            "origin": "kube-score",
            "originId": "pod-networkpolicy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-apiserver The container is running with a low user ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-apiserver The container running with a low group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-apiserver CPU limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-apiserver Memory limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.memory",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-apiserver Ephemeral Storage limit is not set",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage",
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": " The pod does not have a matching NetworkPolicy",
            "description": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "remediation": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect.",
            "origin": "kube-score",
            "originId": "pod-networkpolicy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-apiserver The container is running with a low user ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-apiserver The container running with a low group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "CRITICAL",
            "title": " The pod is not targeted by a service, skipping probe checks.",
            "description": "Makes sure that all Pods have safe probe configurations",
            "remediation": "",
            "origin": "kube-score",
            "originId": "pod-probes",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-apiserver ImagePullPolicy is not set to Always",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want.",
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-apiserver The pod has a container with a writable root filesystem",
            "description": "Makes sure that all pods have a security context with read only filesystem set",
            "remediation": "Set securityContext.readOnlyRootFilesystem to true",
            "origin": "kube-score",
            "originId": "container-security-context-readonlyrootfilesystem",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": " The pod does not have a matching NetworkPolicy",
            "description": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "remediation": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect.",
            "origin": "kube-score",
            "originId": "pod-networkpolicy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-controller-manager The container is running with a low user ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-controller-manager The container running with a low group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-controller-manager CPU limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-controller-manager Memory limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.memory",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-controller-manager Ephemeral Storage limit is not set",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage",
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "CRITICAL",
            "title": " The pod is not targeted by a service, skipping probe checks.",
            "description": "Makes sure that all Pods have safe probe configurations",
            "remediation": "",
            "origin": "kube-score",
            "originId": "pod-probes",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-controller-manager ImagePullPolicy is not set to Always",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want.",
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-controller-manager The pod has a container with a writable root filesystem",
            "description": "Makes sure that all pods have a security context with read only filesystem set",
            "remediation": "Set securityContext.readOnlyRootFilesystem to true",
            "origin": "kube-score",
            "originId": "container-security-context-readonlyrootfilesystem",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-controller-manager ImagePullPolicy is not set to Always",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want.",
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-controller-manager The pod has a container with a writable root filesystem",
            "description": "Makes sure that all pods have a security context with read only filesystem set",
            "remediation": "Set securityContext.readOnlyRootFilesystem to true",
            "origin": "kube-score",
            "originId": "container-security-context-readonlyrootfilesystem",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-controller-manager CPU limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-controller-manager Memory limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.memory",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-controller-manager Ephemeral Storage limit is not set",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage",
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": " The pod does not have a matching NetworkPolicy",
            "description": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "remediation": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect.",
            "origin": "kube-score",
            "originId": "pod-networkpolicy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-controller-manager The container is running with a low user ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-controller-manager The container running with a low group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "CRITICAL",
            "title": " The pod is not targeted by a service, skipping probe checks.",
            "description": "Makes sure that all Pods have safe probe configurations",
            "remediation": "",
            "origin": "kube-score",
            "originId": "pod-probes",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-proxy ImagePullPolicy is not set to Always",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want.",
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-proxy The container is privileged",
            "description": "Makes sure that all pods have a unprivileged security context set",
            "remediation": "Set securityContext.privileged to false. Privileged containers can access all devices on the host, and grants almost the same access as non-containerized processes on the host.",
            "origin": "kube-score",
            "originId": "container-security-context-privileged",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-proxy The pod has a container with a writable root filesystem",
            "description": "Makes sure that all pods have a security context with read only filesystem set",
            "remediation": "Set securityContext.readOnlyRootFilesystem to true",
            "origin": "kube-score",
            "originId": "container-security-context-readonlyrootfilesystem",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": " The pod does not have a matching NetworkPolicy",
            "description": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "remediation": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect.",
            "origin": "kube-score",
            "originId": "pod-networkpolicy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-proxy The container is running with a low user ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-proxy The container running with a low group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-proxy CPU limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-proxy Memory limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.memory",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-proxy Ephemeral Storage limit is not set",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage",
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "CRITICAL",
            "title": " The pod is not targeted by a service, skipping probe checks.",
            "description": "Makes sure that all Pods have safe probe configurations",
            "remediation": "",
            "origin": "kube-score",
            "originId": "pod-probes",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": " The pod does not have a matching NetworkPolicy",
            "description": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "remediation": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect.",
            "origin": "kube-score",
            "originId": "pod-networkpolicy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-proxy The container is running with a low user ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-proxy The container running with a low group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-proxy CPU limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-proxy Memory limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.memory",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-proxy Ephemeral Storage limit is not set",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage",
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "CRITICAL",
            "title": " The pod is not targeted by a service, skipping probe checks.",
            "description": "Makes sure that all Pods have safe probe configurations",
            "remediation": "",
            "origin": "kube-score",
            "originId": "pod-probes",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-proxy The pod has a container with a writable root filesystem",
            "description": "Makes sure that all pods have a security context with read only filesystem set",
            "remediation": "Set securityContext.readOnlyRootFilesystem to true",
            "origin": "kube-score",
            "originId": "container-security-context-readonlyrootfilesystem",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-proxy ImagePullPolicy is not set to Always",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want.",
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-proxy The container is privileged",
            "description": "Makes sure that all pods have a unprivileged security context set",
            "remediation": "Set securityContext.privileged to false. Privileged containers can access all devices on the host, and grants almost the same access as non-containerized processes on the host.",
            "origin": "kube-score",
            "originId": "container-security-context-privileged",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "CRITICAL",
            "title": " The pod is not targeted by a service, skipping probe checks.",
            "description": "Makes sure that all Pods have safe probe configurations",
            "remediation": "",
            "origin": "kube-score",
            "originId": "pod-probes",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "etcd ImagePullPolicy is not set to Always",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want.",
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "etcd The pod has a container with a writable root filesystem",
            "description": "Makes sure that all pods have a security context with read only filesystem set",
            "remediation": "Set securityContext.readOnlyRootFilesystem to true",
            "origin": "kube-score",
            "originId": "container-security-context-readonlyrootfilesystem",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": " The pod does not have a matching NetworkPolicy",
            "description": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "remediation": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect.",
            "origin": "kube-score",
            "originId": "pod-networkpolicy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "etcd The container is running with a low user ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "etcd The container running with a low group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "etcd CPU limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "etcd Memory limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.memory",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "etcd Ephemeral Storage limit is not set",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage",
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "etcd CPU limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "etcd Memory limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.memory",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "etcd Ephemeral Storage limit is not set",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage",
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": " The pod does not have a matching NetworkPolicy",
            "description": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "remediation": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect.",
            "origin": "kube-score",
            "originId": "pod-networkpolicy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "etcd The container is running with a low user ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "etcd The container running with a low group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "CRITICAL",
            "title": " The pod is not targeted by a service, skipping probe checks.",
            "description": "Makes sure that all Pods have safe probe configurations",
            "remediation": "",
            "origin": "kube-score",
            "originId": "pod-probes",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "etcd ImagePullPolicy is not set to Always",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want.",
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "etcd The pod has a container with a writable root filesystem",
            "description": "Makes sure that all pods have a security context with read only filesystem set",
            "remediation": "Set securityContext.readOnlyRootFilesystem to true",
            "origin": "kube-score",
            "originId": "container-security-context-readonlyrootfilesystem",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-scheduler The pod has a container with a writable root filesystem",
            "description": "Makes sure that all pods have a security context with read only filesystem set",
            "remediation": "Set securityContext.readOnlyRootFilesystem to true",
            "origin": "kube-score",
            "originId": "container-security-context-readonlyrootfilesystem",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-scheduler ImagePullPolicy is not set to Always",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want.",
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": " The pod does not have a matching NetworkPolicy",
            "description": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "remediation": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect.",
            "origin": "kube-score",
            "originId": "pod-networkpolicy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-scheduler The container is running with a low user ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-scheduler The container running with a low group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-scheduler CPU limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-scheduler Memory limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.memory",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-scheduler Ephemeral Storage limit is not set",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage",
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "CRITICAL",
            "title": " The pod is not targeted by a service, skipping probe checks.",
            "description": "Makes sure that all Pods have safe probe configurations",
            "remediation": "",
            "origin": "kube-score",
            "originId": "pod-probes",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": " The pod does not have a matching NetworkPolicy",
            "description": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "remediation": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect.",
            "origin": "kube-score",
            "originId": "pod-networkpolicy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-scheduler The container is running with a low user ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-scheduler The container running with a low group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-scheduler CPU limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-scheduler Memory limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.memory",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-scheduler Ephemeral Storage limit is not set",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage",
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "CRITICAL",
            "title": " The pod is not targeted by a service, skipping probe checks.",
            "description": "Makes sure that all Pods have safe probe configurations",
            "remediation": "",
            "origin": "kube-score",
            "originId": "pod-probes",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-scheduler ImagePullPolicy is not set to Always",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want.",
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-scheduler The pod has a container with a writable root filesystem",
            "description": "Makes sure that all pods have a security context with read only filesystem set",
            "remediation": "Set securityContext.readOnlyRootFilesystem to true",
            "origin": "kube-score",
            "originId": "container-security-context-readonlyrootfilesystem",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "CRITICAL",
            "title": " The pod is not targeted by a service, skipping probe checks.",
            "description": "Makes sure that all Pods have safe probe configurations",
            "remediation": "",
            "origin": "kube-score",
            "originId": "pod-probes",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-apiserver ImagePullPolicy is not set to Always",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want.",
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-apiserver The pod has a container with a writable root filesystem",
            "description": "Makes sure that all pods have a security context with read only filesystem set",
            "remediation": "Set securityContext.readOnlyRootFilesystem to true",
            "origin": "kube-score",
            "originId": "container-security-context-readonlyrootfilesystem",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-apiserver CPU limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-apiserver Memory limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.memory",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-apiserver Ephemeral Storage limit is not set",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage",
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": " The pod does not have a matching NetworkPolicy",
            "description": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "remediation": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect.",
            "origin": "kube-score",
            "originId": "pod-networkpolicy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-apiserver The container is running with a low user ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-apiserver The container running with a low group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-apiserver CPU limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-apiserver Memory limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.memory",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-apiserver Ephemeral Storage limit is not set",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage",
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": " The pod does not have a matching NetworkPolicy",
            "description": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "remediation": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect.",
            "origin": "kube-score",
            "originId": "pod-networkpolicy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-apiserver The container is running with a low user ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-apiserver The container running with a low group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "CRITICAL",
            "title": " The pod is not targeted by a service, skipping probe checks.",
            "description": "Makes sure that all Pods have safe probe configurations",
            "remediation": "",
            "origin": "kube-score",
            "originId": "pod-probes",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-apiserver ImagePullPolicy is not set to Always",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want.",
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-apiserver The pod has a container with a writable root filesystem",
            "description": "Makes sure that all pods have a security context with read only filesystem set",
            "remediation": "Set securityContext.readOnlyRootFilesystem to true",
            "origin": "kube-score",
            "originId": "container-security-context-readonlyrootfilesystem",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": " The pod does not have a matching NetworkPolicy",
            "description": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "remediation": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect.",
            "origin": "kube-score",
            "originId": "pod-networkpolicy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-controller-manager The container is running with a low user ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-controller-manager The container running with a low group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-controller-manager CPU limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-controller-manager Memory limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.memory",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-controller-manager Ephemeral Storage limit is not set",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage",
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "CRITICAL",
            "title": " The pod is not targeted by a service, skipping probe checks.",
            "description": "Makes sure that all Pods have safe probe configurations",
            "remediation": "",
            "origin": "kube-score",
            "originId": "pod-probes",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-controller-manager ImagePullPolicy is not set to Always",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want.",
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-controller-manager The pod has a container with a writable root filesystem",
            "description": "Makes sure that all pods have a security context with read only filesystem set",
            "remediation": "Set securityContext.readOnlyRootFilesystem to true",
            "origin": "kube-score",
            "originId": "container-security-context-readonlyrootfilesystem",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-controller-manager ImagePullPolicy is not set to Always",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want.",
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-controller-manager The pod has a container with a writable root filesystem",
            "description": "Makes sure that all pods have a security context with read only filesystem set",
            "remediation": "Set securityContext.readOnlyRootFilesystem to true",
            "origin": "kube-score",
            "originId": "container-security-context-readonlyrootfilesystem",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-controller-manager CPU limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-controller-manager Memory limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.memory",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-controller-manager Ephemeral Storage limit is not set",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage",
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": " The pod does not have a matching NetworkPolicy",
            "description": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "remediation": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect.",
            "origin": "kube-score",
            "originId": "pod-networkpolicy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-controller-manager The container is running with a low user ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-controller-manager The container running with a low group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "CRITICAL",
            "title": " The pod is not targeted by a service, skipping probe checks.",
            "description": "Makes sure that all Pods have safe probe configurations",
            "remediation": "",
            "origin": "kube-score",
            "originId": "pod-probes",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-proxy ImagePullPolicy is not set to Always",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want.",
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-proxy The container is privileged",
            "description": "Makes sure that all pods have a unprivileged security context set",
            "remediation": "Set securityContext.privileged to false. Privileged containers can access all devices on the host, and grants almost the same access as non-containerized processes on the host.",
            "origin": "kube-score",
            "originId": "container-security-context-privileged",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-proxy The pod has a container with a writable root filesystem",
            "description": "Makes sure that all pods have a security context with read only filesystem set",
            "remediation": "Set securityContext.readOnlyRootFilesystem to true",
            "origin": "kube-score",
            "originId": "container-security-context-readonlyrootfilesystem",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": " The pod does not have a matching NetworkPolicy",
            "description": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "remediation": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect.",
            "origin": "kube-score",
            "originId": "pod-networkpolicy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-proxy The container is running with a low user ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-proxy The container running with a low group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-proxy CPU limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-proxy Memory limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.memory",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-proxy Ephemeral Storage limit is not set",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage",
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "CRITICAL",
            "title": " The pod is not targeted by a service, skipping probe checks.",
            "description": "Makes sure that all Pods have safe probe configurations",
            "remediation": "",
            "origin": "kube-score",
            "originId": "pod-probes",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": " The pod does not have a matching NetworkPolicy",
            "description": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "remediation": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect.",
            "origin": "kube-score",
            "originId": "pod-networkpolicy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-proxy The container is running with a low user ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-proxy The container running with a low group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-proxy CPU limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-proxy Memory limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.memory",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-proxy Ephemeral Storage limit is not set",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage",
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "CRITICAL",
            "title": " The pod is not targeted by a service, skipping probe checks.",
            "description": "Makes sure that all Pods have safe probe configurations",
            "remediation": "",
            "origin": "kube-score",
            "originId": "pod-probes",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-proxy The pod has a container with a writable root filesystem",
            "description": "Makes sure that all pods have a security context with read only filesystem set",
            "remediation": "Set securityContext.readOnlyRootFilesystem to true",
            "origin": "kube-score",
            "originId": "container-security-context-readonlyrootfilesystem",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-proxy ImagePullPolicy is not set to Always",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want.",
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-proxy The container is privileged",
            "description": "Makes sure that all pods have a unprivileged security context set",
            "remediation": "Set securityContext.privileged to false. Privileged containers can access all devices on the host, and grants almost the same access as non-containerized processes on the host.",
            "origin": "kube-score",
            "originId": "container-security-context-privileged",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "CRITICAL",
            "title": " The pod is not targeted by a service, skipping probe checks.",
            "description": "Makes sure that all Pods have safe probe configurations",
            "remediation": "",
            "origin": "kube-score",
            "originId": "pod-probes",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "etcd ImagePullPolicy is not set to Always",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want.",
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "etcd The pod has a container with a writable root filesystem",
            "description": "Makes sure that all pods have a security context with read only filesystem set",
            "remediation": "Set securityContext.readOnlyRootFilesystem to true",
            "origin": "kube-score",
            "originId": "container-security-context-readonlyrootfilesystem",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": " The pod does not have a matching NetworkPolicy",
            "description": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "remediation": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect.",
            "origin": "kube-score",
            "originId": "pod-networkpolicy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "etcd The container is running with a low user ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "etcd The container running with a low group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "etcd CPU limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "etcd Memory limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.memory",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "etcd Ephemeral Storage limit is not set",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage",
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "etcd CPU limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "etcd Memory limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.memory",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "etcd Ephemeral Storage limit is not set",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage",
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": " The pod does not have a matching NetworkPolicy",
            "description": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "remediation": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect.",
            "origin": "kube-score",
            "originId": "pod-networkpolicy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "etcd The container is running with a low user ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "etcd The container running with a low group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "CRITICAL",
            "title": " The pod is not targeted by a service, skipping probe checks.",
            "description": "Makes sure that all Pods have safe probe configurations",
            "remediation": "",
            "origin": "kube-score",
            "originId": "pod-probes",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "etcd ImagePullPolicy is not set to Always",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want.",
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "etcd The pod has a container with a writable root filesystem",
            "description": "Makes sure that all pods have a security context with read only filesystem set",
            "remediation": "Set securityContext.readOnlyRootFilesystem to true",
            "origin": "kube-score",
            "originId": "container-security-context-readonlyrootfilesystem",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-scheduler The pod has a container with a writable root filesystem",
            "description": "Makes sure that all pods have a security context with read only filesystem set",
            "remediation": "Set securityContext.readOnlyRootFilesystem to true",
            "origin": "kube-score",
            "originId": "container-security-context-readonlyrootfilesystem",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-scheduler ImagePullPolicy is not set to Always",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want.",
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": " The pod does not have a matching NetworkPolicy",
            "description": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "remediation": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect.",
            "origin": "kube-score",
            "originId": "pod-networkpolicy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-scheduler The container is running with a low user ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-scheduler The container running with a low group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-scheduler CPU limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-scheduler Memory limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.memory",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-scheduler Ephemeral Storage limit is not set",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage",
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "CRITICAL",
            "title": " The pod is not targeted by a service, skipping probe checks.",
            "description": "Makes sure that all Pods have safe probe configurations",
            "remediation": "",
            "origin": "kube-score",
            "originId": "pod-probes",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": " The pod does not have a matching NetworkPolicy",
            "description": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "remediation": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect.",
            "origin": "kube-score",
            "originId": "pod-networkpolicy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-scheduler The container is running with a low user ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-scheduler The container running with a low group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-scheduler CPU limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-scheduler Memory limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.memory",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-scheduler Ephemeral Storage limit is not set",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage",
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "CRITICAL",
            "title": " The pod is not targeted by a service, skipping probe checks.",
            "description": "Makes sure that all Pods have safe probe configurations",
            "remediation": "",
            "origin": "kube-score",
            "originId": "pod-probes",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-scheduler ImagePullPolicy is not set to Always",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want.",
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-scheduler The pod has a container with a writable root filesystem",
            "description": "Makes sure that all pods have a security context with read only filesystem set",
            "remediation": "Set securityContext.readOnlyRootFilesystem to true",
            "origin": "kube-score",
            "originId": "container-security-context-readonlyrootfilesystem",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "CRITICAL",
            "title": " The pod is not targeted by a service, skipping probe checks.",
            "description": "Makes sure that all Pods have safe probe configurations",
            "remediation": "",
            "origin": "kube-score",
            "originId": "pod-probes",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-apiserver ImagePullPolicy is not set to Always",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want.",
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-apiserver The pod has a container with a writable root filesystem",
            "description": "Makes sure that all pods have a security context with read only filesystem set",
            "remediation": "Set securityContext.readOnlyRootFilesystem to true",
            "origin": "kube-score",
            "originId": "container-security-context-readonlyrootfilesystem",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-apiserver CPU limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-apiserver Memory limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.memory",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-apiserver Ephemeral Storage limit is not set",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage",
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": " The pod does not have a matching NetworkPolicy",
            "description": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "remediation": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect.",
            "origin": "kube-score",
            "originId": "pod-networkpolicy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-apiserver The container is running with a low user ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-apiserver The container running with a low group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-apiserver CPU limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-apiserver Memory limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.memory",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-apiserver Ephemeral Storage limit is not set",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage",
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": " The pod does not have a matching NetworkPolicy",
            "description": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "remediation": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect.",
            "origin": "kube-score",
            "originId": "pod-networkpolicy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-apiserver The container is running with a low user ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-apiserver The container running with a low group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "CRITICAL",
            "title": " The pod is not targeted by a service, skipping probe checks.",
            "description": "Makes sure that all Pods have safe probe configurations",
            "remediation": "",
            "origin": "kube-score",
            "originId": "pod-probes",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-apiserver ImagePullPolicy is not set to Always",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want.",
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-apiserver The pod has a container with a writable root filesystem",
            "description": "Makes sure that all pods have a security context with read only filesystem set",
            "remediation": "Set securityContext.readOnlyRootFilesystem to true",
            "origin": "kube-score",
            "originId": "container-security-context-readonlyrootfilesystem",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": " The pod does not have a matching NetworkPolicy",
            "description": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "remediation": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect.",
            "origin": "kube-score",
            "originId": "pod-networkpolicy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-controller-manager The container is running with a low user ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-controller-manager The container running with a low group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-controller-manager CPU limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-controller-manager Memory limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.memory",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-controller-manager Ephemeral Storage limit is not set",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage",
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "CRITICAL",
            "title": " The pod is not targeted by a service, skipping probe checks.",
            "description": "Makes sure that all Pods have safe probe configurations",
            "remediation": "",
            "origin": "kube-score",
            "originId": "pod-probes",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-controller-manager ImagePullPolicy is not set to Always",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want.",
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-controller-manager The pod has a container with a writable root filesystem",
            "description": "Makes sure that all pods have a security context with read only filesystem set",
            "remediation": "Set securityContext.readOnlyRootFilesystem to true",
            "origin": "kube-score",
            "originId": "container-security-context-readonlyrootfilesystem",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-controller-manager ImagePullPolicy is not set to Always",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want.",
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-controller-manager The pod has a container with a writable root filesystem",
            "description": "Makes sure that all pods have a security context with read only filesystem set",
            "remediation": "Set securityContext.readOnlyRootFilesystem to true",
            "origin": "kube-score",
            "originId": "container-security-context-readonlyrootfilesystem",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-controller-manager CPU limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-controller-manager Memory limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.memory",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-controller-manager Ephemeral Storage limit is not set",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage",
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": " The pod does not have a matching NetworkPolicy",
            "description": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "remediation": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect.",
            "origin": "kube-score",
            "originId": "pod-networkpolicy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-controller-manager The container is running with a low user ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kube-controller-manager The container running with a low group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "CRITICAL",
            "title": " The pod is not targeted by a service, skipping probe checks.",
            "description": "Makes sure that all Pods have safe probe configurations",
            "remediation": "",
            "origin": "kube-score",
            "originId": "pod-probes",
            "passed": false,
            "skipped": false,
            "skipReason": null
          }
        ]
      },
      {
        "kind": "Job",
        "namespace": "kube-system",
        "name": "helm-install-rke2-ingress-nginx",
        "checks": [
          {
            "severity": "MEDIUM",
            "title": "Can elevate its own privileges",
            "description": "A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.",
            "remediation": "Set 'set containers[].securityContext.allowPrivilegeEscalation' to 'false'.",
            "origin": "trivy",
            "originId": "KSV001",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Runs as root user",
            "description": "Force the running image to run as a non-root user to ensure least privileges.",
            "remediation": "Set 'containers[].securityContext.runAsNonRoot' to true.",
            "origin": "trivy",
            "originId": "KSV012",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Seccomp policies disabled",
            "description": "A program inside the container can bypass Seccomp protection policies.",
            "remediation": "Specify seccomp either by annotation or by seccomp profile type having allowed values as per pod security standards",
            "origin": "trivy",
            "originId": "KSV104",
            "passed": false,
            "skipped": false,
            "skipReason": null
          }
        ]
      },
      {
        "kind": "Job",
        "namespace": "kube-system",
        "name": "helm-install-rke2-snapshot-validation-webhook",
        "checks": [
          {
            "severity": "MEDIUM",
            "title": "Can elevate its own privileges",
            "description": "A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.",
            "remediation": "Set 'set containers[].securityContext.allowPrivilegeEscalation' to 'false'.",
            "origin": "trivy",
            "originId": "KSV001",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Runs as root user",
            "description": "Force the running image to run as a non-root user to ensure least privileges.",
            "remediation": "Set 'containers[].securityContext.runAsNonRoot' to true.",
            "origin": "trivy",
            "originId": "KSV012",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Seccomp policies disabled",
            "description": "A program inside the container can bypass Seccomp protection policies.",
            "remediation": "Specify seccomp either by annotation or by seccomp profile type having allowed values as per pod security standards",
            "origin": "trivy",
            "originId": "KSV104",
            "passed": false,
            "skipped": false,
            "skipReason": null
          }
        ]
      },
      {
        "kind": "Role",
        "namespace": "kube-system",
        "name": "system::leader-locking-kube-controller-manager",
        "checks": [
          {
            "severity": "MEDIUM",
            "title": "Manage configmaps",
            "description": "Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.",
            "remediation": "Remove write permission verbs for resource 'configmaps'",
            "origin": "trivy",
            "originId": "KSV049",
            "passed": false,
            "skipped": false,
            "skipReason": null
          }
        ]
      },
      {
        "kind": "Pod",
        "namespace": "kube-system",
        "name": "kube-apiserver-ubuntu1",
        "checks": [
          {
            "severity": "MEDIUM",
            "title": "Ensure that the --anonymous-auth argument is set to false",
            "description": "Disable anonymous requests to the API server.",
            "remediation": "Set '--anonymous-auth' to 'false'.",
            "origin": "trivy",
            "originId": "KCV0001",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Can elevate its own privileges",
            "description": "A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.",
            "remediation": "Set 'set containers[].securityContext.allowPrivilegeEscalation' to 'false'.",
            "origin": "trivy",
            "originId": "KSV001",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "Access to host network",
            "description": "Sharing the host’s network namespace permits processes in the pod to communicate with processes bound to the host’s loopback adapter.",
            "remediation": "Do not set 'spec.template.spec.hostNetwork' to true.",
            "origin": "trivy",
            "originId": "KSV009",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Runs as root user",
            "description": "Force the running image to run as a non-root user to ensure least privileges.",
            "remediation": "Set 'containers[].securityContext.runAsNonRoot' to true.",
            "origin": "trivy",
            "originId": "KSV012",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "hostPath volumes mounted",
            "description": "According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.",
            "remediation": "Do not set 'spec.volumes[*].hostPath'.",
            "origin": "trivy",
            "originId": "KSV023",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Seccomp policies disabled",
            "description": "A program inside the container can bypass Seccomp protection policies.",
            "remediation": "Specify seccomp either by annotation or by seccomp profile type having allowed values as per pod security standards",
            "origin": "trivy",
            "originId": "KSV104",
            "passed": false,
            "skipped": false,
            "skipReason": null
          }
        ]
      },
      {
        "kind": "Pod",
        "namespace": "kube-system",
        "name": "cloud-controller-manager-ubuntu1",
        "checks": [
          {
            "severity": "MEDIUM",
            "title": "Can elevate its own privileges",
            "description": "A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.",
            "remediation": "Set 'set containers[].securityContext.allowPrivilegeEscalation' to 'false'.",
            "origin": "trivy",
            "originId": "KSV001",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "Access to host network",
            "description": "Sharing the host’s network namespace permits processes in the pod to communicate with processes bound to the host’s loopback adapter.",
            "remediation": "Do not set 'spec.template.spec.hostNetwork' to true.",
            "origin": "trivy",
            "originId": "KSV009",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Runs as root user",
            "description": "Force the running image to run as a non-root user to ensure least privileges.",
            "remediation": "Set 'containers[].securityContext.runAsNonRoot' to true.",
            "origin": "trivy",
            "originId": "KSV012",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "hostPath volumes mounted",
            "description": "According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.",
            "remediation": "Do not set 'spec.volumes[*].hostPath'.",
            "origin": "trivy",
            "originId": "KSV023",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Seccomp policies disabled",
            "description": "A program inside the container can bypass Seccomp protection policies.",
            "remediation": "Specify seccomp either by annotation or by seccomp profile type having allowed values as per pod security standards",
            "origin": "trivy",
            "originId": "KSV104",
            "passed": false,
            "skipped": false,
            "skipReason": null
          }
        ]
      },
      {
        "kind": "Role",
        "namespace": "kube-system",
        "name": "system:controller:bootstrap-signer",
        "checks": [
          {
            "severity": "MEDIUM",
            "title": "Manage namespace secrets",
            "description": "Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.",
            "remediation": "Manage namespace secrets are not allowed. Remove resource 'secrets' from role",
            "origin": "trivy",
            "originId": "KSV113",
            "passed": false,
            "skipped": false,
            "skipReason": null
          }
        ]
      },
      {
        "kind": "ReplicaSet",
        "namespace": "kube-system",
        "name": "rke2-coredns-rke2-coredns-autoscaler-945fbd459",
        "checks": [
          {
            "severity": "CRITICAL",
            "title": " The pod is not targeted by a service, skipping probe checks.",
            "description": "Makes sure that all Pods have safe probe configurations",
            "remediation": "",
            "origin": "kube-score",
            "originId": "pod-probes",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "autoscaler ImagePullPolicy is not set to Always",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want.",
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "autoscaler Container has no configured security context",
            "description": "Makes sure that all pods have a security context with read only filesystem set",
            "remediation": "Set securityContext to run the container in a more secure context.",
            "origin": "kube-score",
            "originId": "container-security-context-readonlyrootfilesystem",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "autoscaler Ephemeral Storage limit is not set",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage",
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": " The pod does not have a matching NetworkPolicy",
            "description": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "remediation": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect.",
            "origin": "kube-score",
            "originId": "pod-networkpolicy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "autoscaler The container is running with a low user ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "autoscaler The container running with a low group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "autoscaler ImagePullPolicy is not set to Always",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want.",
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "autoscaler Container has no configured security context",
            "description": "Makes sure that all pods have a security context with read only filesystem set",
            "remediation": "Set securityContext to run the container in a more secure context.",
            "origin": "kube-score",
            "originId": "container-security-context-readonlyrootfilesystem",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "autoscaler Ephemeral Storage limit is not set",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage",
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": " The pod does not have a matching NetworkPolicy",
            "description": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "remediation": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect.",
            "origin": "kube-score",
            "originId": "pod-networkpolicy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "autoscaler The container is running with a low user ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "autoscaler The container running with a low group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "CRITICAL",
            "title": " The pod is not targeted by a service, skipping probe checks.",
            "description": "Makes sure that all Pods have safe probe configurations",
            "remediation": "",
            "origin": "kube-score",
            "originId": "pod-probes",
            "passed": false,
            "skipped": false,
            "skipReason": null
          }
        ]
      },
      {
        "kind": "ReplicaSet",
        "namespace": "kube-system",
        "name": "rke2-metrics-server-544c8c66fc",
        "checks": [
          {
            "severity": "MEDIUM",
            "title": " Container has the same readiness and liveness probe",
            "description": "Makes sure that all Pods have safe probe configurations",
            "remediation": "Using the same probe for liveness and readiness is very likely dangerous. Generally it's better to avoid the livenessProbe than re-using the readinessProbe.",
            "origin": "kube-score",
            "originId": "pod-probes",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "metrics-server ImagePullPolicy is not set to Always",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want.",
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "metrics-server CPU limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "metrics-server Memory limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.memory",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "metrics-server CPU request is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource requests are recommended to make sure that the application can start and run without crashing. Set resources.requests.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "metrics-server Memory request is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource requests are recommended to make sure that the application can start and run without crashing. Set resources.requests.memory",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "metrics-server Ephemeral Storage limit is not set",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage",
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": " The pod does not have a matching NetworkPolicy",
            "description": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "remediation": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect.",
            "origin": "kube-score",
            "originId": "pod-networkpolicy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "metrics-server ImagePullPolicy is not set to Always",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want.",
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": " The pod does not have a matching NetworkPolicy",
            "description": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "remediation": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect.",
            "origin": "kube-score",
            "originId": "pod-networkpolicy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "metrics-server CPU limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "metrics-server Memory limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.memory",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "metrics-server CPU request is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource requests are recommended to make sure that the application can start and run without crashing. Set resources.requests.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "metrics-server Memory request is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource requests are recommended to make sure that the application can start and run without crashing. Set resources.requests.memory",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "metrics-server Ephemeral Storage limit is not set",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage",
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": " Container has the same readiness and liveness probe",
            "description": "Makes sure that all Pods have safe probe configurations",
            "remediation": "Using the same probe for liveness and readiness is very likely dangerous. Generally it's better to avoid the livenessProbe than re-using the readinessProbe.",
            "origin": "kube-score",
            "originId": "pod-probes",
            "passed": false,
            "skipped": false,
            "skipReason": null
          }
        ]
      },
      {
        "kind": "Pod",
        "namespace": "kube-system",
        "name": "kube-controller-manager-ubuntu1",
        "checks": [
          {
            "severity": "MEDIUM",
            "title": "Can elevate its own privileges",
            "description": "A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.",
            "remediation": "Set 'set containers[].securityContext.allowPrivilegeEscalation' to 'false'.",
            "origin": "trivy",
            "originId": "KSV001",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "Access to host network",
            "description": "Sharing the host’s network namespace permits processes in the pod to communicate with processes bound to the host’s loopback adapter.",
            "remediation": "Do not set 'spec.template.spec.hostNetwork' to true.",
            "origin": "trivy",
            "originId": "KSV009",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Runs as root user",
            "description": "Force the running image to run as a non-root user to ensure least privileges.",
            "remediation": "Set 'containers[].securityContext.runAsNonRoot' to true.",
            "origin": "trivy",
            "originId": "KSV012",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "hostPath volumes mounted",
            "description": "According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.",
            "remediation": "Do not set 'spec.volumes[*].hostPath'.",
            "origin": "trivy",
            "originId": "KSV023",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Seccomp policies disabled",
            "description": "A program inside the container can bypass Seccomp protection policies.",
            "remediation": "Specify seccomp either by annotation or by seccomp profile type having allowed values as per pod security standards",
            "origin": "trivy",
            "originId": "KSV104",
            "passed": false,
            "skipped": false,
            "skipReason": null
          }
        ]
      },
      {
        "kind": "Job",
        "namespace": "kube-system",
        "name": "helm-install-rke2-metrics-server",
        "checks": [
          {
            "severity": "MEDIUM",
            "title": "Can elevate its own privileges",
            "description": "A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.",
            "remediation": "Set 'set containers[].securityContext.allowPrivilegeEscalation' to 'false'.",
            "origin": "trivy",
            "originId": "KSV001",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Runs as root user",
            "description": "Force the running image to run as a non-root user to ensure least privileges.",
            "remediation": "Set 'containers[].securityContext.runAsNonRoot' to true.",
            "origin": "trivy",
            "originId": "KSV012",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Seccomp policies disabled",
            "description": "A program inside the container can bypass Seccomp protection policies.",
            "remediation": "Specify seccomp either by annotation or by seccomp profile type having allowed values as per pod security standards",
            "origin": "trivy",
            "originId": "KSV104",
            "passed": false,
            "skipped": false,
            "skipReason": null
          }
        ]
      },
      {
        "kind": "ReplicaSet",
        "namespace": "kube-system",
        "name": "rke2-snapshot-validation-webhook-54c5989b65",
        "checks": [
          {
            "severity": "MEDIUM",
            "title": " The pod does not have a matching NetworkPolicy",
            "description": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "remediation": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect.",
            "origin": "kube-score",
            "originId": "pod-networkpolicy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "rke2-snapshot-validation-webhook The container is running with a low user ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "rke2-snapshot-validation-webhook The container running with a low group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "rke2-snapshot-validation-webhook CPU limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "rke2-snapshot-validation-webhook Memory limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.memory",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "rke2-snapshot-validation-webhook CPU request is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource requests are recommended to make sure that the application can start and run without crashing. Set resources.requests.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "rke2-snapshot-validation-webhook Memory request is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource requests are recommended to make sure that the application can start and run without crashing. Set resources.requests.memory",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "rke2-snapshot-validation-webhook Ephemeral Storage limit is not set",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage",
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": " Container has the same readiness and liveness probe",
            "description": "Makes sure that all Pods have safe probe configurations",
            "remediation": "Using the same probe for liveness and readiness is very likely dangerous. Generally it's better to avoid the livenessProbe than re-using the readinessProbe.",
            "origin": "kube-score",
            "originId": "pod-probes",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "rke2-snapshot-validation-webhook ImagePullPolicy is not set to Always",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want.",
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "rke2-snapshot-validation-webhook The container is running with a low user ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "rke2-snapshot-validation-webhook The container running with a low group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "rke2-snapshot-validation-webhook CPU limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "rke2-snapshot-validation-webhook Memory limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.memory",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "rke2-snapshot-validation-webhook CPU request is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource requests are recommended to make sure that the application can start and run without crashing. Set resources.requests.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "rke2-snapshot-validation-webhook Memory request is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource requests are recommended to make sure that the application can start and run without crashing. Set resources.requests.memory",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "rke2-snapshot-validation-webhook Ephemeral Storage limit is not set",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage",
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": " The pod does not have a matching NetworkPolicy",
            "description": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "remediation": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect.",
            "origin": "kube-score",
            "originId": "pod-networkpolicy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": " Container has the same readiness and liveness probe",
            "description": "Makes sure that all Pods have safe probe configurations",
            "remediation": "Using the same probe for liveness and readiness is very likely dangerous. Generally it's better to avoid the livenessProbe than re-using the readinessProbe.",
            "origin": "kube-score",
            "originId": "pod-probes",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "rke2-snapshot-validation-webhook ImagePullPolicy is not set to Always",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want.",
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          }
        ]
      },
      {
        "kind": "Role",
        "namespace": "kube-system",
        "name": "system::leader-locking-kube-scheduler",
        "checks": [
          {
            "severity": "MEDIUM",
            "title": "Manage configmaps",
            "description": "Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.",
            "remediation": "Remove write permission verbs for resource 'configmaps'",
            "origin": "trivy",
            "originId": "KSV049",
            "passed": false,
            "skipped": false,
            "skipReason": null
          }
        ]
      },
      {
        "kind": "Deployment",
        "namespace": "kube-system",
        "name": "rke2-snapshot-validation-webhook",
        "checks": [
          {
            "severity": "MEDIUM",
            "title": "Can elevate its own privileges",
            "description": "A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.",
            "remediation": "Set 'set containers[].securityContext.allowPrivilegeEscalation' to 'false'.",
            "origin": "trivy",
            "originId": "KSV001",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Seccomp policies disabled",
            "description": "A program inside the container can bypass Seccomp protection policies.",
            "remediation": "Specify seccomp either by annotation or by seccomp profile type having allowed values as per pod security standards",
            "origin": "trivy",
            "originId": "KSV104",
            "passed": false,
            "skipped": false,
            "skipReason": null
          }
        ]
      },
      {
        "kind": "Pod",
        "namespace": "kube-system",
        "name": "kube-scheduler-ubuntu1",
        "checks": [
          {
            "severity": "MEDIUM",
            "title": "Can elevate its own privileges",
            "description": "A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.",
            "remediation": "Set 'set containers[].securityContext.allowPrivilegeEscalation' to 'false'.",
            "origin": "trivy",
            "originId": "KSV001",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "Access to host network",
            "description": "Sharing the host’s network namespace permits processes in the pod to communicate with processes bound to the host’s loopback adapter.",
            "remediation": "Do not set 'spec.template.spec.hostNetwork' to true.",
            "origin": "trivy",
            "originId": "KSV009",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Runs as root user",
            "description": "Force the running image to run as a non-root user to ensure least privileges.",
            "remediation": "Set 'containers[].securityContext.runAsNonRoot' to true.",
            "origin": "trivy",
            "originId": "KSV012",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "hostPath volumes mounted",
            "description": "According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.",
            "remediation": "Do not set 'spec.volumes[*].hostPath'.",
            "origin": "trivy",
            "originId": "KSV023",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Seccomp policies disabled",
            "description": "A program inside the container can bypass Seccomp protection policies.",
            "remediation": "Specify seccomp either by annotation or by seccomp profile type having allowed values as per pod security standards",
            "origin": "trivy",
            "originId": "KSV104",
            "passed": false,
            "skipped": false,
            "skipReason": null
          }
        ]
      },
      {
        "kind": "Job",
        "namespace": "kube-system",
        "name": "helm-install-rke2-snapshot-controller",
        "checks": [
          {
            "severity": "MEDIUM",
            "title": "Can elevate its own privileges",
            "description": "A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.",
            "remediation": "Set 'set containers[].securityContext.allowPrivilegeEscalation' to 'false'.",
            "origin": "trivy",
            "originId": "KSV001",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Runs as root user",
            "description": "Force the running image to run as a non-root user to ensure least privileges.",
            "remediation": "Set 'containers[].securityContext.runAsNonRoot' to true.",
            "origin": "trivy",
            "originId": "KSV012",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Seccomp policies disabled",
            "description": "A program inside the container can bypass Seccomp protection policies.",
            "remediation": "Specify seccomp either by annotation or by seccomp profile type having allowed values as per pod security standards",
            "origin": "trivy",
            "originId": "KSV104",
            "passed": false,
            "skipped": false,
            "skipReason": null
          }
        ]
      },
      {
        "kind": "Job",
        "namespace": "kube-system",
        "name": "helm-install-rke2-canal",
        "checks": [
          {
            "severity": "MEDIUM",
            "title": "Can elevate its own privileges",
            "description": "A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.",
            "remediation": "Set 'set containers[].securityContext.allowPrivilegeEscalation' to 'false'.",
            "origin": "trivy",
            "originId": "KSV001",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "Access to host network",
            "description": "Sharing the host’s network namespace permits processes in the pod to communicate with processes bound to the host’s loopback adapter.",
            "remediation": "Do not set 'spec.template.spec.hostNetwork' to true.",
            "origin": "trivy",
            "originId": "KSV009",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Runs as root user",
            "description": "Force the running image to run as a non-root user to ensure least privileges.",
            "remediation": "Set 'containers[].securityContext.runAsNonRoot' to true.",
            "origin": "trivy",
            "originId": "KSV012",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Seccomp policies disabled",
            "description": "A program inside the container can bypass Seccomp protection policies.",
            "remediation": "Specify seccomp either by annotation or by seccomp profile type having allowed values as per pod security standards",
            "origin": "trivy",
            "originId": "KSV104",
            "passed": false,
            "skipped": false,
            "skipReason": null
          }
        ]
      },
      {
        "kind": "Job",
        "namespace": "kube-system",
        "name": "helm-install-rke2-snapshot-controller-crd",
        "checks": [
          {
            "severity": "MEDIUM",
            "title": "Can elevate its own privileges",
            "description": "A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.",
            "remediation": "Set 'set containers[].securityContext.allowPrivilegeEscalation' to 'false'.",
            "origin": "trivy",
            "originId": "KSV001",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Runs as root user",
            "description": "Force the running image to run as a non-root user to ensure least privileges.",
            "remediation": "Set 'containers[].securityContext.runAsNonRoot' to true.",
            "origin": "trivy",
            "originId": "KSV012",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Seccomp policies disabled",
            "description": "A program inside the container can bypass Seccomp protection policies.",
            "remediation": "Specify seccomp either by annotation or by seccomp profile type having allowed values as per pod security standards",
            "origin": "trivy",
            "originId": "KSV104",
            "passed": false,
            "skipped": false,
            "skipReason": null
          }
        ]
      }
    ],
    "kube-public": [
      {
        "kind": "Role",
        "namespace": "kube-public",
        "name": "system:controller:bootstrap-signer",
        "checks": [
          {
            "severity": "MEDIUM",
            "title": "Manage configmaps",
            "description": "Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.",
            "remediation": "Remove write permission verbs for resource 'configmaps'",
            "origin": "trivy",
            "originId": "KSV049",
            "passed": false,
            "skipped": false,
            "skipReason": null
          }
        ]
      }
    ]
  },
  "nonNamespacedResources": [
    {
      "kind": "Job",
      "namespace": null,
      "name": "kube-bench-master",
      "checks": [
        {
          "severity": "MEDIUM",
          "title": "Ingress and Egress blocked",
          "description": "Disable Ingress and Egress traffic on all pods wherever possible. It is recommended to define restrictive network policy on all new pods, and then enable sources/destinations that this pod must communicate with.",
          "remediation": "Define a network policy that restricts ingress and egress connections.",
          "origin": "kubescape",
          "originId": "C-0030",
          "passed": false,
          "skipped": false,
          "skipReason": null
        },
        {
          "severity": "HIGH",
          "title": "Host PID/IPC privileges",
          "description": "Containers should be isolated from the host machine as much as possible. The hostPID and hostIPC fields in deployment yaml may allow cross-container influence and may expose the host itself to potentially malicious or destructive actions. This control identifies all pods using hostPID or hostIPC privileges.",
          "remediation": "Remove hostPID and hostIPC from the yaml file(s) privileges unless they are absolutely necessary.",
          "origin": "kubescape",
          "originId": "C-0038",
          "passed": false,
          "skipped": false,
          "skipReason": null
        },
        {
          "severity": "MEDIUM",
          "title": "Configured liveness probe",
          "description": "Liveness probe is intended to ensure that workload remains healthy during its entire execution lifecycle, or otherwise restrat the container. It is highly recommended to define liveness probe for every worker container. This control finds all the pods where the Liveness probe is not configured.",
          "remediation": "Ensure Liveness probes are configured wherever possible.",
          "origin": "kubescape",
          "originId": "C-0056",
          "passed": false,
          "skipped": false,
          "skipReason": null
        },
        {
          "severity": "HIGH",
          "title": "HostPath mount",
          "description": "Mounting host directory to the container can be used by attackers to get access to the underlying host. This control identifies all the pods using hostPath mount.",
          "remediation": "Remove hostPath mounts unless they are absolutely necessary and use exception mechanism to remove notifications.",
          "origin": "kubescape",
          "originId": "C-0048",
          "passed": false,
          "skipped": false,
          "skipReason": null
        },
        {
          "severity": "MEDIUM",
          "title": "Allow privilege escalation",
          "description": "Attackers may gain access to a container and uplift its privilege to enable excessive capabilities.",
          "remediation": "If your application does not need it, make sure the allowPrivilegeEscalation field of the securityContext is set to false.",
          "origin": "kubescape",
          "originId": "C-0016",
          "passed": false,
          "skipped": false,
          "skipReason": null
        },
        {
          "severity": "HIGH",
          "title": "Resources memory limit and request",
          "description": "This control identifies all Pods for which the memory limit is not set.",
          "remediation": "Set the memory limit or use exception mechanism to avoid unnecessary notifications.",
          "origin": "kubescape",
          "originId": "C-0004",
          "passed": false,
          "skipped": false,
          "skipReason": null
        },
        {
          "severity": "HIGH",
          "title": "Resources CPU limit and request",
          "description": "This control identifies all Pods for which the CPU limit is not set.",
          "remediation": "Set the CPU limit or use exception mechanism to avoid unnecessary notifications.",
          "origin": "kubescape",
          "originId": "C-0050",
          "passed": false,
          "skipped": false,
          "skipReason": null
        },
        {
          "severity": "MEDIUM",
          "title": "Linux hardening",
          "description": "Containers may be given more privileges than they actually need. This can increase the potential impact of a container compromise.",
          "remediation": "You can use AppArmor, Seccomp, SELinux and Linux Capabilities mechanisms to restrict containers abilities to utilize unwanted privileges.",
          "origin": "kubescape",
          "originId": "C-0055",
          "passed": false,
          "skipped": false,
          "skipReason": null
        },
        {
          "severity": "HIGH",
          "title": "Resource limits",
          "description": "CPU and memory resources should have a limit set for every container or a namespace to prevent resource exhaustion. This control identifies all the pods without resource limit definitions by checking their yaml definition file as well as their namespace LimitRange objects. It is also recommended to use ResourceQuota object to restrict overall namespace resources, but this is not verified by this control.",
          "remediation": "Define LimitRange and Resource Limits in the namespace or in the deployment/pod manifests.",
          "origin": "kubescape",
          "originId": "C-0009",
          "passed": false,
          "skipped": false,
          "skipReason": null
        },
        {
          "severity": "MEDIUM",
          "title": "Ingress and Egress blocked",
          "description": "Disable Ingress and Egress traffic on all pods wherever possible. It is recommended to define restrictive network policy on all new pods, and then enable sources/destinations that this pod must communicate with.",
          "remediation": "Define a network policy that restricts ingress and egress connections.",
          "origin": "kubescape",
          "originId": "C-0030",
          "passed": false,
          "skipped": false,
          "skipReason": null
        },
        {
          "severity": "HIGH",
          "title": "Host PID/IPC privileges",
          "description": "Containers should be isolated from the host machine as much as possible. The hostPID and hostIPC fields in deployment yaml may allow cross-container influence and may expose the host itself to potentially malicious or destructive actions. This control identifies all pods using hostPID or hostIPC privileges.",
          "remediation": "Remove hostPID and hostIPC from the yaml file(s) privileges unless they are absolutely necessary.",
          "origin": "kubescape",
          "originId": "C-0038",
          "passed": false,
          "skipped": false,
          "skipReason": null
        },
        {
          "severity": "MEDIUM",
          "title": "Configured liveness probe",
          "description": "Liveness probe is intended to ensure that workload remains healthy during its entire execution lifecycle, or otherwise restrat the container. It is highly recommended to define liveness probe for every worker container. This control finds all the pods where the Liveness probe is not configured.",
          "remediation": "Ensure Liveness probes are configured wherever possible.",
          "origin": "kubescape",
          "originId": "C-0056",
          "passed": false,
          "skipped": false,
          "skipReason": null
        },
        {
          "severity": "HIGH",
          "title": "HostPath mount",
          "description": "Mounting host directory to the container can be used by attackers to get access to the underlying host. This control identifies all the pods using hostPath mount.",
          "remediation": "Remove hostPath mounts unless they are absolutely necessary and use exception mechanism to remove notifications.",
          "origin": "kubescape",
          "originId": "C-0048",
          "passed": false,
          "skipped": false,
          "skipReason": null
        },
        {
          "severity": "MEDIUM",
          "title": "Allow privilege escalation",
          "description": "Attackers may gain access to a container and uplift its privilege to enable excessive capabilities.",
          "remediation": "If your application does not need it, make sure the allowPrivilegeEscalation field of the securityContext is set to false.",
          "origin": "kubescape",
          "originId": "C-0016",
          "passed": false,
          "skipped": false,
          "skipReason": null
        },
        {
          "severity": "HIGH",
          "title": "Resources memory limit and request",
          "description": "This control identifies all Pods for which the memory limit is not set.",
          "remediation": "Set the memory limit or use exception mechanism to avoid unnecessary notifications.",
          "origin": "kubescape",
          "originId": "C-0004",
          "passed": false,
          "skipped": false,
          "skipReason": null
        },
        {
          "severity": "HIGH",
          "title": "Resources CPU limit and request",
          "description": "This control identifies all Pods for which the CPU limit is not set.",
          "remediation": "Set the CPU limit or use exception mechanism to avoid unnecessary notifications.",
          "origin": "kubescape",
          "originId": "C-0050",
          "passed": false,
          "skipped": false,
          "skipReason": null
        },
        {
          "severity": "MEDIUM",
          "title": "Linux hardening",
          "description": "Containers may be given more privileges than they actually need. This can increase the potential impact of a container compromise.",
          "remediation": "You can use AppArmor, Seccomp, SELinux and Linux Capabilities mechanisms to restrict containers abilities to utilize unwanted privileges.",
          "origin": "kubescape",
          "originId": "C-0055",
          "passed": false,
          "skipped": false,
          "skipReason": null
        },
        {
          "severity": "HIGH",
          "title": "Resource limits",
          "description": "CPU and memory resources should have a limit set for every container or a namespace to prevent resource exhaustion. This control identifies all the pods without resource limit definitions by checking their yaml definition file as well as their namespace LimitRange objects. It is also recommended to use ResourceQuota object to restrict overall namespace resources, but this is not verified by this control.",
          "remediation": "Define LimitRange and Resource Limits in the namespace or in the deployment/pod manifests.",
          "origin": "kubescape",
          "originId": "C-0009",
          "passed": false,
          "skipped": false,
          "skipReason": null
        }
      ]
    },
    {
      "kind": "Job",
      "namespace": null,
      "name": "trivy-scan-job",
      "checks": [
        {
          "severity": "MEDIUM",
          "title": "Ingress and Egress blocked",
          "description": "Disable Ingress and Egress traffic on all pods wherever possible. It is recommended to define restrictive network policy on all new pods, and then enable sources/destinations that this pod must communicate with.",
          "remediation": "Define a network policy that restricts ingress and egress connections.",
          "origin": "kubescape",
          "originId": "C-0030",
          "passed": false,
          "skipped": false,
          "skipReason": null
        },
        {
          "severity": "MEDIUM",
          "title": "Configured liveness probe",
          "description": "Liveness probe is intended to ensure that workload remains healthy during its entire execution lifecycle, or otherwise restrat the container. It is highly recommended to define liveness probe for every worker container. This control finds all the pods where the Liveness probe is not configured.",
          "remediation": "Ensure Liveness probes are configured wherever possible.",
          "origin": "kubescape",
          "originId": "C-0056",
          "passed": false,
          "skipped": false,
          "skipReason": null
        },
        {
          "severity": "MEDIUM",
          "title": "Allow privilege escalation",
          "description": "Attackers may gain access to a container and uplift its privilege to enable excessive capabilities.",
          "remediation": "If your application does not need it, make sure the allowPrivilegeEscalation field of the securityContext is set to false.",
          "origin": "kubescape",
          "originId": "C-0016",
          "passed": false,
          "skipped": false,
          "skipReason": null
        },
        {
          "severity": "HIGH",
          "title": "Resources memory limit and request",
          "description": "This control identifies all Pods for which the memory limit is not set.",
          "remediation": "Set the memory limit or use exception mechanism to avoid unnecessary notifications.",
          "origin": "kubescape",
          "originId": "C-0004",
          "passed": false,
          "skipped": false,
          "skipReason": null
        },
        {
          "severity": "HIGH",
          "title": "Resources CPU limit and request",
          "description": "This control identifies all Pods for which the CPU limit is not set.",
          "remediation": "Set the CPU limit or use exception mechanism to avoid unnecessary notifications.",
          "origin": "kubescape",
          "originId": "C-0050",
          "passed": false,
          "skipped": false,
          "skipReason": null
        },
        {
          "severity": "MEDIUM",
          "title": "Linux hardening",
          "description": "Containers may be given more privileges than they actually need. This can increase the potential impact of a container compromise.",
          "remediation": "You can use AppArmor, Seccomp, SELinux and Linux Capabilities mechanisms to restrict containers abilities to utilize unwanted privileges.",
          "origin": "kubescape",
          "originId": "C-0055",
          "passed": false,
          "skipped": false,
          "skipReason": null
        },
        {
          "severity": "HIGH",
          "title": "Resource limits",
          "description": "CPU and memory resources should have a limit set for every container or a namespace to prevent resource exhaustion. This control identifies all the pods without resource limit definitions by checking their yaml definition file as well as their namespace LimitRange objects. It is also recommended to use ResourceQuota object to restrict overall namespace resources, but this is not verified by this control.",
          "remediation": "Define LimitRange and Resource Limits in the namespace or in the deployment/pod manifests.",
          "origin": "kubescape",
          "originId": "C-0009",
          "passed": false,
          "skipped": false,
          "skipReason": null
        },
        {
          "severity": "MEDIUM",
          "title": "Ingress and Egress blocked",
          "description": "Disable Ingress and Egress traffic on all pods wherever possible. It is recommended to define restrictive network policy on all new pods, and then enable sources/destinations that this pod must communicate with.",
          "remediation": "Define a network policy that restricts ingress and egress connections.",
          "origin": "kubescape",
          "originId": "C-0030",
          "passed": false,
          "skipped": false,
          "skipReason": null
        },
        {
          "severity": "MEDIUM",
          "title": "Configured liveness probe",
          "description": "Liveness probe is intended to ensure that workload remains healthy during its entire execution lifecycle, or otherwise restrat the container. It is highly recommended to define liveness probe for every worker container. This control finds all the pods where the Liveness probe is not configured.",
          "remediation": "Ensure Liveness probes are configured wherever possible.",
          "origin": "kubescape",
          "originId": "C-0056",
          "passed": false,
          "skipped": false,
          "skipReason": null
        },
        {
          "severity": "MEDIUM",
          "title": "Allow privilege escalation",
          "description": "Attackers may gain access to a container and uplift its privilege to enable excessive capabilities.",
          "remediation": "If your application does not need it, make sure the allowPrivilegeEscalation field of the securityContext is set to false.",
          "origin": "kubescape",
          "originId": "C-0016",
          "passed": false,
          "skipped": false,
          "skipReason": null
        },
        {
          "severity": "HIGH",
          "title": "Resources memory limit and request",
          "description": "This control identifies all Pods for which the memory limit is not set.",
          "remediation": "Set the memory limit or use exception mechanism to avoid unnecessary notifications.",
          "origin": "kubescape",
          "originId": "C-0004",
          "passed": false,
          "skipped": false,
          "skipReason": null
        },
        {
          "severity": "HIGH",
          "title": "Resources CPU limit and request",
          "description": "This control identifies all Pods for which the CPU limit is not set.",
          "remediation": "Set the CPU limit or use exception mechanism to avoid unnecessary notifications.",
          "origin": "kubescape",
          "originId": "C-0050",
          "passed": false,
          "skipped": false,
          "skipReason": null
        },
        {
          "severity": "MEDIUM",
          "title": "Linux hardening",
          "description": "Containers may be given more privileges than they actually need. This can increase the potential impact of a container compromise.",
          "remediation": "You can use AppArmor, Seccomp, SELinux and Linux Capabilities mechanisms to restrict containers abilities to utilize unwanted privileges.",
          "origin": "kubescape",
          "originId": "C-0055",
          "passed": false,
          "skipped": false,
          "skipReason": null
        },
        {
          "severity": "HIGH",
          "title": "Resource limits",
          "description": "CPU and memory resources should have a limit set for every container or a namespace to prevent resource exhaustion. This control identifies all the pods without resource limit definitions by checking their yaml definition file as well as their namespace LimitRange objects. It is also recommended to use ResourceQuota object to restrict overall namespace resources, but this is not verified by this control.",
          "remediation": "Define LimitRange and Resource Limits in the namespace or in the deployment/pod manifests.",
          "origin": "kubescape",
          "originId": "C-0009",
          "passed": false,
          "skipped": false,
          "skipReason": null
        }
      ]
    },
    {
      "kind": "ServiceAccount",
      "namespace": null,
      "name": "-kcs-serviceaccount",
      "checks": [
        {
          "severity": "HIGH",
          "title": "List Kubernetes secrets",
          "description": "Attackers who have permissions to access secrets can access sensitive information that might include credentials to various services. This control determines which user, group or service account can list/get secrets.",
          "remediation": "Monitor and approve list of users, groups and service accounts that can access secrets. Use exception mechanism to prevent repetitive the notifications.",
          "origin": "kubescape",
          "originId": "C-0015",
          "passed": false,
          "skipped": false,
          "skipReason": null
        },
        {
          "severity": "MEDIUM",
          "title": "Access container service account",
          "description": "Attackers who obtain access to a pod can use its SA token to communicate with KubeAPI server. All pods with SA token mounted (if such token has a Role or a ClusterRole binding) are considerred potentially dangerous.",
          "remediation": "Verify that RBAC is enabled. Follow the least privilege principle and ensure that only necessary pods have SA token mounted into them.",
          "origin": "kubescape",
          "originId": "C-0053",
          "passed": false,
          "skipped": false,
          "skipReason": null
        },
        {
          "severity": "MEDIUM",
          "title": "Data Destruction",
          "description": "Attackers may attempt to destroy data and resources in the cluster. This includes deleting deployments, configurations, storage, and compute resources. This control identifies all subjects that can delete resources.",
          "remediation": "You should follow the least privilege principle and minimize the number of subjects that can delete resources.",
          "origin": "kubescape",
          "originId": "C-0007",
          "passed": false,
          "skipped": false,
          "skipReason": null
        },
        {
          "severity": "MEDIUM",
          "title": "Automatic mapping of service account",
          "description": "Potential attacker may gain access to a pod and steal its service account token. Therefore, it is recommended to disable automatic mapping of the service account tokens in service account configuration and enable it only for pods that need to use them.",
          "remediation": "Disable automatic mounting of service account tokens to pods either at the service account level or at the individual pod level, by specifying the automountServiceAccountToken: false. Note that pod level takes precedence.",
          "origin": "kubescape",
          "originId": "C-0034",
          "passed": false,
          "skipped": false,
          "skipReason": null
        }
      ]
    },
    {
      "kind": "Deployment",
      "namespace": null,
      "name": "-kcs-deployment",
      "checks": [
        {
          "severity": "MEDIUM",
          "title": "Ingress and Egress blocked",
          "description": "Disable Ingress and Egress traffic on all pods wherever possible. It is recommended to define restrictive network policy on all new pods, and then enable sources/destinations that this pod must communicate with.",
          "remediation": "Define a network policy that restricts ingress and egress connections.",
          "origin": "kubescape",
          "originId": "C-0030",
          "passed": false,
          "skipped": false,
          "skipReason": null
        },
        {
          "severity": "MEDIUM",
          "title": "Configured liveness probe",
          "description": "Liveness probe is intended to ensure that workload remains healthy during its entire execution lifecycle, or otherwise restrat the container. It is highly recommended to define liveness probe for every worker container. This control finds all the pods where the Liveness probe is not configured.",
          "remediation": "Ensure Liveness probes are configured wherever possible.",
          "origin": "kubescape",
          "originId": "C-0056",
          "passed": false,
          "skipped": false,
          "skipReason": null
        },
        {
          "severity": "MEDIUM",
          "title": "Allow privilege escalation",
          "description": "Attackers may gain access to a container and uplift its privilege to enable excessive capabilities.",
          "remediation": "If your application does not need it, make sure the allowPrivilegeEscalation field of the securityContext is set to false.",
          "origin": "kubescape",
          "originId": "C-0016",
          "passed": false,
          "skipped": false,
          "skipReason": null
        },
        {
          "severity": "HIGH",
          "title": "Resources memory limit and request",
          "description": "This control identifies all Pods for which the memory limit is not set.",
          "remediation": "Set the memory limit or use exception mechanism to avoid unnecessary notifications.",
          "origin": "kubescape",
          "originId": "C-0004",
          "passed": false,
          "skipped": false,
          "skipReason": null
        },
        {
          "severity": "HIGH",
          "title": "Resources CPU limit and request",
          "description": "This control identifies all Pods for which the CPU limit is not set.",
          "remediation": "Set the CPU limit or use exception mechanism to avoid unnecessary notifications.",
          "origin": "kubescape",
          "originId": "C-0050",
          "passed": false,
          "skipped": false,
          "skipReason": null
        },
        {
          "severity": "MEDIUM",
          "title": "Linux hardening",
          "description": "Containers may be given more privileges than they actually need. This can increase the potential impact of a container compromise.",
          "remediation": "You can use AppArmor, Seccomp, SELinux and Linux Capabilities mechanisms to restrict containers abilities to utilize unwanted privileges.",
          "origin": "kubescape",
          "originId": "C-0055",
          "passed": false,
          "skipped": false,
          "skipReason": null
        },
        {
          "severity": "HIGH",
          "title": "Resource limits",
          "description": "CPU and memory resources should have a limit set for every container or a namespace to prevent resource exhaustion. This control identifies all the pods without resource limit definitions by checking their yaml definition file as well as their namespace LimitRange objects. It is also recommended to use ResourceQuota object to restrict overall namespace resources, but this is not verified by this control.",
          "remediation": "Define LimitRange and Resource Limits in the namespace or in the deployment/pod manifests.",
          "origin": "kubescape",
          "originId": "C-0009",
          "passed": false,
          "skipped": false,
          "skipReason": null
        }
      ]
    },
    {
      "kind": "Deployment",
      "namespace": null,
      "name": "-mongodb-deployment",
      "checks": [
        {
          "severity": "MEDIUM",
          "title": "Ingress and Egress blocked",
          "description": "Disable Ingress and Egress traffic on all pods wherever possible. It is recommended to define restrictive network policy on all new pods, and then enable sources/destinations that this pod must communicate with.",
          "remediation": "Define a network policy that restricts ingress and egress connections.",
          "origin": "kubescape",
          "originId": "C-0030",
          "passed": false,
          "skipped": false,
          "skipReason": null
        },
        {
          "severity": "MEDIUM",
          "title": "Configured liveness probe",
          "description": "Liveness probe is intended to ensure that workload remains healthy during its entire execution lifecycle, or otherwise restrat the container. It is highly recommended to define liveness probe for every worker container. This control finds all the pods where the Liveness probe is not configured.",
          "remediation": "Ensure Liveness probes are configured wherever possible.",
          "origin": "kubescape",
          "originId": "C-0056",
          "passed": false,
          "skipped": false,
          "skipReason": null
        },
        {
          "severity": "MEDIUM",
          "title": "Allow privilege escalation",
          "description": "Attackers may gain access to a container and uplift its privilege to enable excessive capabilities.",
          "remediation": "If your application does not need it, make sure the allowPrivilegeEscalation field of the securityContext is set to false.",
          "origin": "kubescape",
          "originId": "C-0016",
          "passed": false,
          "skipped": false,
          "skipReason": null
        },
        {
          "severity": "HIGH",
          "title": "Resources memory limit and request",
          "description": "This control identifies all Pods for which the memory limit is not set.",
          "remediation": "Set the memory limit or use exception mechanism to avoid unnecessary notifications.",
          "origin": "kubescape",
          "originId": "C-0004",
          "passed": false,
          "skipped": false,
          "skipReason": null
        },
        {
          "severity": "HIGH",
          "title": "Resources CPU limit and request",
          "description": "This control identifies all Pods for which the CPU limit is not set.",
          "remediation": "Set the CPU limit or use exception mechanism to avoid unnecessary notifications.",
          "origin": "kubescape",
          "originId": "C-0050",
          "passed": false,
          "skipped": false,
          "skipReason": null
        },
        {
          "severity": "MEDIUM",
          "title": "Linux hardening",
          "description": "Containers may be given more privileges than they actually need. This can increase the potential impact of a container compromise.",
          "remediation": "You can use AppArmor, Seccomp, SELinux and Linux Capabilities mechanisms to restrict containers abilities to utilize unwanted privileges.",
          "origin": "kubescape",
          "originId": "C-0055",
          "passed": false,
          "skipped": false,
          "skipReason": null
        },
        {
          "severity": "HIGH",
          "title": "Resource limits",
          "description": "CPU and memory resources should have a limit set for every container or a namespace to prevent resource exhaustion. This control identifies all the pods without resource limit definitions by checking their yaml definition file as well as their namespace LimitRange objects. It is also recommended to use ResourceQuota object to restrict overall namespace resources, but this is not verified by this control.",
          "remediation": "Define LimitRange and Resource Limits in the namespace or in the deployment/pod manifests.",
          "origin": "kubescape",
          "originId": "C-0009",
          "passed": false,
          "skipped": false,
          "skipReason": null
        }
      ]
    },
    {
      "kind": "Deployment",
      "namespace": null,
      "name": "-kube-security-scanner",
      "checks": [
        {
          "severity": "MEDIUM",
          "title": "Ingress and Egress blocked",
          "description": "Disable Ingress and Egress traffic on all pods wherever possible. It is recommended to define restrictive network policy on all new pods, and then enable sources/destinations that this pod must communicate with.",
          "remediation": "Define a network policy that restricts ingress and egress connections.",
          "origin": "kubescape",
          "originId": "C-0030",
          "passed": false,
          "skipped": false,
          "skipReason": null
        },
        {
          "severity": "MEDIUM",
          "title": "Allow privilege escalation",
          "description": "Attackers may gain access to a container and uplift its privilege to enable excessive capabilities.",
          "remediation": "If your application does not need it, make sure the allowPrivilegeEscalation field of the securityContext is set to false.",
          "origin": "kubescape",
          "originId": "C-0016",
          "passed": false,
          "skipped": false,
          "skipReason": null
        },
        {
          "severity": "HIGH",
          "title": "Resources memory limit and request",
          "description": "This control identifies all Pods for which the memory limit is not set.",
          "remediation": "Set the memory limit or use exception mechanism to avoid unnecessary notifications.",
          "origin": "kubescape",
          "originId": "C-0004",
          "passed": false,
          "skipped": false,
          "skipReason": null
        },
        {
          "severity": "HIGH",
          "title": "Resources CPU limit and request",
          "description": "This control identifies all Pods for which the CPU limit is not set.",
          "remediation": "Set the CPU limit or use exception mechanism to avoid unnecessary notifications.",
          "origin": "kubescape",
          "originId": "C-0050",
          "passed": false,
          "skipped": false,
          "skipReason": null
        },
        {
          "severity": "MEDIUM",
          "title": "Linux hardening",
          "description": "Containers may be given more privileges than they actually need. This can increase the potential impact of a container compromise.",
          "remediation": "You can use AppArmor, Seccomp, SELinux and Linux Capabilities mechanisms to restrict containers abilities to utilize unwanted privileges.",
          "origin": "kubescape",
          "originId": "C-0055",
          "passed": false,
          "skipped": false,
          "skipReason": null
        },
        {
          "severity": "HIGH",
          "title": "Resource limits",
          "description": "CPU and memory resources should have a limit set for every container or a namespace to prevent resource exhaustion. This control identifies all the pods without resource limit definitions by checking their yaml definition file as well as their namespace LimitRange objects. It is also recommended to use ResourceQuota object to restrict overall namespace resources, but this is not verified by this control.",
          "remediation": "Define LimitRange and Resource Limits in the namespace or in the deployment/pod manifests.",
          "origin": "kubescape",
          "originId": "C-0009",
          "passed": false,
          "skipped": false,
          "skipReason": null
        }
      ]
    },
    {
      "kind": "Job",
      "namespace": null,
      "name": "kube-bench",
      "checks": [
        {
          "severity": "MEDIUM",
          "title": "Ingress and Egress blocked",
          "description": "Disable Ingress and Egress traffic on all pods wherever possible. It is recommended to define restrictive network policy on all new pods, and then enable sources/destinations that this pod must communicate with.",
          "remediation": "Define a network policy that restricts ingress and egress connections.",
          "origin": "kubescape",
          "originId": "C-0030",
          "passed": false,
          "skipped": false,
          "skipReason": null
        },
        {
          "severity": "HIGH",
          "title": "Host PID/IPC privileges",
          "description": "Containers should be isolated from the host machine as much as possible. The hostPID and hostIPC fields in deployment yaml may allow cross-container influence and may expose the host itself to potentially malicious or destructive actions. This control identifies all pods using hostPID or hostIPC privileges.",
          "remediation": "Remove hostPID and hostIPC from the yaml file(s) privileges unless they are absolutely necessary.",
          "origin": "kubescape",
          "originId": "C-0038",
          "passed": false,
          "skipped": false,
          "skipReason": null
        },
        {
          "severity": "MEDIUM",
          "title": "Configured liveness probe",
          "description": "Liveness probe is intended to ensure that workload remains healthy during its entire execution lifecycle, or otherwise restrat the container. It is highly recommended to define liveness probe for every worker container. This control finds all the pods where the Liveness probe is not configured.",
          "remediation": "Ensure Liveness probes are configured wherever possible.",
          "origin": "kubescape",
          "originId": "C-0056",
          "passed": false,
          "skipped": false,
          "skipReason": null
        },
        {
          "severity": "HIGH",
          "title": "HostPath mount",
          "description": "Mounting host directory to the container can be used by attackers to get access to the underlying host. This control identifies all the pods using hostPath mount.",
          "remediation": "Remove hostPath mounts unless they are absolutely necessary and use exception mechanism to remove notifications.",
          "origin": "kubescape",
          "originId": "C-0048",
          "passed": false,
          "skipped": false,
          "skipReason": null
        },
        {
          "severity": "MEDIUM",
          "title": "Allow privilege escalation",
          "description": "Attackers may gain access to a container and uplift its privilege to enable excessive capabilities.",
          "remediation": "If your application does not need it, make sure the allowPrivilegeEscalation field of the securityContext is set to false.",
          "origin": "kubescape",
          "originId": "C-0016",
          "passed": false,
          "skipped": false,
          "skipReason": null
        },
        {
          "severity": "HIGH",
          "title": "Resources memory limit and request",
          "description": "This control identifies all Pods for which the memory limit is not set.",
          "remediation": "Set the memory limit or use exception mechanism to avoid unnecessary notifications.",
          "origin": "kubescape",
          "originId": "C-0004",
          "passed": false,
          "skipped": false,
          "skipReason": null
        },
        {
          "severity": "HIGH",
          "title": "Resources CPU limit and request",
          "description": "This control identifies all Pods for which the CPU limit is not set.",
          "remediation": "Set the CPU limit or use exception mechanism to avoid unnecessary notifications.",
          "origin": "kubescape",
          "originId": "C-0050",
          "passed": false,
          "skipped": false,
          "skipReason": null
        },
        {
          "severity": "MEDIUM",
          "title": "Linux hardening",
          "description": "Containers may be given more privileges than they actually need. This can increase the potential impact of a container compromise.",
          "remediation": "You can use AppArmor, Seccomp, SELinux and Linux Capabilities mechanisms to restrict containers abilities to utilize unwanted privileges.",
          "origin": "kubescape",
          "originId": "C-0055",
          "passed": false,
          "skipped": false,
          "skipReason": null
        },
        {
          "severity": "HIGH",
          "title": "Resource limits",
          "description": "CPU and memory resources should have a limit set for every container or a namespace to prevent resource exhaustion. This control identifies all the pods without resource limit definitions by checking their yaml definition file as well as their namespace LimitRange objects. It is also recommended to use ResourceQuota object to restrict overall namespace resources, but this is not verified by this control.",
          "remediation": "Define LimitRange and Resource Limits in the namespace or in the deployment/pod manifests.",
          "origin": "kubescape",
          "originId": "C-0009",
          "passed": false,
          "skipped": false,
          "skipReason": null
        },
        {
          "severity": "MEDIUM",
          "title": "Ingress and Egress blocked",
          "description": "Disable Ingress and Egress traffic on all pods wherever possible. It is recommended to define restrictive network policy on all new pods, and then enable sources/destinations that this pod must communicate with.",
          "remediation": "Define a network policy that restricts ingress and egress connections.",
          "origin": "kubescape",
          "originId": "C-0030",
          "passed": false,
          "skipped": false,
          "skipReason": null
        },
        {
          "severity": "HIGH",
          "title": "Host PID/IPC privileges",
          "description": "Containers should be isolated from the host machine as much as possible. The hostPID and hostIPC fields in deployment yaml may allow cross-container influence and may expose the host itself to potentially malicious or destructive actions. This control identifies all pods using hostPID or hostIPC privileges.",
          "remediation": "Remove hostPID and hostIPC from the yaml file(s) privileges unless they are absolutely necessary.",
          "origin": "kubescape",
          "originId": "C-0038",
          "passed": false,
          "skipped": false,
          "skipReason": null
        },
        {
          "severity": "MEDIUM",
          "title": "Configured liveness probe",
          "description": "Liveness probe is intended to ensure that workload remains healthy during its entire execution lifecycle, or otherwise restrat the container. It is highly recommended to define liveness probe for every worker container. This control finds all the pods where the Liveness probe is not configured.",
          "remediation": "Ensure Liveness probes are configured wherever possible.",
          "origin": "kubescape",
          "originId": "C-0056",
          "passed": false,
          "skipped": false,
          "skipReason": null
        },
        {
          "severity": "HIGH",
          "title": "HostPath mount",
          "description": "Mounting host directory to the container can be used by attackers to get access to the underlying host. This control identifies all the pods using hostPath mount.",
          "remediation": "Remove hostPath mounts unless they are absolutely necessary and use exception mechanism to remove notifications.",
          "origin": "kubescape",
          "originId": "C-0048",
          "passed": false,
          "skipped": false,
          "skipReason": null
        },
        {
          "severity": "MEDIUM",
          "title": "Allow privilege escalation",
          "description": "Attackers may gain access to a container and uplift its privilege to enable excessive capabilities.",
          "remediation": "If your application does not need it, make sure the allowPrivilegeEscalation field of the securityContext is set to false.",
          "origin": "kubescape",
          "originId": "C-0016",
          "passed": false,
          "skipped": false,
          "skipReason": null
        },
        {
          "severity": "HIGH",
          "title": "Resources memory limit and request",
          "description": "This control identifies all Pods for which the memory limit is not set.",
          "remediation": "Set the memory limit or use exception mechanism to avoid unnecessary notifications.",
          "origin": "kubescape",
          "originId": "C-0004",
          "passed": false,
          "skipped": false,
          "skipReason": null
        },
        {
          "severity": "HIGH",
          "title": "Resources CPU limit and request",
          "description": "This control identifies all Pods for which the CPU limit is not set.",
          "remediation": "Set the CPU limit or use exception mechanism to avoid unnecessary notifications.",
          "origin": "kubescape",
          "originId": "C-0050",
          "passed": false,
          "skipped": false,
          "skipReason": null
        },
        {
          "severity": "MEDIUM",
          "title": "Linux hardening",
          "description": "Containers may be given more privileges than they actually need. This can increase the potential impact of a container compromise.",
          "remediation": "You can use AppArmor, Seccomp, SELinux and Linux Capabilities mechanisms to restrict containers abilities to utilize unwanted privileges.",
          "origin": "kubescape",
          "originId": "C-0055",
          "passed": false,
          "skipped": false,
          "skipReason": null
        },
        {
          "severity": "HIGH",
          "title": "Resource limits",
          "description": "CPU and memory resources should have a limit set for every container or a namespace to prevent resource exhaustion. This control identifies all the pods without resource limit definitions by checking their yaml definition file as well as their namespace LimitRange objects. It is also recommended to use ResourceQuota object to restrict overall namespace resources, but this is not verified by this control.",
          "remediation": "Define LimitRange and Resource Limits in the namespace or in the deployment/pod manifests.",
          "origin": "kubescape",
          "originId": "C-0009",
          "passed": false,
          "skipped": false,
          "skipReason": null
        }
      ]
    },
    {
      "kind": "Pod",
      "namespace": null,
      "name": "-kube-security-scanner-test-connection",
      "checks": [
        {
          "severity": "MEDIUM",
          "title": "Ingress and Egress blocked",
          "description": "Disable Ingress and Egress traffic on all pods wherever possible. It is recommended to define restrictive network policy on all new pods, and then enable sources/destinations that this pod must communicate with.",
          "remediation": "Define a network policy that restricts ingress and egress connections.",
          "origin": "kubescape",
          "originId": "C-0030",
          "passed": false,
          "skipped": false,
          "skipReason": null
        },
        {
          "severity": "MEDIUM",
          "title": "Configured liveness probe",
          "description": "Liveness probe is intended to ensure that workload remains healthy during its entire execution lifecycle, or otherwise restrat the container. It is highly recommended to define liveness probe for every worker container. This control finds all the pods where the Liveness probe is not configured.",
          "remediation": "Ensure Liveness probes are configured wherever possible.",
          "origin": "kubescape",
          "originId": "C-0056",
          "passed": false,
          "skipped": false,
          "skipReason": null
        },
        {
          "severity": "MEDIUM",
          "title": "Allow privilege escalation",
          "description": "Attackers may gain access to a container and uplift its privilege to enable excessive capabilities.",
          "remediation": "If your application does not need it, make sure the allowPrivilegeEscalation field of the securityContext is set to false.",
          "origin": "kubescape",
          "originId": "C-0016",
          "passed": false,
          "skipped": false,
          "skipReason": null
        },
        {
          "severity": "HIGH",
          "title": "Resources memory limit and request",
          "description": "This control identifies all Pods for which the memory limit is not set.",
          "remediation": "Set the memory limit or use exception mechanism to avoid unnecessary notifications.",
          "origin": "kubescape",
          "originId": "C-0004",
          "passed": false,
          "skipped": false,
          "skipReason": null
        },
        {
          "severity": "HIGH",
          "title": "Resources CPU limit and request",
          "description": "This control identifies all Pods for which the CPU limit is not set.",
          "remediation": "Set the CPU limit or use exception mechanism to avoid unnecessary notifications.",
          "origin": "kubescape",
          "originId": "C-0050",
          "passed": false,
          "skipped": false,
          "skipReason": null
        },
        {
          "severity": "MEDIUM",
          "title": "Linux hardening",
          "description": "Containers may be given more privileges than they actually need. This can increase the potential impact of a container compromise.",
          "remediation": "You can use AppArmor, Seccomp, SELinux and Linux Capabilities mechanisms to restrict containers abilities to utilize unwanted privileges.",
          "origin": "kubescape",
          "originId": "C-0055",
          "passed": false,
          "skipped": false,
          "skipReason": null
        },
        {
          "severity": "HIGH",
          "title": "Resource limits",
          "description": "CPU and memory resources should have a limit set for every container or a namespace to prevent resource exhaustion. This control identifies all the pods without resource limit definitions by checking their yaml definition file as well as their namespace LimitRange objects. It is also recommended to use ResourceQuota object to restrict overall namespace resources, but this is not verified by this control.",
          "remediation": "Define LimitRange and Resource Limits in the namespace or in the deployment/pod manifests.",
          "origin": "kubescape",
          "originId": "C-0009",
          "passed": false,
          "skipped": false,
          "skipReason": null
        }
      ]
    }
  ],
  "skippedChecks": [
    {
      "severity": "HIGH",
      "title": "Forbidden Container Registries",
      "description": "In cases where the Kubernetes cluster is provided by a CSP (e.g., AKS in Azure, GKE in GCP, or EKS in AWS), compromised cloud credential can lead to the cluster takeover. Attackers may abuse cloud account credentials or IAM mechanism to the cluster’s management layer.",
      "remediation": "Limit the registries from which you pull container images from",
      "origin": "kubescape",
      "originId": "C-0001",
      "passed": false,
      "skipped": true,
      "skipReason": "Control configurations are empty"
    },
    {
      "severity": "MEDIUM",
      "title": "Images from allowed registry",
      "description": "This control is intended to ensure that all the used container images are taken from the authorized repositories. It allows user to list all the approved repositories and will fail all the images taken from any repository outside of this list.",
      "remediation": "You should enable all trusted repositories in the parameters of this control.",
      "origin": "kubescape",
      "originId": "C-0078",
      "passed": false,
      "skipped": true,
      "skipReason": "Control configurations are empty"
    }
  ]
}
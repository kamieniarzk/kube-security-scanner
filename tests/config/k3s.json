{
  "scanId": "65bfd268183fab202e129eb8",
  "aggregated": true,
  "namespacedResources": {
    "default": [
      {
        "kind": "Service",
        "namespace": "default",
        "name": "kubernetes",
        "checks": [
          {
            "severity": "KUBE_SCORE",
            "title": "Service Targets Pod",
            "description": "Makes sure that all Services targets a Pod",
            "remediation": null,
            "origin": "kube-score",
            "originId": "service-targets-pod",
            "passed": false,
            "skipped": false,
            "skipReason": null
          }
        ]
      }
    ],
    "kube-system": [
      {
        "kind": "ServiceAccount",
        "namespace": "kube-system",
        "name": "helm-traefik-crd",
        "checks": [
          {
            "severity": "MEDIUM",
            "title": "Cluster-admin binding",
            "description": "Attackers who have cluster admin permissions (can perform any action on any resource), can take advantage of their privileges for malicious activities. This control determines which subjects have cluster admin permissions.",
            "remediation": "You should apply least privilege principle. Make sure cluster admin permissions are granted only when it is absolutely necessary. Don't use subjects with such high permissions for daily operations.",
            "origin": "kubescape",
            "originId": "C-0035",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Data Destruction",
            "description": "Attackers may attempt to destroy data and resources in the cluster. This includes deleting deployments, configurations, storage, and compute resources. This control identifies all subjects that can delete resources.",
            "remediation": "You should follow the least privilege principle and minimize the number of subjects that can delete resources.",
            "origin": "kubescape",
            "originId": "C-0007",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "No impersonation",
            "description": "Impersonation is an explicit RBAC permission to use other roles rather than the one assigned to a user, group or service account. This is sometimes needed for testing purposes. However, it is highly recommended not to use this capability in the production environments for daily operations. This control identifies all subjects whose roles include impersonate verb.",
            "remediation": "Either remove the impersonate verb from the role where it was found or make sure that this role is not bound to users, groups or service accounts used for ongoing cluster operations. If necessary, bind this role to a subject only for specific needs for limited time period.",
            "origin": "kubescape",
            "originId": "C-0065",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Delete Kubernetes events",
            "description": "Attackers may delete Kubernetes events to avoid detection of their activity in the cluster. This control identifies all the subjects that can delete Kubernetes events.",
            "remediation": "You should follow the least privilege principle. Minimize the number of subjects who can delete Kubernetes events. Avoid using these subjects in the daily operations.",
            "origin": "kubescape",
            "originId": "C-0031",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Portforwarding privileges",
            "description": "Attackers with relevant RBAC permission can use “kubectl portforward” command to establish direct communication with pods from within the cluster or even remotely. Such communication will most likely bypass existing security measures in the cluster. This control determines which subjects have permissions to use this command.",
            "remediation": "It is recommended to prohibit “kubectl portforward” command in production environments. It is also recommended not to use subjects with this permission for daily cluster operations.",
            "origin": "kubescape",
            "originId": "C-0063",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Exec into container",
            "description": "Attackers with relevant permissions can run malicious commands in the context of legitimate containers in the cluster using “kubectl exec” command. This control determines which subjects have permissions to use this command.",
            "remediation": "It is recommended to prohibit “kubectl exec” command in production environments. It is also recommended not to use subjects with this permission for daily cluster operations.",
            "origin": "kubescape",
            "originId": "C-0002",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Access container service account",
            "description": "Attackers who obtain access to a pod can use its SA token to communicate with KubeAPI server. All pods with SA token mounted (if such token has a Role or a ClusterRole binding) are considerred potentially dangerous.",
            "remediation": "Verify that RBAC is enabled. Follow the least privilege principle and ensure that only necessary pods have SA token mounted into them.",
            "origin": "kubescape",
            "originId": "C-0053",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "List Kubernetes secrets",
            "description": "Attackers who have permissions to access secrets can access sensitive information that might include credentials to various services. This control determines which user, group or service account can list/get secrets.",
            "remediation": "Monitor and approve list of users, groups and service accounts that can access secrets. Use exception mechanism to prevent repetitive the notifications.",
            "origin": "kubescape",
            "originId": "C-0015",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Automatic mapping of service account",
            "description": "Potential attacker may gain access to a pod and steal its service account token. Therefore, it is recommended to disable automatic mapping of the service account tokens in service account configuration and enable it only for pods that need to use them.",
            "remediation": "Disable automatic mounting of service account tokens to pods either at the service account level or at the individual pod level, by specifying the automountServiceAccountToken: false. Note that pod level takes precedence.",
            "origin": "kubescape",
            "originId": "C-0034",
            "passed": false,
            "skipped": false,
            "skipReason": null
          }
        ]
      },
      {
        "kind": "Pod",
        "namespace": "kube-system",
        "name": "coredns-77ccd57875-kjm99",
        "checks": [
          {
            "severity": "KUBE_SCORE",
            "title": "Container Image Pull Policy",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": null,
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "KUBE_SCORE",
            "title": "Container Security Context User Group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": null,
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "KUBE_SCORE",
            "title": "Container Ephemeral Storage Request and Limit",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": null,
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "KUBE_SCORE",
            "title": "Pod NetworkPolicy",
            "description": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "remediation": null,
            "origin": "kube-score",
            "originId": "pod-networkpolicy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "KUBE_SCORE",
            "title": "Container Resources",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": null,
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "KUBE_SCORE",
            "title": "Pod NetworkPolicy",
            "description": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "remediation": null,
            "origin": "kube-score",
            "originId": "pod-networkpolicy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "KUBE_SCORE",
            "title": "Container Resources",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": null,
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "KUBE_SCORE",
            "title": "Container Image Pull Policy",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": null,
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "KUBE_SCORE",
            "title": "Container Security Context User Group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": null,
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "KUBE_SCORE",
            "title": "Container Ephemeral Storage Request and Limit",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": null,
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          }
        ]
      },
      {
        "kind": "Role",
        "namespace": "kube-system",
        "name": "system:controller:token-cleaner",
        "checks": [
          {
            "severity": "MEDIUM",
            "title": "Manage namespace secrets",
            "description": "Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.",
            "remediation": "Manage namespace secrets are not allowed. Remove resource 'secrets' from role",
            "origin": "trivy",
            "originId": "KSV113",
            "passed": false,
            "skipped": false,
            "skipReason": null
          }
        ]
      },
      {
        "kind": "Deployment",
        "namespace": "kube-system",
        "name": "coredns",
        "checks": [
          {
            "severity": "MEDIUM",
            "title": "Runs as root user",
            "description": "Force the running image to run as a non-root user to ensure least privileges.",
            "remediation": "Set 'containers[].securityContext.runAsNonRoot' to true.",
            "origin": "trivy",
            "originId": "KSV012",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Specific capabilities added",
            "description": "According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.",
            "remediation": "Do not set spec.containers[*].securityContext.capabilities.add and spec.initContainers[*].securityContext.capabilities.add.",
            "origin": "trivy",
            "originId": "KSV022",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Seccomp policies disabled",
            "description": "A program inside the container can bypass Seccomp protection policies.",
            "remediation": "Specify seccomp either by annotation or by seccomp profile type having allowed values as per pod security standards",
            "origin": "trivy",
            "originId": "KSV104",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "Prevent binding to privileged ports",
            "description": "The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.",
            "remediation": "Do not map the container ports to privileged host ports when starting a container.",
            "origin": "trivy",
            "originId": "KSV117",
            "passed": false,
            "skipped": false,
            "skipReason": null
          }
        ]
      },
      {
        "kind": "ServiceAccount",
        "namespace": "kube-system",
        "name": "traefik",
        "checks": [
          {
            "severity": "MEDIUM",
            "title": "Automatic mapping of service account",
            "description": "Potential attacker may gain access to a pod and steal its service account token. Therefore, it is recommended to disable automatic mapping of the service account tokens in service account configuration and enable it only for pods that need to use them.",
            "remediation": "Disable automatic mounting of service account tokens to pods either at the service account level or at the individual pod level, by specifying the automountServiceAccountToken: false. Note that pod level takes precedence.",
            "origin": "kubescape",
            "originId": "C-0034",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Access container service account",
            "description": "Attackers who obtain access to a pod can use its SA token to communicate with KubeAPI server. All pods with SA token mounted (if such token has a Role or a ClusterRole binding) are considerred potentially dangerous.",
            "remediation": "Verify that RBAC is enabled. Follow the least privilege principle and ensure that only necessary pods have SA token mounted into them.",
            "origin": "kubescape",
            "originId": "C-0053",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "List Kubernetes secrets",
            "description": "Attackers who have permissions to access secrets can access sensitive information that might include credentials to various services. This control determines which user, group or service account can list/get secrets.",
            "remediation": "Monitor and approve list of users, groups and service accounts that can access secrets. Use exception mechanism to prevent repetitive the notifications.",
            "origin": "kubescape",
            "originId": "C-0015",
            "passed": false,
            "skipped": false,
            "skipReason": null
          }
        ]
      },
      {
        "kind": "Deployment",
        "namespace": "kube-system",
        "name": "local-path-provisioner",
        "checks": [
          {
            "severity": "MEDIUM",
            "title": "Can elevate its own privileges",
            "description": "A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.",
            "remediation": "Set 'set containers[].securityContext.allowPrivilegeEscalation' to 'false'.",
            "origin": "trivy",
            "originId": "KSV001",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Runs as root user",
            "description": "Force the running image to run as a non-root user to ensure least privileges.",
            "remediation": "Set 'containers[].securityContext.runAsNonRoot' to true.",
            "origin": "trivy",
            "originId": "KSV012",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Seccomp policies disabled",
            "description": "A program inside the container can bypass Seccomp protection policies.",
            "remediation": "Specify seccomp either by annotation or by seccomp profile type having allowed values as per pod security standards",
            "origin": "trivy",
            "originId": "KSV104",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "LOW",
            "title": "Immutable container filesystem",
            "description": "Mutable container filesystem can be abused to inject malicious code or data into containers. Use immutable (read-only) filesystem to limit potential attacks.",
            "remediation": "Set the filesystem of the container to read-only when possible (pod securityContext, readOnlyRootFilesystem: true). If containers application needs to write into the filesystem, it is recommended to mount secondary filesystems for specific directories where application require write access.",
            "origin": "kubescape",
            "originId": "C-0017",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "LOW",
            "title": "Configured readiness probe",
            "description": "Readiness probe is intended to ensure that workload is ready to process network traffic. It is highly recommended to define readiness probe for every worker container. This control finds all the pods where the readiness probe is not configured.",
            "remediation": "Ensure Readiness probes are configured wherever possible.",
            "origin": "kubescape",
            "originId": "C-0018",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Allow privilege escalation",
            "description": "Attackers may gain access to a container and uplift its privilege to enable excessive capabilities.",
            "remediation": "If your application does not need it, make sure the allowPrivilegeEscalation field of the securityContext is set to false.",
            "origin": "kubescape",
            "originId": "C-0016",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "LOW",
            "title": "K8s common labels usage",
            "description": "Kubernetes common labels help manage and monitor Kubernetes cluster using different tools such as kubectl, dashboard and others in an interoperable way. Refer to https://kubernetes.io/docs/concepts/overview/working-with-objects/common-labels/ for more information. This control helps you find objects that don't have any of these labels defined.",
            "remediation": "Define applicable labels or use the exception mechanism to prevent further notifications.",
            "origin": "kubescape",
            "originId": "C-0077",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "LOW",
            "title": "Label usage for resources",
            "description": "It is recommended to set labels that identify semantic attributes of your application or deployment. For example, { app: myapp, tier: frontend, phase: test, deployment: v3 }. These labels can used to assign policies to logical groups of the deployments as well as for presentation and tracking purposes. This control helps you find deployments without any of the expected labels.",
            "remediation": "Define labels that are most suitable to your needs of use the exceptions to prevent further notifications.",
            "origin": "kubescape",
            "originId": "C-0076",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "Resources memory limit and request",
            "description": "This control identifies all Pods for which the memory limit is not set.",
            "remediation": "Set the memory limit or use exception mechanism to avoid unnecessary notifications.",
            "origin": "kubescape",
            "originId": "C-0004",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Configured liveness probe",
            "description": "Liveness probe is intended to ensure that workload remains healthy during its entire execution lifecycle, or otherwise restrat the container. It is highly recommended to define liveness probe for every worker container. This control finds all the pods where the Liveness probe is not configured.",
            "remediation": "Ensure Liveness probes are configured wherever possible.",
            "origin": "kubescape",
            "originId": "C-0056",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "Resources CPU limit and request",
            "description": "This control identifies all Pods for which the CPU limit is not set.",
            "remediation": "Set the CPU limit or use exception mechanism to avoid unnecessary notifications.",
            "origin": "kubescape",
            "originId": "C-0050",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Ingress and Egress blocked",
            "description": "Disable Ingress and Egress traffic on all pods wherever possible. It is recommended to define restrictive network policy on all new pods, and then enable sources/destinations that this pod must communicate with.",
            "remediation": "Define a network policy that restricts ingress and egress connections.",
            "origin": "kubescape",
            "originId": "C-0030",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Linux hardening",
            "description": "Containers may be given more privileges than they actually need. This can increase the potential impact of a container compromise.",
            "remediation": "You can use AppArmor, Seccomp, SELinux and Linux Capabilities mechanisms to restrict containers abilities to utilize unwanted privileges.",
            "origin": "kubescape",
            "originId": "C-0055",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "Resource limits",
            "description": "CPU and memory resources should have a limit set for every container or a namespace to prevent resource exhaustion. This control identifies all the pods without resource limit definitions by checking their yaml definition file as well as their namespace LimitRange objects. It is also recommended to use ResourceQuota object to restrict overall namespace resources, but this is not verified by this control.",
            "remediation": "Define LimitRange and Resource Limits in the namespace or in the deployment/pod manifests.",
            "origin": "kubescape",
            "originId": "C-0009",
            "passed": false,
            "skipped": false,
            "skipReason": null
          }
        ]
      },
      {
        "kind": "ConfigMap",
        "namespace": "kube-system",
        "name": "extension-apiserver-authentication",
        "checks": [
          {
            "severity": "MEDIUM",
            "title": "ConfigMap with sensitive content",
            "description": "Storing sensitive content such as usernames and email addresses in configMaps is unsafe",
            "remediation": "Remove sensitive content from configMap data value",
            "origin": "trivy",
            "originId": "AVD-KSV-01010",
            "passed": false,
            "skipped": false,
            "skipReason": null
          }
        ]
      },
      {
        "kind": "Pod",
        "namespace": "kube-system",
        "name": "svclb-traefik-6bae028c-8q5dm",
        "checks": [
          {
            "severity": "KUBE_SCORE",
            "title": "Container Image Pull Policy",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": null,
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "KUBE_SCORE",
            "title": "Container Ephemeral Storage Request and Limit",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": null,
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "KUBE_SCORE",
            "title": "Container Security Context User Group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": null,
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "KUBE_SCORE",
            "title": "Container Security Context ReadOnlyRootFilesystem",
            "description": "Makes sure that all pods have a security context with read only filesystem set",
            "remediation": null,
            "origin": "kube-score",
            "originId": "container-security-context-readonlyrootfilesystem",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "KUBE_SCORE",
            "title": "Container Resources",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": null,
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "KUBE_SCORE",
            "title": "Pod NetworkPolicy",
            "description": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "remediation": null,
            "origin": "kube-score",
            "originId": "pod-networkpolicy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "KUBE_SCORE",
            "title": "Container Ephemeral Storage Request and Limit",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": null,
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "KUBE_SCORE",
            "title": "Container Security Context User Group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": null,
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "KUBE_SCORE",
            "title": "Container Security Context ReadOnlyRootFilesystem",
            "description": "Makes sure that all pods have a security context with read only filesystem set",
            "remediation": null,
            "origin": "kube-score",
            "originId": "container-security-context-readonlyrootfilesystem",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "KUBE_SCORE",
            "title": "Pod NetworkPolicy",
            "description": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "remediation": null,
            "origin": "kube-score",
            "originId": "pod-networkpolicy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "KUBE_SCORE",
            "title": "Container Resources",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": null,
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "KUBE_SCORE",
            "title": "Container Image Pull Policy",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": null,
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          }
        ]
      },
      {
        "kind": "Role",
        "namespace": "kube-system",
        "name": "system:controller:cloud-provider",
        "checks": [
          {
            "severity": "MEDIUM",
            "title": "Manage configmaps",
            "description": "Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.",
            "remediation": "Remove write permission verbs for resource 'configmaps'",
            "origin": "trivy",
            "originId": "KSV049",
            "passed": false,
            "skipped": false,
            "skipReason": null
          }
        ]
      },
      {
        "kind": "ServiceAccount",
        "namespace": "kube-system",
        "name": "svclb",
        "checks": [
          {
            "severity": "MEDIUM",
            "title": "Automatic mapping of service account",
            "description": "Potential attacker may gain access to a pod and steal its service account token. Therefore, it is recommended to disable automatic mapping of the service account tokens in service account configuration and enable it only for pods that need to use them.",
            "remediation": "Disable automatic mounting of service account tokens to pods either at the service account level or at the individual pod level, by specifying the automountServiceAccountToken: false. Note that pod level takes precedence.",
            "origin": "kubescape",
            "originId": "C-0034",
            "passed": false,
            "skipped": false,
            "skipReason": null
          }
        ]
      },
      {
        "kind": "Deployment",
        "namespace": "kube-system",
        "name": "traefik",
        "checks": [
          {
            "severity": "MEDIUM",
            "title": "Seccomp policies disabled",
            "description": "A program inside the container can bypass Seccomp protection policies.",
            "remediation": "Specify seccomp either by annotation or by seccomp profile type having allowed values as per pod security standards",
            "origin": "trivy",
            "originId": "KSV104",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "LOW",
            "title": "Label usage for resources",
            "description": "It is recommended to set labels that identify semantic attributes of your application or deployment. For example, { app: myapp, tier: frontend, phase: test, deployment: v3 }. These labels can used to assign policies to logical groups of the deployments as well as for presentation and tracking purposes. This control helps you find deployments without any of the expected labels.",
            "remediation": "Define labels that are most suitable to your needs of use the exceptions to prevent further notifications.",
            "origin": "kubescape",
            "originId": "C-0076",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "Resources memory limit and request",
            "description": "This control identifies all Pods for which the memory limit is not set.",
            "remediation": "Set the memory limit or use exception mechanism to avoid unnecessary notifications.",
            "origin": "kubescape",
            "originId": "C-0004",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "Resources CPU limit and request",
            "description": "This control identifies all Pods for which the CPU limit is not set.",
            "remediation": "Set the CPU limit or use exception mechanism to avoid unnecessary notifications.",
            "origin": "kubescape",
            "originId": "C-0050",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Ingress and Egress blocked",
            "description": "Disable Ingress and Egress traffic on all pods wherever possible. It is recommended to define restrictive network policy on all new pods, and then enable sources/destinations that this pod must communicate with.",
            "remediation": "Define a network policy that restricts ingress and egress connections.",
            "origin": "kubescape",
            "originId": "C-0030",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "Resource limits",
            "description": "CPU and memory resources should have a limit set for every container or a namespace to prevent resource exhaustion. This control identifies all the pods without resource limit definitions by checking their yaml definition file as well as their namespace LimitRange objects. It is also recommended to use ResourceQuota object to restrict overall namespace resources, but this is not verified by this control.",
            "remediation": "Define LimitRange and Resource Limits in the namespace or in the deployment/pod manifests.",
            "origin": "kubescape",
            "originId": "C-0009",
            "passed": false,
            "skipped": false,
            "skipReason": null
          }
        ]
      },
      {
        "kind": "Deployment",
        "namespace": "kube-system",
        "name": "metrics-server",
        "checks": [
          {
            "severity": "MEDIUM",
            "title": "Seccomp policies disabled",
            "description": "A program inside the container can bypass Seccomp protection policies.",
            "remediation": "Specify seccomp either by annotation or by seccomp profile type having allowed values as per pod security standards",
            "origin": "trivy",
            "originId": "KSV104",
            "passed": false,
            "skipped": false,
            "skipReason": null
          }
        ]
      },
      {
        "kind": "User",
        "namespace": "kube-system",
        "name": "k3s-cloud-controller-manager",
        "checks": [
          {
            "severity": "MEDIUM",
            "title": "Data Destruction",
            "description": "Attackers may attempt to destroy data and resources in the cluster. This includes deleting deployments, configurations, storage, and compute resources. This control identifies all subjects that can delete resources.",
            "remediation": "You should follow the least privilege principle and minimize the number of subjects that can delete resources.",
            "origin": "kubescape",
            "originId": "C-0007",
            "passed": false,
            "skipped": false,
            "skipReason": null
          }
        ]
      },
      {
        "kind": "ServiceAccount",
        "namespace": "kube-system",
        "name": "helm-traefik",
        "checks": [
          {
            "severity": "MEDIUM",
            "title": "Automatic mapping of service account",
            "description": "Potential attacker may gain access to a pod and steal its service account token. Therefore, it is recommended to disable automatic mapping of the service account tokens in service account configuration and enable it only for pods that need to use them.",
            "remediation": "Disable automatic mounting of service account tokens to pods either at the service account level or at the individual pod level, by specifying the automountServiceAccountToken: false. Note that pod level takes precedence.",
            "origin": "kubescape",
            "originId": "C-0034",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Cluster-admin binding",
            "description": "Attackers who have cluster admin permissions (can perform any action on any resource), can take advantage of their privileges for malicious activities. This control determines which subjects have cluster admin permissions.",
            "remediation": "You should apply least privilege principle. Make sure cluster admin permissions are granted only when it is absolutely necessary. Don't use subjects with such high permissions for daily operations.",
            "origin": "kubescape",
            "originId": "C-0035",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Data Destruction",
            "description": "Attackers may attempt to destroy data and resources in the cluster. This includes deleting deployments, configurations, storage, and compute resources. This control identifies all subjects that can delete resources.",
            "remediation": "You should follow the least privilege principle and minimize the number of subjects that can delete resources.",
            "origin": "kubescape",
            "originId": "C-0007",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "No impersonation",
            "description": "Impersonation is an explicit RBAC permission to use other roles rather than the one assigned to a user, group or service account. This is sometimes needed for testing purposes. However, it is highly recommended not to use this capability in the production environments for daily operations. This control identifies all subjects whose roles include impersonate verb.",
            "remediation": "Either remove the impersonate verb from the role where it was found or make sure that this role is not bound to users, groups or service accounts used for ongoing cluster operations. If necessary, bind this role to a subject only for specific needs for limited time period.",
            "origin": "kubescape",
            "originId": "C-0065",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Delete Kubernetes events",
            "description": "Attackers may delete Kubernetes events to avoid detection of their activity in the cluster. This control identifies all the subjects that can delete Kubernetes events.",
            "remediation": "You should follow the least privilege principle. Minimize the number of subjects who can delete Kubernetes events. Avoid using these subjects in the daily operations.",
            "origin": "kubescape",
            "originId": "C-0031",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Portforwarding privileges",
            "description": "Attackers with relevant RBAC permission can use “kubectl portforward” command to establish direct communication with pods from within the cluster or even remotely. Such communication will most likely bypass existing security measures in the cluster. This control determines which subjects have permissions to use this command.",
            "remediation": "It is recommended to prohibit “kubectl portforward” command in production environments. It is also recommended not to use subjects with this permission for daily cluster operations.",
            "origin": "kubescape",
            "originId": "C-0063",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Exec into container",
            "description": "Attackers with relevant permissions can run malicious commands in the context of legitimate containers in the cluster using “kubectl exec” command. This control determines which subjects have permissions to use this command.",
            "remediation": "It is recommended to prohibit “kubectl exec” command in production environments. It is also recommended not to use subjects with this permission for daily cluster operations.",
            "origin": "kubescape",
            "originId": "C-0002",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Access container service account",
            "description": "Attackers who obtain access to a pod can use its SA token to communicate with KubeAPI server. All pods with SA token mounted (if such token has a Role or a ClusterRole binding) are considerred potentially dangerous.",
            "remediation": "Verify that RBAC is enabled. Follow the least privilege principle and ensure that only necessary pods have SA token mounted into them.",
            "origin": "kubescape",
            "originId": "C-0053",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "List Kubernetes secrets",
            "description": "Attackers who have permissions to access secrets can access sensitive information that might include credentials to various services. This control determines which user, group or service account can list/get secrets.",
            "remediation": "Monitor and approve list of users, groups and service accounts that can access secrets. Use exception mechanism to prevent repetitive the notifications.",
            "origin": "kubescape",
            "originId": "C-0015",
            "passed": false,
            "skipped": false,
            "skipReason": null
          }
        ]
      },
      {
        "kind": "Role",
        "namespace": "kube-system",
        "name": "system::leader-locking-kube-controller-manager",
        "checks": [
          {
            "severity": "MEDIUM",
            "title": "Manage configmaps",
            "description": "Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.",
            "remediation": "Remove write permission verbs for resource 'configmaps'",
            "origin": "trivy",
            "originId": "KSV049",
            "passed": false,
            "skipped": false,
            "skipReason": null
          }
        ]
      },
      {
        "kind": "DaemonSet",
        "namespace": "kube-system",
        "name": "svclb-traefik-6bae028c",
        "checks": [
          {
            "severity": "MEDIUM",
            "title": "Can elevate its own privileges",
            "description": "A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.",
            "remediation": "Set 'set containers[].securityContext.allowPrivilegeEscalation' to 'false'.",
            "origin": "trivy",
            "originId": "KSV001",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Can elevate its own privileges",
            "description": "A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.",
            "remediation": "Set 'set containers[].securityContext.allowPrivilegeEscalation' to 'false'.",
            "origin": "trivy",
            "originId": "KSV001",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Runs as root user",
            "description": "Force the running image to run as a non-root user to ensure least privileges.",
            "remediation": "Set 'containers[].securityContext.runAsNonRoot' to true.",
            "origin": "trivy",
            "originId": "KSV012",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Runs as root user",
            "description": "Force the running image to run as a non-root user to ensure least privileges.",
            "remediation": "Set 'containers[].securityContext.runAsNonRoot' to true.",
            "origin": "trivy",
            "originId": "KSV012",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Specific capabilities added",
            "description": "According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.",
            "remediation": "Do not set spec.containers[*].securityContext.capabilities.add and spec.initContainers[*].securityContext.capabilities.add.",
            "origin": "trivy",
            "originId": "KSV022",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Specific capabilities added",
            "description": "According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.",
            "remediation": "Do not set spec.containers[*].securityContext.capabilities.add and spec.initContainers[*].securityContext.capabilities.add.",
            "origin": "trivy",
            "originId": "KSV022",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "Access to host ports",
            "description": "According to pod security standard 'Host Ports', hostPorts should be disallowed, or at minimum restricted to a known list.",
            "remediation": "Do not set spec.containers[*].ports[*].hostPort and spec.initContainers[*].ports[*].hostPort.",
            "origin": "trivy",
            "originId": "KSV024",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "Access to host ports",
            "description": "According to pod security standard 'Host Ports', hostPorts should be disallowed, or at minimum restricted to a known list.",
            "remediation": "Do not set spec.containers[*].ports[*].hostPort and spec.initContainers[*].ports[*].hostPort.",
            "origin": "trivy",
            "originId": "KSV024",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "Access to host ports",
            "description": "According to pod security standard 'Host Ports', hostPorts should be disallowed, or at minimum restricted to a known list.",
            "remediation": "Do not set spec.containers[*].ports[*].hostPort and spec.initContainers[*].ports[*].hostPort.",
            "origin": "trivy",
            "originId": "KSV024",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "Access to host ports",
            "description": "According to pod security standard 'Host Ports', hostPorts should be disallowed, or at minimum restricted to a known list.",
            "remediation": "Do not set spec.containers[*].ports[*].hostPort and spec.initContainers[*].ports[*].hostPort.",
            "origin": "trivy",
            "originId": "KSV024",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Unsafe sysctl options set",
            "description": "Sysctls can disable security mechanisms or affect all containers on a host, and should be disallowed except for an allowed 'safe' subset. A sysctl is considered safe if it is namespaced in the container or the Pod, and it is isolated from other Pods or processes on the same Node.",
            "remediation": "Do not set 'spec.securityContext.sysctls' or set to values in an allowed subset",
            "origin": "trivy",
            "originId": "KSV026",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Seccomp policies disabled",
            "description": "A program inside the container can bypass Seccomp protection policies.",
            "remediation": "Specify seccomp either by annotation or by seccomp profile type having allowed values as per pod security standards",
            "origin": "trivy",
            "originId": "KSV104",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Seccomp policies disabled",
            "description": "A program inside the container can bypass Seccomp protection policies.",
            "remediation": "Specify seccomp either by annotation or by seccomp profile type having allowed values as per pod security standards",
            "origin": "trivy",
            "originId": "KSV104",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "Prevent binding to privileged ports",
            "description": "The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.",
            "remediation": "Do not map the container ports to privileged host ports when starting a container.",
            "origin": "trivy",
            "originId": "KSV117",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "LOW",
            "title": "Immutable container filesystem",
            "description": "Mutable container filesystem can be abused to inject malicious code or data into containers. Use immutable (read-only) filesystem to limit potential attacks.",
            "remediation": "Set the filesystem of the container to read-only when possible (pod securityContext, readOnlyRootFilesystem: true). If containers application needs to write into the filesystem, it is recommended to mount secondary filesystems for specific directories where application require write access.",
            "origin": "kubescape",
            "originId": "C-0017",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "LOW",
            "title": "Configured readiness probe",
            "description": "Readiness probe is intended to ensure that workload is ready to process network traffic. It is highly recommended to define readiness probe for every worker container. This control finds all the pods where the readiness probe is not configured.",
            "remediation": "Ensure Readiness probes are configured wherever possible.",
            "origin": "kubescape",
            "originId": "C-0018",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Allow privilege escalation",
            "description": "Attackers may gain access to a container and uplift its privilege to enable excessive capabilities.",
            "remediation": "If your application does not need it, make sure the allowPrivilegeEscalation field of the securityContext is set to false.",
            "origin": "kubescape",
            "originId": "C-0016",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "LOW",
            "title": "K8s common labels usage",
            "description": "Kubernetes common labels help manage and monitor Kubernetes cluster using different tools such as kubectl, dashboard and others in an interoperable way. Refer to https://kubernetes.io/docs/concepts/overview/working-with-objects/common-labels/ for more information. This control helps you find objects that don't have any of these labels defined.",
            "remediation": "Define applicable labels or use the exception mechanism to prevent further notifications.",
            "origin": "kubescape",
            "originId": "C-0077",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "LOW",
            "title": "Label usage for resources",
            "description": "It is recommended to set labels that identify semantic attributes of your application or deployment. For example, { app: myapp, tier: frontend, phase: test, deployment: v3 }. These labels can used to assign policies to logical groups of the deployments as well as for presentation and tracking purposes. This control helps you find deployments without any of the expected labels.",
            "remediation": "Define labels that are most suitable to your needs of use the exceptions to prevent further notifications.",
            "origin": "kubescape",
            "originId": "C-0076",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "Resources memory limit and request",
            "description": "This control identifies all Pods for which the memory limit is not set.",
            "remediation": "Set the memory limit or use exception mechanism to avoid unnecessary notifications.",
            "origin": "kubescape",
            "originId": "C-0004",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "Insecure capabilities",
            "description": "Giving insecure or excessive capabilities to a container can increase the impact of the container compromise. This control identifies all the pods with dangerous capabilities (see documentation pages for details).",
            "remediation": "Remove all insecure capabilities which are not necessary for the container.",
            "origin": "kubescape",
            "originId": "C-0046",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Configured liveness probe",
            "description": "Liveness probe is intended to ensure that workload remains healthy during its entire execution lifecycle, or otherwise restrat the container. It is highly recommended to define liveness probe for every worker container. This control finds all the pods where the Liveness probe is not configured.",
            "remediation": "Ensure Liveness probes are configured wherever possible.",
            "origin": "kubescape",
            "originId": "C-0056",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "Resources CPU limit and request",
            "description": "This control identifies all Pods for which the CPU limit is not set.",
            "remediation": "Set the CPU limit or use exception mechanism to avoid unnecessary notifications.",
            "origin": "kubescape",
            "originId": "C-0050",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Container hostPort",
            "description": "Configuring hostPort requires a particular port number. If two objects specify the same HostPort, they could not be deployed to the same node. It may prevent the second object from starting, even if Kubernetes will try reschedule it on another node, provided there are available nodes with sufficient amount of resources. Also, if the number of replicas of such workload is higher than the number of nodes, the deployment will consistently fail.",
            "remediation": "Avoid usage of hostPort unless it is absolutely necessary, in which case define appropriate exception. Use NodePort / ClusterIP instead.",
            "origin": "kubescape",
            "originId": "C-0044",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Ingress and Egress blocked",
            "description": "Disable Ingress and Egress traffic on all pods wherever possible. It is recommended to define restrictive network policy on all new pods, and then enable sources/destinations that this pod must communicate with.",
            "remediation": "Define a network policy that restricts ingress and egress connections.",
            "origin": "kubescape",
            "originId": "C-0030",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Linux hardening",
            "description": "Containers may be given more privileges than they actually need. This can increase the potential impact of a container compromise.",
            "remediation": "You can use AppArmor, Seccomp, SELinux and Linux Capabilities mechanisms to restrict containers abilities to utilize unwanted privileges.",
            "origin": "kubescape",
            "originId": "C-0055",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "Resource limits",
            "description": "CPU and memory resources should have a limit set for every container or a namespace to prevent resource exhaustion. This control identifies all the pods without resource limit definitions by checking their yaml definition file as well as their namespace LimitRange objects. It is also recommended to use ResourceQuota object to restrict overall namespace resources, but this is not verified by this control.",
            "remediation": "Define LimitRange and Resource Limits in the namespace or in the deployment/pod manifests.",
            "origin": "kubescape",
            "originId": "C-0009",
            "passed": false,
            "skipped": false,
            "skipReason": null
          }
        ]
      },
      {
        "kind": "Role",
        "namespace": "kube-system",
        "name": "system:controller:bootstrap-signer",
        "checks": [
          {
            "severity": "MEDIUM",
            "title": "Manage namespace secrets",
            "description": "Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.",
            "remediation": "Manage namespace secrets are not allowed. Remove resource 'secrets' from role",
            "origin": "trivy",
            "originId": "KSV113",
            "passed": false,
            "skipped": false,
            "skipReason": null
          }
        ]
      },
      {
        "kind": "Pod",
        "namespace": "kube-system",
        "name": "traefik-f4564c4f4-httz5",
        "checks": [
          {
            "severity": "KUBE_SCORE",
            "title": "Container Image Pull Policy",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": null,
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "KUBE_SCORE",
            "title": "Pod Probes",
            "description": "Makes sure that all Pods have safe probe configurations",
            "remediation": null,
            "origin": "kube-score",
            "originId": "pod-probes",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "KUBE_SCORE",
            "title": "Container Ephemeral Storage Request and Limit",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": null,
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "KUBE_SCORE",
            "title": "Container Resources",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": null,
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "KUBE_SCORE",
            "title": "Pod NetworkPolicy",
            "description": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "remediation": null,
            "origin": "kube-score",
            "originId": "pod-networkpolicy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "KUBE_SCORE",
            "title": "Container Ephemeral Storage Request and Limit",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": null,
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "KUBE_SCORE",
            "title": "Pod NetworkPolicy",
            "description": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "remediation": null,
            "origin": "kube-score",
            "originId": "pod-networkpolicy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "KUBE_SCORE",
            "title": "Container Resources",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": null,
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "KUBE_SCORE",
            "title": "Container Image Pull Policy",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": null,
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "KUBE_SCORE",
            "title": "Pod Probes",
            "description": "Makes sure that all Pods have safe probe configurations",
            "remediation": null,
            "origin": "kube-score",
            "originId": "pod-probes",
            "passed": false,
            "skipped": false,
            "skipReason": null
          }
        ]
      },
      {
        "kind": "Pod",
        "namespace": "kube-system",
        "name": "svclb-traefik-6bae028c-bntdb",
        "checks": [
          {
            "severity": "KUBE_SCORE",
            "title": "Container Ephemeral Storage Request and Limit",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": null,
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "KUBE_SCORE",
            "title": "Container Security Context User Group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": null,
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "KUBE_SCORE",
            "title": "Container Security Context ReadOnlyRootFilesystem",
            "description": "Makes sure that all pods have a security context with read only filesystem set",
            "remediation": null,
            "origin": "kube-score",
            "originId": "container-security-context-readonlyrootfilesystem",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "KUBE_SCORE",
            "title": "Container Resources",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": null,
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "KUBE_SCORE",
            "title": "Pod NetworkPolicy",
            "description": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "remediation": null,
            "origin": "kube-score",
            "originId": "pod-networkpolicy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "KUBE_SCORE",
            "title": "Container Image Pull Policy",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": null,
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "KUBE_SCORE",
            "title": "Container Resources",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": null,
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "KUBE_SCORE",
            "title": "Pod NetworkPolicy",
            "description": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "remediation": null,
            "origin": "kube-score",
            "originId": "pod-networkpolicy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "KUBE_SCORE",
            "title": "Container Image Pull Policy",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": null,
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "KUBE_SCORE",
            "title": "Container Security Context ReadOnlyRootFilesystem",
            "description": "Makes sure that all pods have a security context with read only filesystem set",
            "remediation": null,
            "origin": "kube-score",
            "originId": "container-security-context-readonlyrootfilesystem",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "KUBE_SCORE",
            "title": "Container Ephemeral Storage Request and Limit",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": null,
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "KUBE_SCORE",
            "title": "Container Security Context User Group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": null,
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          }
        ]
      },
      {
        "kind": "Pod",
        "namespace": "kube-system",
        "name": "metrics-server-648b5df564-xvq8q",
        "checks": [
          {
            "severity": "KUBE_SCORE",
            "title": "Container Resources",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": null,
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "KUBE_SCORE",
            "title": "Pod NetworkPolicy",
            "description": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "remediation": null,
            "origin": "kube-score",
            "originId": "pod-networkpolicy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "KUBE_SCORE",
            "title": "Container Image Pull Policy",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": null,
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "KUBE_SCORE",
            "title": "Container Ephemeral Storage Request and Limit",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": null,
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "KUBE_SCORE",
            "title": "Container Security Context User Group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": null,
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "KUBE_SCORE",
            "title": "Container Image Pull Policy",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": null,
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "KUBE_SCORE",
            "title": "Container Ephemeral Storage Request and Limit",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": null,
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "KUBE_SCORE",
            "title": "Container Security Context User Group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": null,
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "KUBE_SCORE",
            "title": "Container Resources",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": null,
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "KUBE_SCORE",
            "title": "Pod NetworkPolicy",
            "description": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "remediation": null,
            "origin": "kube-score",
            "originId": "pod-networkpolicy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          }
        ]
      },
      {
        "kind": "Role",
        "namespace": "kube-system",
        "name": "system::leader-locking-kube-scheduler",
        "checks": [
          {
            "severity": "MEDIUM",
            "title": "Manage configmaps",
            "description": "Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.",
            "remediation": "Remove write permission verbs for resource 'configmaps'",
            "origin": "trivy",
            "originId": "KSV049",
            "passed": false,
            "skipped": false,
            "skipReason": null
          }
        ]
      },
      {
        "kind": "ServiceAccount",
        "namespace": "kube-system",
        "name": "local-path-provisioner-service-account",
        "checks": [
          {
            "severity": "MEDIUM",
            "title": "Data Destruction",
            "description": "Attackers may attempt to destroy data and resources in the cluster. This includes deleting deployments, configurations, storage, and compute resources. This control identifies all subjects that can delete resources.",
            "remediation": "You should follow the least privilege principle and minimize the number of subjects that can delete resources.",
            "origin": "kubescape",
            "originId": "C-0007",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Access container service account",
            "description": "Attackers who obtain access to a pod can use its SA token to communicate with KubeAPI server. All pods with SA token mounted (if such token has a Role or a ClusterRole binding) are considerred potentially dangerous.",
            "remediation": "Verify that RBAC is enabled. Follow the least privilege principle and ensure that only necessary pods have SA token mounted into them.",
            "origin": "kubescape",
            "originId": "C-0053",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Automatic mapping of service account",
            "description": "Potential attacker may gain access to a pod and steal its service account token. Therefore, it is recommended to disable automatic mapping of the service account tokens in service account configuration and enable it only for pods that need to use them.",
            "remediation": "Disable automatic mounting of service account tokens to pods either at the service account level or at the individual pod level, by specifying the automountServiceAccountToken: false. Note that pod level takes precedence.",
            "origin": "kubescape",
            "originId": "C-0034",
            "passed": false,
            "skipped": false,
            "skipReason": null
          }
        ]
      },
      {
        "kind": "Job",
        "namespace": "kube-system",
        "name": "helm-install-traefik-crd",
        "checks": [
          {
            "severity": "MEDIUM",
            "title": "Can elevate its own privileges",
            "description": "A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.",
            "remediation": "Set 'set containers[].securityContext.allowPrivilegeEscalation' to 'false'.",
            "origin": "trivy",
            "originId": "KSV001",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Runs as root user",
            "description": "Force the running image to run as a non-root user to ensure least privileges.",
            "remediation": "Set 'containers[].securityContext.runAsNonRoot' to true.",
            "origin": "trivy",
            "originId": "KSV012",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Seccomp policies disabled",
            "description": "A program inside the container can bypass Seccomp protection policies.",
            "remediation": "Specify seccomp either by annotation or by seccomp profile type having allowed values as per pod security standards",
            "origin": "trivy",
            "originId": "KSV104",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "LOW",
            "title": "Immutable container filesystem",
            "description": "Mutable container filesystem can be abused to inject malicious code or data into containers. Use immutable (read-only) filesystem to limit potential attacks.",
            "remediation": "Set the filesystem of the container to read-only when possible (pod securityContext, readOnlyRootFilesystem: true). If containers application needs to write into the filesystem, it is recommended to mount secondary filesystems for specific directories where application require write access.",
            "origin": "kubescape",
            "originId": "C-0017",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "LOW",
            "title": "Configured readiness probe",
            "description": "Readiness probe is intended to ensure that workload is ready to process network traffic. It is highly recommended to define readiness probe for every worker container. This control finds all the pods where the readiness probe is not configured.",
            "remediation": "Ensure Readiness probes are configured wherever possible.",
            "origin": "kubescape",
            "originId": "C-0018",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Allow privilege escalation",
            "description": "Attackers may gain access to a container and uplift its privilege to enable excessive capabilities.",
            "remediation": "If your application does not need it, make sure the allowPrivilegeEscalation field of the securityContext is set to false.",
            "origin": "kubescape",
            "originId": "C-0016",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "Applications credentials in configuration files",
            "description": "Attackers who have access to configuration files can steal the stored secrets and use them. This control checks if ConfigMaps or pod specifications have sensitive information in their configuration.",
            "remediation": "Use Kubernetes secrets or Key Management Systems to store credentials.",
            "origin": "kubescape",
            "originId": "C-0012",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "LOW",
            "title": "K8s common labels usage",
            "description": "Kubernetes common labels help manage and monitor Kubernetes cluster using different tools such as kubectl, dashboard and others in an interoperable way. Refer to https://kubernetes.io/docs/concepts/overview/working-with-objects/common-labels/ for more information. This control helps you find objects that don't have any of these labels defined.",
            "remediation": "Define applicable labels or use the exception mechanism to prevent further notifications.",
            "origin": "kubescape",
            "originId": "C-0077",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "LOW",
            "title": "Label usage for resources",
            "description": "It is recommended to set labels that identify semantic attributes of your application or deployment. For example, { app: myapp, tier: frontend, phase: test, deployment: v3 }. These labels can used to assign policies to logical groups of the deployments as well as for presentation and tracking purposes. This control helps you find deployments without any of the expected labels.",
            "remediation": "Define labels that are most suitable to your needs of use the exceptions to prevent further notifications.",
            "origin": "kubescape",
            "originId": "C-0076",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "Resources memory limit and request",
            "description": "This control identifies all Pods for which the memory limit is not set.",
            "remediation": "Set the memory limit or use exception mechanism to avoid unnecessary notifications.",
            "origin": "kubescape",
            "originId": "C-0004",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Configured liveness probe",
            "description": "Liveness probe is intended to ensure that workload remains healthy during its entire execution lifecycle, or otherwise restrat the container. It is highly recommended to define liveness probe for every worker container. This control finds all the pods where the Liveness probe is not configured.",
            "remediation": "Ensure Liveness probes are configured wherever possible.",
            "origin": "kubescape",
            "originId": "C-0056",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "Resources CPU limit and request",
            "description": "This control identifies all Pods for which the CPU limit is not set.",
            "remediation": "Set the CPU limit or use exception mechanism to avoid unnecessary notifications.",
            "origin": "kubescape",
            "originId": "C-0050",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Ingress and Egress blocked",
            "description": "Disable Ingress and Egress traffic on all pods wherever possible. It is recommended to define restrictive network policy on all new pods, and then enable sources/destinations that this pod must communicate with.",
            "remediation": "Define a network policy that restricts ingress and egress connections.",
            "origin": "kubescape",
            "originId": "C-0030",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Linux hardening",
            "description": "Containers may be given more privileges than they actually need. This can increase the potential impact of a container compromise.",
            "remediation": "You can use AppArmor, Seccomp, SELinux and Linux Capabilities mechanisms to restrict containers abilities to utilize unwanted privileges.",
            "origin": "kubescape",
            "originId": "C-0055",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "Resource limits",
            "description": "CPU and memory resources should have a limit set for every container or a namespace to prevent resource exhaustion. This control identifies all the pods without resource limit definitions by checking their yaml definition file as well as their namespace LimitRange objects. It is also recommended to use ResourceQuota object to restrict overall namespace resources, but this is not verified by this control.",
            "remediation": "Define LimitRange and Resource Limits in the namespace or in the deployment/pod manifests.",
            "origin": "kubescape",
            "originId": "C-0009",
            "passed": false,
            "skipped": false,
            "skipReason": null
          }
        ]
      },
      {
        "kind": "Job",
        "namespace": "kube-system",
        "name": "helm-install-traefik",
        "checks": [
          {
            "severity": "MEDIUM",
            "title": "Can elevate its own privileges",
            "description": "A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.",
            "remediation": "Set 'set containers[].securityContext.allowPrivilegeEscalation' to 'false'.",
            "origin": "trivy",
            "originId": "KSV001",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Runs as root user",
            "description": "Force the running image to run as a non-root user to ensure least privileges.",
            "remediation": "Set 'containers[].securityContext.runAsNonRoot' to true.",
            "origin": "trivy",
            "originId": "KSV012",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Seccomp policies disabled",
            "description": "A program inside the container can bypass Seccomp protection policies.",
            "remediation": "Specify seccomp either by annotation or by seccomp profile type having allowed values as per pod security standards",
            "origin": "trivy",
            "originId": "KSV104",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "LOW",
            "title": "Immutable container filesystem",
            "description": "Mutable container filesystem can be abused to inject malicious code or data into containers. Use immutable (read-only) filesystem to limit potential attacks.",
            "remediation": "Set the filesystem of the container to read-only when possible (pod securityContext, readOnlyRootFilesystem: true). If containers application needs to write into the filesystem, it is recommended to mount secondary filesystems for specific directories where application require write access.",
            "origin": "kubescape",
            "originId": "C-0017",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "LOW",
            "title": "Configured readiness probe",
            "description": "Readiness probe is intended to ensure that workload is ready to process network traffic. It is highly recommended to define readiness probe for every worker container. This control finds all the pods where the readiness probe is not configured.",
            "remediation": "Ensure Readiness probes are configured wherever possible.",
            "origin": "kubescape",
            "originId": "C-0018",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Allow privilege escalation",
            "description": "Attackers may gain access to a container and uplift its privilege to enable excessive capabilities.",
            "remediation": "If your application does not need it, make sure the allowPrivilegeEscalation field of the securityContext is set to false.",
            "origin": "kubescape",
            "originId": "C-0016",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "Applications credentials in configuration files",
            "description": "Attackers who have access to configuration files can steal the stored secrets and use them. This control checks if ConfigMaps or pod specifications have sensitive information in their configuration.",
            "remediation": "Use Kubernetes secrets or Key Management Systems to store credentials.",
            "origin": "kubescape",
            "originId": "C-0012",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "LOW",
            "title": "K8s common labels usage",
            "description": "Kubernetes common labels help manage and monitor Kubernetes cluster using different tools such as kubectl, dashboard and others in an interoperable way. Refer to https://kubernetes.io/docs/concepts/overview/working-with-objects/common-labels/ for more information. This control helps you find objects that don't have any of these labels defined.",
            "remediation": "Define applicable labels or use the exception mechanism to prevent further notifications.",
            "origin": "kubescape",
            "originId": "C-0077",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "LOW",
            "title": "Label usage for resources",
            "description": "It is recommended to set labels that identify semantic attributes of your application or deployment. For example, { app: myapp, tier: frontend, phase: test, deployment: v3 }. These labels can used to assign policies to logical groups of the deployments as well as for presentation and tracking purposes. This control helps you find deployments without any of the expected labels.",
            "remediation": "Define labels that are most suitable to your needs of use the exceptions to prevent further notifications.",
            "origin": "kubescape",
            "originId": "C-0076",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "Resources memory limit and request",
            "description": "This control identifies all Pods for which the memory limit is not set.",
            "remediation": "Set the memory limit or use exception mechanism to avoid unnecessary notifications.",
            "origin": "kubescape",
            "originId": "C-0004",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Configured liveness probe",
            "description": "Liveness probe is intended to ensure that workload remains healthy during its entire execution lifecycle, or otherwise restrat the container. It is highly recommended to define liveness probe for every worker container. This control finds all the pods where the Liveness probe is not configured.",
            "remediation": "Ensure Liveness probes are configured wherever possible.",
            "origin": "kubescape",
            "originId": "C-0056",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "Resources CPU limit and request",
            "description": "This control identifies all Pods for which the CPU limit is not set.",
            "remediation": "Set the CPU limit or use exception mechanism to avoid unnecessary notifications.",
            "origin": "kubescape",
            "originId": "C-0050",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Ingress and Egress blocked",
            "description": "Disable Ingress and Egress traffic on all pods wherever possible. It is recommended to define restrictive network policy on all new pods, and then enable sources/destinations that this pod must communicate with.",
            "remediation": "Define a network policy that restricts ingress and egress connections.",
            "origin": "kubescape",
            "originId": "C-0030",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Linux hardening",
            "description": "Containers may be given more privileges than they actually need. This can increase the potential impact of a container compromise.",
            "remediation": "You can use AppArmor, Seccomp, SELinux and Linux Capabilities mechanisms to restrict containers abilities to utilize unwanted privileges.",
            "origin": "kubescape",
            "originId": "C-0055",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "Resource limits",
            "description": "CPU and memory resources should have a limit set for every container or a namespace to prevent resource exhaustion. This control identifies all the pods without resource limit definitions by checking their yaml definition file as well as their namespace LimitRange objects. It is also recommended to use ResourceQuota object to restrict overall namespace resources, but this is not verified by this control.",
            "remediation": "Define LimitRange and Resource Limits in the namespace or in the deployment/pod manifests.",
            "origin": "kubescape",
            "originId": "C-0009",
            "passed": false,
            "skipped": false,
            "skipReason": null
          }
        ]
      },
      {
        "kind": "Pod",
        "namespace": "kube-system",
        "name": "local-path-provisioner-78b74b547f-9pmc7",
        "checks": [
          {
            "severity": "KUBE_SCORE",
            "title": "Container Image Pull Policy",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": null,
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "KUBE_SCORE",
            "title": "Container Security Context User Group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": null,
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "KUBE_SCORE",
            "title": "Container Security Context ReadOnlyRootFilesystem",
            "description": "Makes sure that all pods have a security context with read only filesystem set",
            "remediation": null,
            "origin": "kube-score",
            "originId": "container-security-context-readonlyrootfilesystem",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "KUBE_SCORE",
            "title": "Container Ephemeral Storage Request and Limit",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": null,
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "KUBE_SCORE",
            "title": "Pod NetworkPolicy",
            "description": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "remediation": null,
            "origin": "kube-score",
            "originId": "pod-networkpolicy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "KUBE_SCORE",
            "title": "Container Resources",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": null,
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "KUBE_SCORE",
            "title": "Container Security Context User Group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": null,
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "KUBE_SCORE",
            "title": "Container Security Context ReadOnlyRootFilesystem",
            "description": "Makes sure that all pods have a security context with read only filesystem set",
            "remediation": null,
            "origin": "kube-score",
            "originId": "container-security-context-readonlyrootfilesystem",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "KUBE_SCORE",
            "title": "Container Ephemeral Storage Request and Limit",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": null,
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "KUBE_SCORE",
            "title": "Pod NetworkPolicy",
            "description": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "remediation": null,
            "origin": "kube-score",
            "originId": "pod-networkpolicy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "KUBE_SCORE",
            "title": "Container Resources",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": null,
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "KUBE_SCORE",
            "title": "Container Image Pull Policy",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": null,
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          }
        ]
      }
    ],
    "kube-public": [
      {
        "kind": "Role",
        "namespace": "kube-public",
        "name": "system:controller:bootstrap-signer",
        "checks": [
          {
            "severity": "MEDIUM",
            "title": "Manage configmaps",
            "description": "Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.",
            "remediation": "Remove write permission verbs for resource 'configmaps'",
            "origin": "trivy",
            "originId": "KSV049",
            "passed": false,
            "skipped": false,
            "skipReason": null
          }
        ]
      }
    ]
  },
  "nonNamespacedResources": [
    {
      "kind": "Namespace",
      "namespace": null,
      "name": "kubescape",
      "checks": [
        {
          "severity": "LOW",
          "title": "Network mapping",
          "description": "If no network policy is defined, attackers who gain access to a single container may use it to probe the network. This control lists all namespaces in which no network policies are defined.",
          "remediation": "Define network policies or use similar network protection mechanisms.",
          "origin": "kubescape",
          "originId": "C-0049",
          "passed": false,
          "skipped": false,
          "skipReason": null
        },
        {
          "severity": "MEDIUM",
          "title": "Cluster internal networking",
          "description": "If no network policy is defined, attackers who gain access to a container may use it to move laterally in the cluster. This control lists namespaces in which no network policy is defined.",
          "remediation": "Define Kubernetes network policies or use alternative products to protect cluster network.",
          "origin": "kubescape",
          "originId": "C-0054",
          "passed": false,
          "skipped": false,
          "skipReason": null
        }
      ]
    },
    {
      "kind": "ClusterRoleBinding",
      "namespace": null,
      "name": "system:public-info-viewer",
      "checks": [
        {
          "severity": "HIGH",
          "title": "Anonymous access enabled",
          "description": "Granting permissions to the system:unauthenticated or system:anonymous user is generally not recommended and can introduce security risks. Allowing unauthenticated access to your Kubernetes cluster can lead to unauthorized access, potential data breaches, and abuse of cluster resources.",
          "remediation": "Review and modify your cluster's RBAC configuration to ensure that only authenticated and authorized users have appropriate permissions based on their roles and responsibilities within your system.",
          "origin": "kubescape",
          "originId": "C-0262",
          "passed": false,
          "skipped": false,
          "skipReason": null
        }
      ]
    },
    {
      "kind": "Namespace",
      "namespace": null,
      "name": "kubernetes-dashboard",
      "checks": [
        {
          "severity": "LOW",
          "title": "Network mapping",
          "description": "If no network policy is defined, attackers who gain access to a single container may use it to probe the network. This control lists all namespaces in which no network policies are defined.",
          "remediation": "Define network policies or use similar network protection mechanisms.",
          "origin": "kubescape",
          "originId": "C-0049",
          "passed": false,
          "skipped": false,
          "skipReason": null
        },
        {
          "severity": "MEDIUM",
          "title": "Cluster internal networking",
          "description": "If no network policy is defined, attackers who gain access to a container may use it to move laterally in the cluster. This control lists namespaces in which no network policy is defined.",
          "remediation": "Define Kubernetes network policies or use alternative products to protect cluster network.",
          "origin": "kubescape",
          "originId": "C-0054",
          "passed": false,
          "skipped": false,
          "skipReason": null
        }
      ]
    },
    {
      "kind": "Namespace",
      "namespace": null,
      "name": "kss",
      "checks": [
        {
          "severity": "LOW",
          "title": "Network mapping",
          "description": "If no network policy is defined, attackers who gain access to a single container may use it to probe the network. This control lists all namespaces in which no network policies are defined.",
          "remediation": "Define network policies or use similar network protection mechanisms.",
          "origin": "kubescape",
          "originId": "C-0049",
          "passed": false,
          "skipped": false,
          "skipReason": null
        },
        {
          "severity": "MEDIUM",
          "title": "Cluster internal networking",
          "description": "If no network policy is defined, attackers who gain access to a container may use it to move laterally in the cluster. This control lists namespaces in which no network policy is defined.",
          "remediation": "Define Kubernetes network policies or use alternative products to protect cluster network.",
          "origin": "kubescape",
          "originId": "C-0054",
          "passed": false,
          "skipped": false,
          "skipReason": null
        }
      ]
    },
    {
      "kind": "Namespace",
      "namespace": null,
      "name": "kube-config-scanner",
      "checks": [
        {
          "severity": "LOW",
          "title": "Network mapping",
          "description": "If no network policy is defined, attackers who gain access to a single container may use it to probe the network. This control lists all namespaces in which no network policies are defined.",
          "remediation": "Define network policies or use similar network protection mechanisms.",
          "origin": "kubescape",
          "originId": "C-0049",
          "passed": false,
          "skipped": false,
          "skipReason": null
        },
        {
          "severity": "MEDIUM",
          "title": "Cluster internal networking",
          "description": "If no network policy is defined, attackers who gain access to a container may use it to move laterally in the cluster. This control lists namespaces in which no network policy is defined.",
          "remediation": "Define Kubernetes network policies or use alternative products to protect cluster network.",
          "origin": "kubescape",
          "originId": "C-0054",
          "passed": false,
          "skipped": false,
          "skipReason": null
        }
      ]
    }
  ],
  "skippedChecks": [
    {
      "severity": "HIGH",
      "title": "Forbidden Container Registries",
      "description": "In cases where the Kubernetes cluster is provided by a CSP (e.g., AKS in Azure, GKE in GCP, or EKS in AWS), compromised cloud credential can lead to the cluster takeover. Attackers may abuse cloud account credentials or IAM mechanism to the cluster’s management layer.",
      "remediation": "Limit the registries from which you pull container images from",
      "origin": "kubescape",
      "originId": "C-0001",
      "passed": false,
      "skipped": true,
      "skipReason": "Control configurations are empty"
    },
    {
      "severity": "MEDIUM",
      "title": "Secret/etcd encryption enabled",
      "description": "All Kubernetes Secrets are stored primarily in etcd therefore it is important to encrypt it.",
      "remediation": "Turn on the etcd encryption in your cluster, for more see the vendor documentation.",
      "origin": "kubescape",
      "originId": "C-0066",
      "passed": false,
      "skipped": true,
      "skipReason": "failed to get cloud provider, cluster: "
    },
    {
      "severity": "MEDIUM",
      "title": "Audit logs enabled",
      "description": "Audit logging is an important security feature in Kubernetes, it enables the operator to track requests to the cluster. It is important to use it so the operator has a record of events happened in Kubernetes",
      "remediation": "Turn on audit logging for your cluster. Look at the vendor guidelines for more details",
      "origin": "kubescape",
      "originId": "C-0067",
      "passed": false,
      "skipped": true,
      "skipReason": "failed to get cloud provider, cluster: "
    },
    {
      "severity": "LOW",
      "title": "PSP enabled",
      "description": "PSP enable fine-grained authorization of pod creation and it is important to enable it",
      "remediation": "Turn Pod Security Policies on in your cluster, if you use other admission controllers to control the behavior that PSP controls, exclude this control from your scans",
      "origin": "kubescape",
      "originId": "C-0068",
      "passed": false,
      "skipped": true,
      "skipReason": "failed to get cloud provider, cluster: "
    },
    {
      "severity": "CRITICAL",
      "title": "Disable anonymous access to Kubelet service",
      "description": "By default, requests to the kubelet's HTTPS endpoint that are not rejected by other configured authentication methods are treated as anonymous requests, and given a username of system:anonymous and a group of system:unauthenticated.",
      "remediation": "Start the kubelet with the --anonymous-auth=false flag.",
      "origin": "kubescape",
      "originId": "C-0069",
      "passed": false,
      "skipped": true,
      "skipReason": "This control requires the Kubescape operator installed. To install it, go to\n     https://kubescape.io/docs/install-operator/."
    },
    {
      "severity": "CRITICAL",
      "title": "Enforce Kubelet client TLS authentication",
      "description": "Kubelets are the node level orchestrator in Kubernetes control plane. They are publishing service port 10250 where they accept commands from API server. Operator must make sure that only API server is allowed to submit commands to Kubelet. This is done through client certificate verification, must configure Kubelet with client CA file to use for this purpose.",
      "remediation": "Start the kubelet with the --client-ca-file flag, providing a CA bundle to verify client certificates with.",
      "origin": "kubescape",
      "originId": "C-0070",
      "passed": false,
      "skipped": true,
      "skipReason": "This control requires the Kubescape operator installed. To install it, go to\n     https://kubescape.io/docs/install-operator/."
    },
    {
      "severity": "MEDIUM",
      "title": "Images from allowed registry",
      "description": "This control is intended to ensure that all the used container images are taken from the authorized repositories. It allows user to list all the approved repositories and will fail all the images taken from any repository outside of this list.",
      "remediation": "You should enable all trusted repositories in the parameters of this control.",
      "origin": "kubescape",
      "originId": "C-0078",
      "passed": false,
      "skipped": true,
      "skipReason": "Control configurations are empty"
    },
    {
      "severity": "HIGH",
      "title": "RBAC enabled",
      "description": "RBAC is the most advanced and well accepted mode of authorizing users of the Kubernetes API",
      "remediation": "Enable RBAC either in the API server configuration or with the Kubernetes provider API",
      "origin": "kubescape",
      "originId": "C-0088",
      "passed": false,
      "skipped": true,
      "skipReason": "failed to get cloud provider, cluster: "
    }
  ]
}
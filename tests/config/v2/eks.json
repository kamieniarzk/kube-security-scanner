{
  "scanId": "65bfda6aa5c3091d0a87a940",
  "aggregated": true,
  "namespacedResources": {
    "default": [
      {
        "kind": "Service",
        "namespace": "default",
        "name": "kubernetes",
        "checks": [
          {
            "severity": "KUBE_SCORE",
            "title": "Service Targets Pod",
            "description": "Makes sure that all Services targets a Pod",
            "remediation": null,
            "origin": "kube-score",
            "originId": "service-targets-pod",
            "passed": false,
            "skipped": false,
            "skipReason": null
          }
        ]
      }
    ],
    "kube-system": [
      {
        "kind": "Role",
        "namespace": "kube-system",
        "name": "system::leader-locking-kube-controller-manager",
        "checks": [
          {
            "severity": "MEDIUM",
            "title": "Manage configmaps",
            "description": "Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.",
            "remediation": "Remove write permission verbs for resource 'configmaps'",
            "origin": "trivy",
            "originId": "KSV049",
            "passed": false,
            "skipped": false,
            "skipReason": null
          }
        ]
      },
      {
        "kind": "Role",
        "namespace": "kube-system",
        "name": "system:controller:token-cleaner",
        "checks": [
          {
            "severity": "MEDIUM",
            "title": "Manage namespace secrets",
            "description": "Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.",
            "remediation": "Manage namespace secrets are not allowed. Remove resource 'secrets' from role",
            "origin": "trivy",
            "originId": "KSV113",
            "passed": false,
            "skipped": false,
            "skipReason": null
          }
        ]
      },
      {
        "kind": "DaemonSet",
        "namespace": "kube-system",
        "name": "eks-pod-identity-agent",
        "checks": [
          {
            "severity": "MEDIUM",
            "title": "Can elevate its own privileges",
            "description": "A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.",
            "remediation": "Set 'set containers[].securityContext.allowPrivilegeEscalation' to 'false'.",
            "origin": "trivy",
            "originId": "KSV001",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Can elevate its own privileges",
            "description": "A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.",
            "remediation": "Set 'set containers[].securityContext.allowPrivilegeEscalation' to 'false'.",
            "origin": "trivy",
            "originId": "KSV001",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "Access to host network",
            "description": "Sharing the host’s network namespace permits processes in the pod to communicate with processes bound to the host’s loopback adapter.",
            "remediation": "Do not set 'spec.template.spec.hostNetwork' to true.",
            "origin": "trivy",
            "originId": "KSV009",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Runs as root user",
            "description": "Force the running image to run as a non-root user to ensure least privileges.",
            "remediation": "Set 'containers[].securityContext.runAsNonRoot' to true.",
            "origin": "trivy",
            "originId": "KSV012",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Runs as root user",
            "description": "Force the running image to run as a non-root user to ensure least privileges.",
            "remediation": "Set 'containers[].securityContext.runAsNonRoot' to true.",
            "origin": "trivy",
            "originId": "KSV012",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "Privileged",
            "description": "Privileged containers share namespaces with the host system and do not offer any security. They should be used exclusively for system containers that require high privileges.",
            "remediation": "Change 'containers[].securityContext.privileged' to 'false'.",
            "origin": "trivy",
            "originId": "KSV017",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Specific capabilities added",
            "description": "According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.",
            "remediation": "Do not set spec.containers[*].securityContext.capabilities.add and spec.initContainers[*].securityContext.capabilities.add.",
            "origin": "trivy",
            "originId": "KSV022",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Seccomp policies disabled",
            "description": "A program inside the container can bypass Seccomp protection policies.",
            "remediation": "Specify seccomp either by annotation or by seccomp profile type having allowed values as per pod security standards",
            "origin": "trivy",
            "originId": "KSV104",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Seccomp policies disabled",
            "description": "A program inside the container can bypass Seccomp protection policies.",
            "remediation": "Specify seccomp either by annotation or by seccomp profile type having allowed values as per pod security standards",
            "origin": "trivy",
            "originId": "KSV104",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "Prevent binding to privileged ports",
            "description": "The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.",
            "remediation": "Do not map the container ports to privileged host ports when starting a container.",
            "origin": "trivy",
            "originId": "KSV117",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "KUBE_SCORE",
            "title": "Container Ephemeral Storage Request and Limit",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": null,
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "KUBE_SCORE",
            "title": "Pod NetworkPolicy",
            "description": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "remediation": null,
            "origin": "kube-score",
            "originId": "pod-networkpolicy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "KUBE_SCORE",
            "title": "Container Security Context ReadOnlyRootFilesystem",
            "description": "Makes sure that all pods have a security context with read only filesystem set",
            "remediation": null,
            "origin": "kube-score",
            "originId": "container-security-context-readonlyrootfilesystem",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "KUBE_SCORE",
            "title": "Container Resources",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": null,
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "KUBE_SCORE",
            "title": "Container Security Context User Group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": null,
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "KUBE_SCORE",
            "title": "Container Security Context Privileged",
            "description": "Makes sure that all pods have a unprivileged security context set",
            "remediation": null,
            "origin": "kube-score",
            "originId": "container-security-context-privileged",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "KUBE_SCORE",
            "title": "Container Security Context Privileged",
            "description": "Makes sure that all pods have a unprivileged security context set",
            "remediation": null,
            "origin": "kube-score",
            "originId": "container-security-context-privileged",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "KUBE_SCORE",
            "title": "Container Security Context ReadOnlyRootFilesystem",
            "description": "Makes sure that all pods have a security context with read only filesystem set",
            "remediation": null,
            "origin": "kube-score",
            "originId": "container-security-context-readonlyrootfilesystem",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "KUBE_SCORE",
            "title": "Container Ephemeral Storage Request and Limit",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": null,
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "KUBE_SCORE",
            "title": "Pod NetworkPolicy",
            "description": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "remediation": null,
            "origin": "kube-score",
            "originId": "pod-networkpolicy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "KUBE_SCORE",
            "title": "Container Resources",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": null,
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "KUBE_SCORE",
            "title": "Container Security Context User Group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": null,
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          }
        ]
      },
      {
        "kind": "Role",
        "namespace": "kube-system",
        "name": "system:controller:bootstrap-signer",
        "checks": [
          {
            "severity": "MEDIUM",
            "title": "Manage namespace secrets",
            "description": "Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.",
            "remediation": "Manage namespace secrets are not allowed. Remove resource 'secrets' from role",
            "origin": "trivy",
            "originId": "KSV113",
            "passed": false,
            "skipped": false,
            "skipReason": null
          }
        ]
      },
      {
        "kind": "DaemonSet",
        "namespace": "kube-system",
        "name": "aws-node",
        "checks": [
          {
            "severity": "MEDIUM",
            "title": "Can elevate its own privileges",
            "description": "A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.",
            "remediation": "Set 'set containers[].securityContext.allowPrivilegeEscalation' to 'false'.",
            "origin": "trivy",
            "originId": "KSV001",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Can elevate its own privileges",
            "description": "A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.",
            "remediation": "Set 'set containers[].securityContext.allowPrivilegeEscalation' to 'false'.",
            "origin": "trivy",
            "originId": "KSV001",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Can elevate its own privileges",
            "description": "A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.",
            "remediation": "Set 'set containers[].securityContext.allowPrivilegeEscalation' to 'false'.",
            "origin": "trivy",
            "originId": "KSV001",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "Access to host network",
            "description": "Sharing the host’s network namespace permits processes in the pod to communicate with processes bound to the host’s loopback adapter.",
            "remediation": "Do not set 'spec.template.spec.hostNetwork' to true.",
            "origin": "trivy",
            "originId": "KSV009",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Runs as root user",
            "description": "Force the running image to run as a non-root user to ensure least privileges.",
            "remediation": "Set 'containers[].securityContext.runAsNonRoot' to true.",
            "origin": "trivy",
            "originId": "KSV012",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Runs as root user",
            "description": "Force the running image to run as a non-root user to ensure least privileges.",
            "remediation": "Set 'containers[].securityContext.runAsNonRoot' to true.",
            "origin": "trivy",
            "originId": "KSV012",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Runs as root user",
            "description": "Force the running image to run as a non-root user to ensure least privileges.",
            "remediation": "Set 'containers[].securityContext.runAsNonRoot' to true.",
            "origin": "trivy",
            "originId": "KSV012",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "Privileged",
            "description": "Privileged containers share namespaces with the host system and do not offer any security. They should be used exclusively for system containers that require high privileges.",
            "remediation": "Change 'containers[].securityContext.privileged' to 'false'.",
            "origin": "trivy",
            "originId": "KSV017",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "Privileged",
            "description": "Privileged containers share namespaces with the host system and do not offer any security. They should be used exclusively for system containers that require high privileges.",
            "remediation": "Change 'containers[].securityContext.privileged' to 'false'.",
            "origin": "trivy",
            "originId": "KSV017",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Specific capabilities added",
            "description": "According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.",
            "remediation": "Do not set spec.containers[*].securityContext.capabilities.add and spec.initContainers[*].securityContext.capabilities.add.",
            "origin": "trivy",
            "originId": "KSV022",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Specific capabilities added",
            "description": "According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.",
            "remediation": "Do not set spec.containers[*].securityContext.capabilities.add and spec.initContainers[*].securityContext.capabilities.add.",
            "origin": "trivy",
            "originId": "KSV022",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "hostPath volumes mounted",
            "description": "According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.",
            "remediation": "Do not set 'spec.volumes[*].hostPath'.",
            "origin": "trivy",
            "originId": "KSV023",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Seccomp policies disabled",
            "description": "A program inside the container can bypass Seccomp protection policies.",
            "remediation": "Specify seccomp either by annotation or by seccomp profile type having allowed values as per pod security standards",
            "origin": "trivy",
            "originId": "KSV104",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Seccomp policies disabled",
            "description": "A program inside the container can bypass Seccomp protection policies.",
            "remediation": "Specify seccomp either by annotation or by seccomp profile type having allowed values as per pod security standards",
            "origin": "trivy",
            "originId": "KSV104",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Seccomp policies disabled",
            "description": "A program inside the container can bypass Seccomp protection policies.",
            "remediation": "Specify seccomp either by annotation or by seccomp profile type having allowed values as per pod security standards",
            "origin": "trivy",
            "originId": "KSV104",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "NET_RAW capability added",
            "description": "The NET_RAW capability grants attackers the ability to eavesdrop on network traffic or generate IP traffic with falsified source addresses, posing serious security risks.",
            "remediation": "To mitigate potential security risks, it is strongly recommended to remove the NET_RAW capability from 'containers[].securityContext.capabilities.add'. It is advisable to follow the practice of dropping all capabilities and only adding the necessary ones.",
            "origin": "trivy",
            "originId": "KSV119",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "KUBE_SCORE",
            "title": "Container Image Pull Policy",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": null,
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "KUBE_SCORE",
            "title": "Container Ephemeral Storage Request and Limit",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": null,
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "KUBE_SCORE",
            "title": "Pod NetworkPolicy",
            "description": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "remediation": null,
            "origin": "kube-score",
            "originId": "pod-networkpolicy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "KUBE_SCORE",
            "title": "Container Security Context ReadOnlyRootFilesystem",
            "description": "Makes sure that all pods have a security context with read only filesystem set",
            "remediation": null,
            "origin": "kube-score",
            "originId": "container-security-context-readonlyrootfilesystem",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "KUBE_SCORE",
            "title": "Container Resources",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": null,
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "KUBE_SCORE",
            "title": "Container Security Context User Group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": null,
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "KUBE_SCORE",
            "title": "Pod Probes",
            "description": "Makes sure that all Pods have safe probe configurations",
            "remediation": null,
            "origin": "kube-score",
            "originId": "pod-probes",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "KUBE_SCORE",
            "title": "Container Security Context Privileged",
            "description": "Makes sure that all pods have a unprivileged security context set",
            "remediation": null,
            "origin": "kube-score",
            "originId": "container-security-context-privileged",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "KUBE_SCORE",
            "title": "Pod Probes",
            "description": "Makes sure that all Pods have safe probe configurations",
            "remediation": null,
            "origin": "kube-score",
            "originId": "pod-probes",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "KUBE_SCORE",
            "title": "Container Security Context Privileged",
            "description": "Makes sure that all pods have a unprivileged security context set",
            "remediation": null,
            "origin": "kube-score",
            "originId": "container-security-context-privileged",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "KUBE_SCORE",
            "title": "Container Image Pull Policy",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": null,
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "KUBE_SCORE",
            "title": "Container Ephemeral Storage Request and Limit",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": null,
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "KUBE_SCORE",
            "title": "Pod NetworkPolicy",
            "description": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "remediation": null,
            "origin": "kube-score",
            "originId": "pod-networkpolicy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "KUBE_SCORE",
            "title": "Container Security Context ReadOnlyRootFilesystem",
            "description": "Makes sure that all pods have a security context with read only filesystem set",
            "remediation": null,
            "origin": "kube-score",
            "originId": "container-security-context-readonlyrootfilesystem",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "KUBE_SCORE",
            "title": "Container Resources",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": null,
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "KUBE_SCORE",
            "title": "Container Security Context User Group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": null,
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          }
        ]
      },
      {
        "kind": "Role",
        "namespace": "kube-system",
        "name": "eks:addon-manager",
        "checks": [
          {
            "severity": "MEDIUM",
            "title": "Manage Kubernetes workloads and pods",
            "description": "Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.",
            "remediation": "Kubernetes workloads resources are only allowed for verbs 'list', 'watch', 'get'",
            "origin": "trivy",
            "originId": "KSV048",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Manage Kubernetes workloads and pods",
            "description": "Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.",
            "remediation": "Kubernetes workloads resources are only allowed for verbs 'list', 'watch', 'get'",
            "origin": "trivy",
            "originId": "KSV048",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Manage configmaps",
            "description": "Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.",
            "remediation": "Remove write permission verbs for resource 'configmaps'",
            "origin": "trivy",
            "originId": "KSV049",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "Manage Kubernetes networking",
            "description": "The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.",
            "remediation": "Networking resources are only allowed for verbs 'list', 'watch', 'get'",
            "origin": "trivy",
            "originId": "KSV056",
            "passed": false,
            "skipped": false,
            "skipReason": null
          }
        ]
      },
      {
        "kind": "Deployment",
        "namespace": "kube-system",
        "name": "coredns",
        "checks": [
          {
            "severity": "MEDIUM",
            "title": "Runs as root user",
            "description": "Force the running image to run as a non-root user to ensure least privileges.",
            "remediation": "Set 'containers[].securityContext.runAsNonRoot' to true.",
            "origin": "trivy",
            "originId": "KSV012",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Specific capabilities added",
            "description": "According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.",
            "remediation": "Do not set spec.containers[*].securityContext.capabilities.add and spec.initContainers[*].securityContext.capabilities.add.",
            "origin": "trivy",
            "originId": "KSV022",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Seccomp policies disabled",
            "description": "A program inside the container can bypass Seccomp protection policies.",
            "remediation": "Specify seccomp either by annotation or by seccomp profile type having allowed values as per pod security standards",
            "origin": "trivy",
            "originId": "KSV104",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "Prevent binding to privileged ports",
            "description": "The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.",
            "remediation": "Do not map the container ports to privileged host ports when starting a container.",
            "origin": "trivy",
            "originId": "KSV117",
            "passed": false,
            "skipped": false,
            "skipReason": null
          }
        ]
      },
      {
        "kind": "ReplicaSet",
        "namespace": "kube-system",
        "name": "coredns-6bfdd84968",
        "checks": [
          {
            "severity": "KUBE_SCORE",
            "title": "Container Resources",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": null,
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "KUBE_SCORE",
            "title": "Container Security Context User Group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": null,
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "KUBE_SCORE",
            "title": "Container Image Pull Policy",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": null,
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "KUBE_SCORE",
            "title": "Container Ephemeral Storage Request and Limit",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": null,
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "KUBE_SCORE",
            "title": "Pod NetworkPolicy",
            "description": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "remediation": null,
            "origin": "kube-score",
            "originId": "pod-networkpolicy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "KUBE_SCORE",
            "title": "Container Image Pull Policy",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": null,
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "KUBE_SCORE",
            "title": "Container Ephemeral Storage Request and Limit",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": null,
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "KUBE_SCORE",
            "title": "Pod NetworkPolicy",
            "description": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "remediation": null,
            "origin": "kube-score",
            "originId": "pod-networkpolicy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "KUBE_SCORE",
            "title": "Container Resources",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": null,
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "KUBE_SCORE",
            "title": "Container Security Context User Group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": null,
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "KUBE_SCORE",
            "title": "Container Image Pull Policy",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": null,
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "KUBE_SCORE",
            "title": "Container Ephemeral Storage Request and Limit",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": null,
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "KUBE_SCORE",
            "title": "Pod NetworkPolicy",
            "description": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "remediation": null,
            "origin": "kube-score",
            "originId": "pod-networkpolicy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "KUBE_SCORE",
            "title": "Container Resources",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": null,
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "KUBE_SCORE",
            "title": "Container Security Context User Group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": null,
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "KUBE_SCORE",
            "title": "Container Image Pull Policy",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": null,
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "KUBE_SCORE",
            "title": "Container Ephemeral Storage Request and Limit",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": null,
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "KUBE_SCORE",
            "title": "Pod NetworkPolicy",
            "description": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "remediation": null,
            "origin": "kube-score",
            "originId": "pod-networkpolicy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "KUBE_SCORE",
            "title": "Container Resources",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": null,
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "KUBE_SCORE",
            "title": "Container Security Context User Group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": null,
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          }
        ]
      },
      {
        "kind": "DaemonSet",
        "namespace": "kube-system",
        "name": "kube-proxy",
        "checks": [
          {
            "severity": "MEDIUM",
            "title": "Can elevate its own privileges",
            "description": "A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.",
            "remediation": "Set 'set containers[].securityContext.allowPrivilegeEscalation' to 'false'.",
            "origin": "trivy",
            "originId": "KSV001",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "Access to host network",
            "description": "Sharing the host’s network namespace permits processes in the pod to communicate with processes bound to the host’s loopback adapter.",
            "remediation": "Do not set 'spec.template.spec.hostNetwork' to true.",
            "origin": "trivy",
            "originId": "KSV009",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Runs as root user",
            "description": "Force the running image to run as a non-root user to ensure least privileges.",
            "remediation": "Set 'containers[].securityContext.runAsNonRoot' to true.",
            "origin": "trivy",
            "originId": "KSV012",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "Privileged",
            "description": "Privileged containers share namespaces with the host system and do not offer any security. They should be used exclusively for system containers that require high privileges.",
            "remediation": "Change 'containers[].securityContext.privileged' to 'false'.",
            "origin": "trivy",
            "originId": "KSV017",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "hostPath volumes mounted",
            "description": "According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.",
            "remediation": "Do not set 'spec.volumes[*].hostPath'.",
            "origin": "trivy",
            "originId": "KSV023",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Seccomp policies disabled",
            "description": "A program inside the container can bypass Seccomp protection policies.",
            "remediation": "Specify seccomp either by annotation or by seccomp profile type having allowed values as per pod security standards",
            "origin": "trivy",
            "originId": "KSV104",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "KUBE_SCORE",
            "title": "Container Image Pull Policy",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": null,
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "KUBE_SCORE",
            "title": "Container Ephemeral Storage Request and Limit",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": null,
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "KUBE_SCORE",
            "title": "Pod NetworkPolicy",
            "description": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "remediation": null,
            "origin": "kube-score",
            "originId": "pod-networkpolicy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "KUBE_SCORE",
            "title": "Container Security Context ReadOnlyRootFilesystem",
            "description": "Makes sure that all pods have a security context with read only filesystem set",
            "remediation": null,
            "origin": "kube-score",
            "originId": "container-security-context-readonlyrootfilesystem",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "KUBE_SCORE",
            "title": "Container Resources",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": null,
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "KUBE_SCORE",
            "title": "Container Security Context User Group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": null,
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "KUBE_SCORE",
            "title": "Container Security Context Privileged",
            "description": "Makes sure that all pods have a unprivileged security context set",
            "remediation": null,
            "origin": "kube-score",
            "originId": "container-security-context-privileged",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "KUBE_SCORE",
            "title": "Container Ephemeral Storage Request and Limit",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": null,
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "KUBE_SCORE",
            "title": "Pod NetworkPolicy",
            "description": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "remediation": null,
            "origin": "kube-score",
            "originId": "pod-networkpolicy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "KUBE_SCORE",
            "title": "Container Security Context ReadOnlyRootFilesystem",
            "description": "Makes sure that all pods have a security context with read only filesystem set",
            "remediation": null,
            "origin": "kube-score",
            "originId": "container-security-context-readonlyrootfilesystem",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "KUBE_SCORE",
            "title": "Container Image Pull Policy",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": null,
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "KUBE_SCORE",
            "title": "Container Security Context User Group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": null,
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "KUBE_SCORE",
            "title": "Container Resources",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": null,
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "KUBE_SCORE",
            "title": "Container Security Context Privileged",
            "description": "Makes sure that all pods have a unprivileged security context set",
            "remediation": null,
            "origin": "kube-score",
            "originId": "container-security-context-privileged",
            "passed": false,
            "skipped": false,
            "skipReason": null
          }
        ]
      },
      {
        "kind": "Role",
        "namespace": "kube-system",
        "name": "eks:service-operations-configmaps",
        "checks": [
          {
            "severity": "MEDIUM",
            "title": "Manage configmaps",
            "description": "Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.",
            "remediation": "Remove write permission verbs for resource 'configmaps'",
            "origin": "trivy",
            "originId": "KSV049",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "CRITICAL",
            "title": "Manage EKS IAM Auth ConfigMap",
            "description": "Ability to add AWS IAM to RBAC bindings via special EKS configmap.",
            "remediation": "Remove write permission verbs for resource 'configmaps' named 'aws-auth'",
            "origin": "trivy",
            "originId": "KSV115",
            "passed": false,
            "skipped": false,
            "skipReason": null
          }
        ]
      },
      {
        "kind": "ConfigMap",
        "namespace": "kube-system",
        "name": "extension-apiserver-authentication",
        "checks": [
          {
            "severity": "MEDIUM",
            "title": "ConfigMap with sensitive content",
            "description": "Storing sensitive content such as usernames and email addresses in configMaps is unsafe",
            "remediation": "Remove sensitive content from configMap data value",
            "origin": "trivy",
            "originId": "AVD-KSV-01010",
            "passed": false,
            "skipped": false,
            "skipReason": null
          }
        ]
      },
      {
        "kind": "Role",
        "namespace": "kube-system",
        "name": "eks:node-manager",
        "checks": [
          {
            "severity": "MEDIUM",
            "title": "Manage configmaps",
            "description": "Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.",
            "remediation": "Remove write permission verbs for resource 'configmaps'",
            "origin": "trivy",
            "originId": "KSV049",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Manage configmaps",
            "description": "Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.",
            "remediation": "Remove write permission verbs for resource 'configmaps'",
            "origin": "trivy",
            "originId": "KSV049",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "CRITICAL",
            "title": "Manage EKS IAM Auth ConfigMap",
            "description": "Ability to add AWS IAM to RBAC bindings via special EKS configmap.",
            "remediation": "Remove write permission verbs for resource 'configmaps' named 'aws-auth'",
            "origin": "trivy",
            "originId": "KSV115",
            "passed": false,
            "skipped": false,
            "skipReason": null
          }
        ]
      },
      {
        "kind": "DaemonSet",
        "namespace": "kube-system",
        "name": "ebs-csi-node",
        "checks": [
          {
            "severity": "MEDIUM",
            "title": "Can elevate its own privileges",
            "description": "A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.",
            "remediation": "Set 'set containers[].securityContext.allowPrivilegeEscalation' to 'false'.",
            "origin": "trivy",
            "originId": "KSV001",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Can elevate its own privileges",
            "description": "A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.",
            "remediation": "Set 'set containers[].securityContext.allowPrivilegeEscalation' to 'false'.",
            "origin": "trivy",
            "originId": "KSV001",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Can elevate its own privileges",
            "description": "A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.",
            "remediation": "Set 'set containers[].securityContext.allowPrivilegeEscalation' to 'false'.",
            "origin": "trivy",
            "originId": "KSV001",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Runs as root user",
            "description": "Force the running image to run as a non-root user to ensure least privileges.",
            "remediation": "Set 'containers[].securityContext.runAsNonRoot' to true.",
            "origin": "trivy",
            "originId": "KSV012",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Runs as root user",
            "description": "Force the running image to run as a non-root user to ensure least privileges.",
            "remediation": "Set 'containers[].securityContext.runAsNonRoot' to true.",
            "origin": "trivy",
            "originId": "KSV012",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Runs as root user",
            "description": "Force the running image to run as a non-root user to ensure least privileges.",
            "remediation": "Set 'containers[].securityContext.runAsNonRoot' to true.",
            "origin": "trivy",
            "originId": "KSV012",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "Privileged",
            "description": "Privileged containers share namespaces with the host system and do not offer any security. They should be used exclusively for system containers that require high privileges.",
            "remediation": "Change 'containers[].securityContext.privileged' to 'false'.",
            "origin": "trivy",
            "originId": "KSV017",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "hostPath volumes mounted",
            "description": "According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.",
            "remediation": "Do not set 'spec.volumes[*].hostPath'.",
            "origin": "trivy",
            "originId": "KSV023",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Seccomp policies disabled",
            "description": "A program inside the container can bypass Seccomp protection policies.",
            "remediation": "Specify seccomp either by annotation or by seccomp profile type having allowed values as per pod security standards",
            "origin": "trivy",
            "originId": "KSV104",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Seccomp policies disabled",
            "description": "A program inside the container can bypass Seccomp protection policies.",
            "remediation": "Specify seccomp either by annotation or by seccomp profile type having allowed values as per pod security standards",
            "origin": "trivy",
            "originId": "KSV104",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Seccomp policies disabled",
            "description": "A program inside the container can bypass Seccomp protection policies.",
            "remediation": "Specify seccomp either by annotation or by seccomp profile type having allowed values as per pod security standards",
            "origin": "trivy",
            "originId": "KSV104",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "Kubernetes resource with disallowed volumes mounted",
            "description": "HostPath present many security risks and as a security practice it is better to avoid critical host paths mounts.",
            "remediation": "Do not Set 'spec.volumes[*].hostPath.path' to any of the disallowed volumes.",
            "origin": "trivy",
            "originId": "KSV121",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "KUBE_SCORE",
            "title": "Container Security Context Privileged",
            "description": "Makes sure that all pods have a unprivileged security context set",
            "remediation": null,
            "origin": "kube-score",
            "originId": "container-security-context-privileged",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "KUBE_SCORE",
            "title": "Container Image Pull Policy",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": null,
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "KUBE_SCORE",
            "title": "Container Ephemeral Storage Request and Limit",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": null,
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "KUBE_SCORE",
            "title": "Pod NetworkPolicy",
            "description": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "remediation": null,
            "origin": "kube-score",
            "originId": "pod-networkpolicy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "KUBE_SCORE",
            "title": "Container Security Context User Group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": null,
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "KUBE_SCORE",
            "title": "Container Resources",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": null,
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "KUBE_SCORE",
            "title": "Container Security Context User Group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": null,
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "KUBE_SCORE",
            "title": "Container Resources",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": null,
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "KUBE_SCORE",
            "title": "Container Security Context Privileged",
            "description": "Makes sure that all pods have a unprivileged security context set",
            "remediation": null,
            "origin": "kube-score",
            "originId": "container-security-context-privileged",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "KUBE_SCORE",
            "title": "Container Image Pull Policy",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": null,
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "KUBE_SCORE",
            "title": "Container Ephemeral Storage Request and Limit",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": null,
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "KUBE_SCORE",
            "title": "Pod NetworkPolicy",
            "description": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "remediation": null,
            "origin": "kube-score",
            "originId": "pod-networkpolicy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          }
        ]
      },
      {
        "kind": "Role",
        "namespace": "kube-system",
        "name": "system:controller:cloud-provider",
        "checks": [
          {
            "severity": "MEDIUM",
            "title": "Manage configmaps",
            "description": "Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.",
            "remediation": "Remove write permission verbs for resource 'configmaps'",
            "origin": "trivy",
            "originId": "KSV049",
            "passed": false,
            "skipped": false,
            "skipReason": null
          }
        ]
      },
      {
        "kind": "Role",
        "namespace": "kube-system",
        "name": "eks:fargate-manager",
        "checks": [
          {
            "severity": "MEDIUM",
            "title": "Manage configmaps",
            "description": "Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.",
            "remediation": "Remove write permission verbs for resource 'configmaps'",
            "origin": "trivy",
            "originId": "KSV049",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Manage configmaps",
            "description": "Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.",
            "remediation": "Remove write permission verbs for resource 'configmaps'",
            "origin": "trivy",
            "originId": "KSV049",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "CRITICAL",
            "title": "Manage EKS IAM Auth ConfigMap",
            "description": "Ability to add AWS IAM to RBAC bindings via special EKS configmap.",
            "remediation": "Remove write permission verbs for resource 'configmaps' named 'aws-auth'",
            "origin": "trivy",
            "originId": "KSV115",
            "passed": false,
            "skipped": false,
            "skipReason": null
          }
        ]
      },
      {
        "kind": "Role",
        "namespace": "kube-system",
        "name": "system::leader-locking-kube-scheduler",
        "checks": [
          {
            "severity": "MEDIUM",
            "title": "Manage configmaps",
            "description": "Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.",
            "remediation": "Remove write permission verbs for resource 'configmaps'",
            "origin": "trivy",
            "originId": "KSV049",
            "passed": false,
            "skipped": false,
            "skipReason": null
          }
        ]
      },
      {
        "kind": "Deployment",
        "namespace": "kube-system",
        "name": "ebs-csi-controller",
        "checks": [
          {
            "severity": "MEDIUM",
            "title": "Seccomp policies disabled",
            "description": "A program inside the container can bypass Seccomp protection policies.",
            "remediation": "Specify seccomp either by annotation or by seccomp profile type having allowed values as per pod security standards",
            "origin": "trivy",
            "originId": "KSV104",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Seccomp policies disabled",
            "description": "A program inside the container can bypass Seccomp protection policies.",
            "remediation": "Specify seccomp either by annotation or by seccomp profile type having allowed values as per pod security standards",
            "origin": "trivy",
            "originId": "KSV104",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Seccomp policies disabled",
            "description": "A program inside the container can bypass Seccomp protection policies.",
            "remediation": "Specify seccomp either by annotation or by seccomp profile type having allowed values as per pod security standards",
            "origin": "trivy",
            "originId": "KSV104",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Seccomp policies disabled",
            "description": "A program inside the container can bypass Seccomp protection policies.",
            "remediation": "Specify seccomp either by annotation or by seccomp profile type having allowed values as per pod security standards",
            "origin": "trivy",
            "originId": "KSV104",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Seccomp policies disabled",
            "description": "A program inside the container can bypass Seccomp protection policies.",
            "remediation": "Specify seccomp either by annotation or by seccomp profile type having allowed values as per pod security standards",
            "origin": "trivy",
            "originId": "KSV104",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Seccomp policies disabled",
            "description": "A program inside the container can bypass Seccomp protection policies.",
            "remediation": "Specify seccomp either by annotation or by seccomp profile type having allowed values as per pod security standards",
            "origin": "trivy",
            "originId": "KSV104",
            "passed": false,
            "skipped": false,
            "skipReason": null
          }
        ]
      },
      {
        "kind": "ConfigMap",
        "namespace": "kube-system",
        "name": "aws-auth",
        "checks": [
          {
            "severity": "MEDIUM",
            "title": "ConfigMap with sensitive content",
            "description": "Storing sensitive content such as usernames and email addresses in configMaps is unsafe",
            "remediation": "Remove sensitive content from configMap data value",
            "origin": "trivy",
            "originId": "AVD-KSV-01010",
            "passed": false,
            "skipped": false,
            "skipReason": null
          }
        ]
      },
      {
        "kind": "Role",
        "namespace": "kube-system",
        "name": "eks:certificate-controller",
        "checks": [
          {
            "severity": "MEDIUM",
            "title": "Manage configmaps",
            "description": "Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.",
            "remediation": "Remove write permission verbs for resource 'configmaps'",
            "origin": "trivy",
            "originId": "KSV049",
            "passed": false,
            "skipped": false,
            "skipReason": null
          }
        ]
      },
      {
        "kind": "DaemonSet",
        "namespace": "kube-system",
        "name": "ebs-csi-node-windows",
        "checks": [
          {
            "severity": "MEDIUM",
            "title": "Can elevate its own privileges",
            "description": "A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.",
            "remediation": "Set 'set containers[].securityContext.allowPrivilegeEscalation' to 'false'.",
            "origin": "trivy",
            "originId": "KSV001",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Can elevate its own privileges",
            "description": "A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.",
            "remediation": "Set 'set containers[].securityContext.allowPrivilegeEscalation' to 'false'.",
            "origin": "trivy",
            "originId": "KSV001",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Can elevate its own privileges",
            "description": "A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.",
            "remediation": "Set 'set containers[].securityContext.allowPrivilegeEscalation' to 'false'.",
            "origin": "trivy",
            "originId": "KSV001",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Runs as root user",
            "description": "Force the running image to run as a non-root user to ensure least privileges.",
            "remediation": "Set 'containers[].securityContext.runAsNonRoot' to true.",
            "origin": "trivy",
            "originId": "KSV012",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Runs as root user",
            "description": "Force the running image to run as a non-root user to ensure least privileges.",
            "remediation": "Set 'containers[].securityContext.runAsNonRoot' to true.",
            "origin": "trivy",
            "originId": "KSV012",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Runs as root user",
            "description": "Force the running image to run as a non-root user to ensure least privileges.",
            "remediation": "Set 'containers[].securityContext.runAsNonRoot' to true.",
            "origin": "trivy",
            "originId": "KSV012",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "hostPath volumes mounted",
            "description": "According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.",
            "remediation": "Do not set 'spec.volumes[*].hostPath'.",
            "origin": "trivy",
            "originId": "KSV023",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Seccomp policies disabled",
            "description": "A program inside the container can bypass Seccomp protection policies.",
            "remediation": "Specify seccomp either by annotation or by seccomp profile type having allowed values as per pod security standards",
            "origin": "trivy",
            "originId": "KSV104",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Seccomp policies disabled",
            "description": "A program inside the container can bypass Seccomp protection policies.",
            "remediation": "Specify seccomp either by annotation or by seccomp profile type having allowed values as per pod security standards",
            "origin": "trivy",
            "originId": "KSV104",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Seccomp policies disabled",
            "description": "A program inside the container can bypass Seccomp protection policies.",
            "remediation": "Specify seccomp either by annotation or by seccomp profile type having allowed values as per pod security standards",
            "origin": "trivy",
            "originId": "KSV104",
            "passed": false,
            "skipped": false,
            "skipReason": null
          }
        ]
      },
      {
        "kind": "ReplicaSet",
        "namespace": "kube-system",
        "name": "ebs-csi-controller-6976b44b84",
        "checks": [
          {
            "severity": "KUBE_SCORE",
            "title": "Pod Probes",
            "description": "Makes sure that all Pods have safe probe configurations",
            "remediation": null,
            "origin": "kube-score",
            "originId": "pod-probes",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "KUBE_SCORE",
            "title": "Pod NetworkPolicy",
            "description": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "remediation": null,
            "origin": "kube-score",
            "originId": "pod-networkpolicy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "KUBE_SCORE",
            "title": "Container Image Pull Policy",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": null,
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "KUBE_SCORE",
            "title": "Container Ephemeral Storage Request and Limit",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": null,
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "KUBE_SCORE",
            "title": "Container Resources",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": null,
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "KUBE_SCORE",
            "title": "Container Security Context User Group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": null,
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "KUBE_SCORE",
            "title": "Pod Probes",
            "description": "Makes sure that all Pods have safe probe configurations",
            "remediation": null,
            "origin": "kube-score",
            "originId": "pod-probes",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "KUBE_SCORE",
            "title": "Container Ephemeral Storage Request and Limit",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": null,
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "KUBE_SCORE",
            "title": "Pod NetworkPolicy",
            "description": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "remediation": null,
            "origin": "kube-score",
            "originId": "pod-networkpolicy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "KUBE_SCORE",
            "title": "Container Image Pull Policy",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": null,
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "KUBE_SCORE",
            "title": "Container Security Context User Group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": null,
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "KUBE_SCORE",
            "title": "Container Resources",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": null,
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "KUBE_SCORE",
            "title": "Container Ephemeral Storage Request and Limit",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": null,
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "KUBE_SCORE",
            "title": "Pod NetworkPolicy",
            "description": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "remediation": null,
            "origin": "kube-score",
            "originId": "pod-networkpolicy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "KUBE_SCORE",
            "title": "Container Image Pull Policy",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": null,
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "KUBE_SCORE",
            "title": "Container Security Context User Group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": null,
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "KUBE_SCORE",
            "title": "Container Resources",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": null,
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "KUBE_SCORE",
            "title": "Pod Probes",
            "description": "Makes sure that all Pods have safe probe configurations",
            "remediation": null,
            "origin": "kube-score",
            "originId": "pod-probes",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "KUBE_SCORE",
            "title": "Pod Probes",
            "description": "Makes sure that all Pods have safe probe configurations",
            "remediation": null,
            "origin": "kube-score",
            "originId": "pod-probes",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "KUBE_SCORE",
            "title": "Container Ephemeral Storage Request and Limit",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": null,
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "KUBE_SCORE",
            "title": "Pod NetworkPolicy",
            "description": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "remediation": null,
            "origin": "kube-score",
            "originId": "pod-networkpolicy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "KUBE_SCORE",
            "title": "Container Image Pull Policy",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": null,
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "KUBE_SCORE",
            "title": "Container Security Context User Group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": null,
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "KUBE_SCORE",
            "title": "Container Resources",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": null,
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          }
        ]
      },
      {
        "kind": "Role",
        "namespace": "kube-system",
        "name": "eks-vpc-resource-controller-role",
        "checks": [
          {
            "severity": "MEDIUM",
            "title": "Manage configmaps",
            "description": "Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.",
            "remediation": "Remove write permission verbs for resource 'configmaps'",
            "origin": "trivy",
            "originId": "KSV049",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Manage configmaps",
            "description": "Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.",
            "remediation": "Remove write permission verbs for resource 'configmaps'",
            "origin": "trivy",
            "originId": "KSV049",
            "passed": false,
            "skipped": false,
            "skipReason": null
          }
        ]
      }
    ],
    "kube-public": [
      {
        "kind": "Role",
        "namespace": "kube-public",
        "name": "system:controller:bootstrap-signer",
        "checks": [
          {
            "severity": "MEDIUM",
            "title": "Manage configmaps",
            "description": "Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.",
            "remediation": "Remove write permission verbs for resource 'configmaps'",
            "origin": "trivy",
            "originId": "KSV049",
            "passed": false,
            "skipped": false,
            "skipReason": null
          }
        ]
      }
    ]
  },
  "nonNamespacedResources": [
    {
      "kind": "Job",
      "namespace": null,
      "name": "kube-bench-master",
      "checks": [
        {
          "severity": "LOW",
          "title": "Configured readiness probe",
          "description": "Readiness probe is intended to ensure that workload is ready to process network traffic. It is highly recommended to define readiness probe for every worker container. This control finds all the pods where the readiness probe is not configured.",
          "remediation": "Ensure Readiness probes are configured wherever possible.",
          "origin": "kubescape",
          "originId": "C-0018",
          "passed": false,
          "skipped": false,
          "skipReason": null
        },
        {
          "severity": "LOW",
          "title": "Label usage for resources",
          "description": "It is recommended to set labels that identify semantic attributes of your application or deployment. For example, { app: myapp, tier: frontend, phase: test, deployment: v3 }. These labels can used to assign policies to logical groups of the deployments as well as for presentation and tracking purposes. This control helps you find deployments without any of the expected labels.",
          "remediation": "Define labels that are most suitable to your needs of use the exceptions to prevent further notifications.",
          "origin": "kubescape",
          "originId": "C-0076",
          "passed": false,
          "skipped": false,
          "skipReason": null
        },
        {
          "severity": "HIGH",
          "title": "Resources memory limit and request",
          "description": "This control identifies all Pods for which the memory limit is not set.",
          "remediation": "Set the memory limit or use exception mechanism to avoid unnecessary notifications.",
          "origin": "kubescape",
          "originId": "C-0004",
          "passed": false,
          "skipped": false,
          "skipReason": null
        },
        {
          "severity": "LOW",
          "title": "K8s common labels usage",
          "description": "Kubernetes common labels help manage and monitor Kubernetes cluster using different tools such as kubectl, dashboard and others in an interoperable way. Refer to https://kubernetes.io/docs/concepts/overview/working-with-objects/common-labels/ for more information. This control helps you find objects that don't have any of these labels defined.",
          "remediation": "Define applicable labels or use the exception mechanism to prevent further notifications.",
          "origin": "kubescape",
          "originId": "C-0077",
          "passed": false,
          "skipped": false,
          "skipReason": null
        },
        {
          "severity": "HIGH",
          "title": "Host PID/IPC privileges",
          "description": "Containers should be isolated from the host machine as much as possible. The hostPID and hostIPC fields in deployment yaml may allow cross-container influence and may expose the host itself to potentially malicious or destructive actions. This control identifies all pods using hostPID or hostIPC privileges.",
          "remediation": "Remove hostPID and hostIPC from the yaml file(s) privileges unless they are absolutely necessary.",
          "origin": "kubescape",
          "originId": "C-0038",
          "passed": false,
          "skipped": false,
          "skipReason": null
        },
        {
          "severity": "MEDIUM",
          "title": "Ingress and Egress blocked",
          "description": "Disable Ingress and Egress traffic on all pods wherever possible. It is recommended to define restrictive network policy on all new pods, and then enable sources/destinations that this pod must communicate with.",
          "remediation": "Define a network policy that restricts ingress and egress connections.",
          "origin": "kubescape",
          "originId": "C-0030",
          "passed": false,
          "skipped": false,
          "skipReason": null
        },
        {
          "severity": "MEDIUM",
          "title": "Configured liveness probe",
          "description": "Liveness probe is intended to ensure that workload remains healthy during its entire execution lifecycle, or otherwise restrat the container. It is highly recommended to define liveness probe for every worker container. This control finds all the pods where the Liveness probe is not configured.",
          "remediation": "Ensure Liveness probes are configured wherever possible.",
          "origin": "kubescape",
          "originId": "C-0056",
          "passed": false,
          "skipped": false,
          "skipReason": null
        },
        {
          "severity": "HIGH",
          "title": "HostPath mount",
          "description": "Mounting host directory to the container can be used by attackers to get access to the underlying host. This control identifies all the pods using hostPath mount.",
          "remediation": "Remove hostPath mounts unless they are absolutely necessary and use exception mechanism to remove notifications.",
          "origin": "kubescape",
          "originId": "C-0048",
          "passed": false,
          "skipped": false,
          "skipReason": null
        },
        {
          "severity": "MEDIUM",
          "title": "Allow privilege escalation",
          "description": "Attackers may gain access to a container and uplift its privilege to enable excessive capabilities.",
          "remediation": "If your application does not need it, make sure the allowPrivilegeEscalation field of the securityContext is set to false.",
          "origin": "kubescape",
          "originId": "C-0016",
          "passed": false,
          "skipped": false,
          "skipReason": null
        },
        {
          "severity": "HIGH",
          "title": "Resources CPU limit and request",
          "description": "This control identifies all Pods for which the CPU limit is not set.",
          "remediation": "Set the CPU limit or use exception mechanism to avoid unnecessary notifications.",
          "origin": "kubescape",
          "originId": "C-0050",
          "passed": false,
          "skipped": false,
          "skipReason": null
        },
        {
          "severity": "LOW",
          "title": "Pods in default namespace",
          "description": "It is recommended to avoid running pods in cluster without explicit namespace assignment. This control identifies all the pods running in the default namespace.",
          "remediation": "Create necessary namespaces and move all the pods from default namespace there.",
          "origin": "kubescape",
          "originId": "C-0061",
          "passed": false,
          "skipped": false,
          "skipReason": null
        },
        {
          "severity": "MEDIUM",
          "title": "Linux hardening",
          "description": "Containers may be given more privileges than they actually need. This can increase the potential impact of a container compromise.",
          "remediation": "You can use AppArmor, Seccomp, SELinux and Linux Capabilities mechanisms to restrict containers abilities to utilize unwanted privileges.",
          "origin": "kubescape",
          "originId": "C-0055",
          "passed": false,
          "skipped": false,
          "skipReason": null
        },
        {
          "severity": "HIGH",
          "title": "Resource limits",
          "description": "CPU and memory resources should have a limit set for every container or a namespace to prevent resource exhaustion. This control identifies all the pods without resource limit definitions by checking their yaml definition file as well as their namespace LimitRange objects. It is also recommended to use ResourceQuota object to restrict overall namespace resources, but this is not verified by this control.",
          "remediation": "Define LimitRange and Resource Limits in the namespace or in the deployment/pod manifests.",
          "origin": "kubescape",
          "originId": "C-0009",
          "passed": false,
          "skipped": false,
          "skipReason": null
        },
        {
          "severity": "LOW",
          "title": "Immutable container filesystem",
          "description": "Mutable container filesystem can be abused to inject malicious code or data into containers. Use immutable (read-only) filesystem to limit potential attacks.",
          "remediation": "Set the filesystem of the container to read-only when possible (pod securityContext, readOnlyRootFilesystem: true). If containers application needs to write into the filesystem, it is recommended to mount secondary filesystems for specific directories where application require write access.",
          "origin": "kubescape",
          "originId": "C-0017",
          "passed": false,
          "skipped": false,
          "skipReason": null
        },
        {
          "severity": "LOW",
          "title": "Configured readiness probe",
          "description": "Readiness probe is intended to ensure that workload is ready to process network traffic. It is highly recommended to define readiness probe for every worker container. This control finds all the pods where the readiness probe is not configured.",
          "remediation": "Ensure Readiness probes are configured wherever possible.",
          "origin": "kubescape",
          "originId": "C-0018",
          "passed": false,
          "skipped": false,
          "skipReason": null
        },
        {
          "severity": "LOW",
          "title": "Label usage for resources",
          "description": "It is recommended to set labels that identify semantic attributes of your application or deployment. For example, { app: myapp, tier: frontend, phase: test, deployment: v3 }. These labels can used to assign policies to logical groups of the deployments as well as for presentation and tracking purposes. This control helps you find deployments without any of the expected labels.",
          "remediation": "Define labels that are most suitable to your needs of use the exceptions to prevent further notifications.",
          "origin": "kubescape",
          "originId": "C-0076",
          "passed": false,
          "skipped": false,
          "skipReason": null
        },
        {
          "severity": "HIGH",
          "title": "Resources memory limit and request",
          "description": "This control identifies all Pods for which the memory limit is not set.",
          "remediation": "Set the memory limit or use exception mechanism to avoid unnecessary notifications.",
          "origin": "kubescape",
          "originId": "C-0004",
          "passed": false,
          "skipped": false,
          "skipReason": null
        },
        {
          "severity": "LOW",
          "title": "K8s common labels usage",
          "description": "Kubernetes common labels help manage and monitor Kubernetes cluster using different tools such as kubectl, dashboard and others in an interoperable way. Refer to https://kubernetes.io/docs/concepts/overview/working-with-objects/common-labels/ for more information. This control helps you find objects that don't have any of these labels defined.",
          "remediation": "Define applicable labels or use the exception mechanism to prevent further notifications.",
          "origin": "kubescape",
          "originId": "C-0077",
          "passed": false,
          "skipped": false,
          "skipReason": null
        },
        {
          "severity": "HIGH",
          "title": "Host PID/IPC privileges",
          "description": "Containers should be isolated from the host machine as much as possible. The hostPID and hostIPC fields in deployment yaml may allow cross-container influence and may expose the host itself to potentially malicious or destructive actions. This control identifies all pods using hostPID or hostIPC privileges.",
          "remediation": "Remove hostPID and hostIPC from the yaml file(s) privileges unless they are absolutely necessary.",
          "origin": "kubescape",
          "originId": "C-0038",
          "passed": false,
          "skipped": false,
          "skipReason": null
        },
        {
          "severity": "MEDIUM",
          "title": "Ingress and Egress blocked",
          "description": "Disable Ingress and Egress traffic on all pods wherever possible. It is recommended to define restrictive network policy on all new pods, and then enable sources/destinations that this pod must communicate with.",
          "remediation": "Define a network policy that restricts ingress and egress connections.",
          "origin": "kubescape",
          "originId": "C-0030",
          "passed": false,
          "skipped": false,
          "skipReason": null
        },
        {
          "severity": "MEDIUM",
          "title": "Configured liveness probe",
          "description": "Liveness probe is intended to ensure that workload remains healthy during its entire execution lifecycle, or otherwise restrat the container. It is highly recommended to define liveness probe for every worker container. This control finds all the pods where the Liveness probe is not configured.",
          "remediation": "Ensure Liveness probes are configured wherever possible.",
          "origin": "kubescape",
          "originId": "C-0056",
          "passed": false,
          "skipped": false,
          "skipReason": null
        },
        {
          "severity": "HIGH",
          "title": "HostPath mount",
          "description": "Mounting host directory to the container can be used by attackers to get access to the underlying host. This control identifies all the pods using hostPath mount.",
          "remediation": "Remove hostPath mounts unless they are absolutely necessary and use exception mechanism to remove notifications.",
          "origin": "kubescape",
          "originId": "C-0048",
          "passed": false,
          "skipped": false,
          "skipReason": null
        },
        {
          "severity": "MEDIUM",
          "title": "Allow privilege escalation",
          "description": "Attackers may gain access to a container and uplift its privilege to enable excessive capabilities.",
          "remediation": "If your application does not need it, make sure the allowPrivilegeEscalation field of the securityContext is set to false.",
          "origin": "kubescape",
          "originId": "C-0016",
          "passed": false,
          "skipped": false,
          "skipReason": null
        },
        {
          "severity": "HIGH",
          "title": "Resources CPU limit and request",
          "description": "This control identifies all Pods for which the CPU limit is not set.",
          "remediation": "Set the CPU limit or use exception mechanism to avoid unnecessary notifications.",
          "origin": "kubescape",
          "originId": "C-0050",
          "passed": false,
          "skipped": false,
          "skipReason": null
        },
        {
          "severity": "LOW",
          "title": "Pods in default namespace",
          "description": "It is recommended to avoid running pods in cluster without explicit namespace assignment. This control identifies all the pods running in the default namespace.",
          "remediation": "Create necessary namespaces and move all the pods from default namespace there.",
          "origin": "kubescape",
          "originId": "C-0061",
          "passed": false,
          "skipped": false,
          "skipReason": null
        },
        {
          "severity": "MEDIUM",
          "title": "Linux hardening",
          "description": "Containers may be given more privileges than they actually need. This can increase the potential impact of a container compromise.",
          "remediation": "You can use AppArmor, Seccomp, SELinux and Linux Capabilities mechanisms to restrict containers abilities to utilize unwanted privileges.",
          "origin": "kubescape",
          "originId": "C-0055",
          "passed": false,
          "skipped": false,
          "skipReason": null
        },
        {
          "severity": "HIGH",
          "title": "Resource limits",
          "description": "CPU and memory resources should have a limit set for every container or a namespace to prevent resource exhaustion. This control identifies all the pods without resource limit definitions by checking their yaml definition file as well as their namespace LimitRange objects. It is also recommended to use ResourceQuota object to restrict overall namespace resources, but this is not verified by this control.",
          "remediation": "Define LimitRange and Resource Limits in the namespace or in the deployment/pod manifests.",
          "origin": "kubescape",
          "originId": "C-0009",
          "passed": false,
          "skipped": false,
          "skipReason": null
        },
        {
          "severity": "LOW",
          "title": "Immutable container filesystem",
          "description": "Mutable container filesystem can be abused to inject malicious code or data into containers. Use immutable (read-only) filesystem to limit potential attacks.",
          "remediation": "Set the filesystem of the container to read-only when possible (pod securityContext, readOnlyRootFilesystem: true). If containers application needs to write into the filesystem, it is recommended to mount secondary filesystems for specific directories where application require write access.",
          "origin": "kubescape",
          "originId": "C-0017",
          "passed": false,
          "skipped": false,
          "skipReason": null
        }
      ]
    },
    {
      "kind": "Job",
      "namespace": null,
      "name": "trivy-scan-job",
      "checks": [
        {
          "severity": "LOW",
          "title": "Configured readiness probe",
          "description": "Readiness probe is intended to ensure that workload is ready to process network traffic. It is highly recommended to define readiness probe for every worker container. This control finds all the pods where the readiness probe is not configured.",
          "remediation": "Ensure Readiness probes are configured wherever possible.",
          "origin": "kubescape",
          "originId": "C-0018",
          "passed": false,
          "skipped": false,
          "skipReason": null
        },
        {
          "severity": "LOW",
          "title": "Label usage for resources",
          "description": "It is recommended to set labels that identify semantic attributes of your application or deployment. For example, { app: myapp, tier: frontend, phase: test, deployment: v3 }. These labels can used to assign policies to logical groups of the deployments as well as for presentation and tracking purposes. This control helps you find deployments without any of the expected labels.",
          "remediation": "Define labels that are most suitable to your needs of use the exceptions to prevent further notifications.",
          "origin": "kubescape",
          "originId": "C-0076",
          "passed": false,
          "skipped": false,
          "skipReason": null
        },
        {
          "severity": "HIGH",
          "title": "Resources memory limit and request",
          "description": "This control identifies all Pods for which the memory limit is not set.",
          "remediation": "Set the memory limit or use exception mechanism to avoid unnecessary notifications.",
          "origin": "kubescape",
          "originId": "C-0004",
          "passed": false,
          "skipped": false,
          "skipReason": null
        },
        {
          "severity": "LOW",
          "title": "K8s common labels usage",
          "description": "Kubernetes common labels help manage and monitor Kubernetes cluster using different tools such as kubectl, dashboard and others in an interoperable way. Refer to https://kubernetes.io/docs/concepts/overview/working-with-objects/common-labels/ for more information. This control helps you find objects that don't have any of these labels defined.",
          "remediation": "Define applicable labels or use the exception mechanism to prevent further notifications.",
          "origin": "kubescape",
          "originId": "C-0077",
          "passed": false,
          "skipped": false,
          "skipReason": null
        },
        {
          "severity": "MEDIUM",
          "title": "Ingress and Egress blocked",
          "description": "Disable Ingress and Egress traffic on all pods wherever possible. It is recommended to define restrictive network policy on all new pods, and then enable sources/destinations that this pod must communicate with.",
          "remediation": "Define a network policy that restricts ingress and egress connections.",
          "origin": "kubescape",
          "originId": "C-0030",
          "passed": false,
          "skipped": false,
          "skipReason": null
        },
        {
          "severity": "MEDIUM",
          "title": "Configured liveness probe",
          "description": "Liveness probe is intended to ensure that workload remains healthy during its entire execution lifecycle, or otherwise restrat the container. It is highly recommended to define liveness probe for every worker container. This control finds all the pods where the Liveness probe is not configured.",
          "remediation": "Ensure Liveness probes are configured wherever possible.",
          "origin": "kubescape",
          "originId": "C-0056",
          "passed": false,
          "skipped": false,
          "skipReason": null
        },
        {
          "severity": "MEDIUM",
          "title": "Allow privilege escalation",
          "description": "Attackers may gain access to a container and uplift its privilege to enable excessive capabilities.",
          "remediation": "If your application does not need it, make sure the allowPrivilegeEscalation field of the securityContext is set to false.",
          "origin": "kubescape",
          "originId": "C-0016",
          "passed": false,
          "skipped": false,
          "skipReason": null
        },
        {
          "severity": "HIGH",
          "title": "Resources CPU limit and request",
          "description": "This control identifies all Pods for which the CPU limit is not set.",
          "remediation": "Set the CPU limit or use exception mechanism to avoid unnecessary notifications.",
          "origin": "kubescape",
          "originId": "C-0050",
          "passed": false,
          "skipped": false,
          "skipReason": null
        },
        {
          "severity": "LOW",
          "title": "Pods in default namespace",
          "description": "It is recommended to avoid running pods in cluster without explicit namespace assignment. This control identifies all the pods running in the default namespace.",
          "remediation": "Create necessary namespaces and move all the pods from default namespace there.",
          "origin": "kubescape",
          "originId": "C-0061",
          "passed": false,
          "skipped": false,
          "skipReason": null
        },
        {
          "severity": "MEDIUM",
          "title": "Linux hardening",
          "description": "Containers may be given more privileges than they actually need. This can increase the potential impact of a container compromise.",
          "remediation": "You can use AppArmor, Seccomp, SELinux and Linux Capabilities mechanisms to restrict containers abilities to utilize unwanted privileges.",
          "origin": "kubescape",
          "originId": "C-0055",
          "passed": false,
          "skipped": false,
          "skipReason": null
        },
        {
          "severity": "HIGH",
          "title": "Resource limits",
          "description": "CPU and memory resources should have a limit set for every container or a namespace to prevent resource exhaustion. This control identifies all the pods without resource limit definitions by checking their yaml definition file as well as their namespace LimitRange objects. It is also recommended to use ResourceQuota object to restrict overall namespace resources, but this is not verified by this control.",
          "remediation": "Define LimitRange and Resource Limits in the namespace or in the deployment/pod manifests.",
          "origin": "kubescape",
          "originId": "C-0009",
          "passed": false,
          "skipped": false,
          "skipReason": null
        },
        {
          "severity": "LOW",
          "title": "Immutable container filesystem",
          "description": "Mutable container filesystem can be abused to inject malicious code or data into containers. Use immutable (read-only) filesystem to limit potential attacks.",
          "remediation": "Set the filesystem of the container to read-only when possible (pod securityContext, readOnlyRootFilesystem: true). If containers application needs to write into the filesystem, it is recommended to mount secondary filesystems for specific directories where application require write access.",
          "origin": "kubescape",
          "originId": "C-0017",
          "passed": false,
          "skipped": false,
          "skipReason": null
        },
        {
          "severity": "LOW",
          "title": "Configured readiness probe",
          "description": "Readiness probe is intended to ensure that workload is ready to process network traffic. It is highly recommended to define readiness probe for every worker container. This control finds all the pods where the readiness probe is not configured.",
          "remediation": "Ensure Readiness probes are configured wherever possible.",
          "origin": "kubescape",
          "originId": "C-0018",
          "passed": false,
          "skipped": false,
          "skipReason": null
        },
        {
          "severity": "LOW",
          "title": "Label usage for resources",
          "description": "It is recommended to set labels that identify semantic attributes of your application or deployment. For example, { app: myapp, tier: frontend, phase: test, deployment: v3 }. These labels can used to assign policies to logical groups of the deployments as well as for presentation and tracking purposes. This control helps you find deployments without any of the expected labels.",
          "remediation": "Define labels that are most suitable to your needs of use the exceptions to prevent further notifications.",
          "origin": "kubescape",
          "originId": "C-0076",
          "passed": false,
          "skipped": false,
          "skipReason": null
        },
        {
          "severity": "HIGH",
          "title": "Resources memory limit and request",
          "description": "This control identifies all Pods for which the memory limit is not set.",
          "remediation": "Set the memory limit or use exception mechanism to avoid unnecessary notifications.",
          "origin": "kubescape",
          "originId": "C-0004",
          "passed": false,
          "skipped": false,
          "skipReason": null
        },
        {
          "severity": "LOW",
          "title": "K8s common labels usage",
          "description": "Kubernetes common labels help manage and monitor Kubernetes cluster using different tools such as kubectl, dashboard and others in an interoperable way. Refer to https://kubernetes.io/docs/concepts/overview/working-with-objects/common-labels/ for more information. This control helps you find objects that don't have any of these labels defined.",
          "remediation": "Define applicable labels or use the exception mechanism to prevent further notifications.",
          "origin": "kubescape",
          "originId": "C-0077",
          "passed": false,
          "skipped": false,
          "skipReason": null
        },
        {
          "severity": "MEDIUM",
          "title": "Ingress and Egress blocked",
          "description": "Disable Ingress and Egress traffic on all pods wherever possible. It is recommended to define restrictive network policy on all new pods, and then enable sources/destinations that this pod must communicate with.",
          "remediation": "Define a network policy that restricts ingress and egress connections.",
          "origin": "kubescape",
          "originId": "C-0030",
          "passed": false,
          "skipped": false,
          "skipReason": null
        },
        {
          "severity": "MEDIUM",
          "title": "Configured liveness probe",
          "description": "Liveness probe is intended to ensure that workload remains healthy during its entire execution lifecycle, or otherwise restrat the container. It is highly recommended to define liveness probe for every worker container. This control finds all the pods where the Liveness probe is not configured.",
          "remediation": "Ensure Liveness probes are configured wherever possible.",
          "origin": "kubescape",
          "originId": "C-0056",
          "passed": false,
          "skipped": false,
          "skipReason": null
        },
        {
          "severity": "MEDIUM",
          "title": "Allow privilege escalation",
          "description": "Attackers may gain access to a container and uplift its privilege to enable excessive capabilities.",
          "remediation": "If your application does not need it, make sure the allowPrivilegeEscalation field of the securityContext is set to false.",
          "origin": "kubescape",
          "originId": "C-0016",
          "passed": false,
          "skipped": false,
          "skipReason": null
        },
        {
          "severity": "HIGH",
          "title": "Resources CPU limit and request",
          "description": "This control identifies all Pods for which the CPU limit is not set.",
          "remediation": "Set the CPU limit or use exception mechanism to avoid unnecessary notifications.",
          "origin": "kubescape",
          "originId": "C-0050",
          "passed": false,
          "skipped": false,
          "skipReason": null
        },
        {
          "severity": "LOW",
          "title": "Pods in default namespace",
          "description": "It is recommended to avoid running pods in cluster without explicit namespace assignment. This control identifies all the pods running in the default namespace.",
          "remediation": "Create necessary namespaces and move all the pods from default namespace there.",
          "origin": "kubescape",
          "originId": "C-0061",
          "passed": false,
          "skipped": false,
          "skipReason": null
        },
        {
          "severity": "MEDIUM",
          "title": "Linux hardening",
          "description": "Containers may be given more privileges than they actually need. This can increase the potential impact of a container compromise.",
          "remediation": "You can use AppArmor, Seccomp, SELinux and Linux Capabilities mechanisms to restrict containers abilities to utilize unwanted privileges.",
          "origin": "kubescape",
          "originId": "C-0055",
          "passed": false,
          "skipped": false,
          "skipReason": null
        },
        {
          "severity": "HIGH",
          "title": "Resource limits",
          "description": "CPU and memory resources should have a limit set for every container or a namespace to prevent resource exhaustion. This control identifies all the pods without resource limit definitions by checking their yaml definition file as well as their namespace LimitRange objects. It is also recommended to use ResourceQuota object to restrict overall namespace resources, but this is not verified by this control.",
          "remediation": "Define LimitRange and Resource Limits in the namespace or in the deployment/pod manifests.",
          "origin": "kubescape",
          "originId": "C-0009",
          "passed": false,
          "skipped": false,
          "skipReason": null
        },
        {
          "severity": "LOW",
          "title": "Immutable container filesystem",
          "description": "Mutable container filesystem can be abused to inject malicious code or data into containers. Use immutable (read-only) filesystem to limit potential attacks.",
          "remediation": "Set the filesystem of the container to read-only when possible (pod securityContext, readOnlyRootFilesystem: true). If containers application needs to write into the filesystem, it is recommended to mount secondary filesystems for specific directories where application require write access.",
          "origin": "kubescape",
          "originId": "C-0017",
          "passed": false,
          "skipped": false,
          "skipReason": null
        }
      ]
    },
    {
      "kind": "Deployment",
      "namespace": null,
      "name": "-kcs-deployment",
      "checks": [
        {
          "severity": "LOW",
          "title": "Configured readiness probe",
          "description": "Readiness probe is intended to ensure that workload is ready to process network traffic. It is highly recommended to define readiness probe for every worker container. This control finds all the pods where the readiness probe is not configured.",
          "remediation": "Ensure Readiness probes are configured wherever possible.",
          "origin": "kubescape",
          "originId": "C-0018",
          "passed": false,
          "skipped": false,
          "skipReason": null
        },
        {
          "severity": "LOW",
          "title": "Label usage for resources",
          "description": "It is recommended to set labels that identify semantic attributes of your application or deployment. For example, { app: myapp, tier: frontend, phase: test, deployment: v3 }. These labels can used to assign policies to logical groups of the deployments as well as for presentation and tracking purposes. This control helps you find deployments without any of the expected labels.",
          "remediation": "Define labels that are most suitable to your needs of use the exceptions to prevent further notifications.",
          "origin": "kubescape",
          "originId": "C-0076",
          "passed": false,
          "skipped": false,
          "skipReason": null
        },
        {
          "severity": "HIGH",
          "title": "Resources memory limit and request",
          "description": "This control identifies all Pods for which the memory limit is not set.",
          "remediation": "Set the memory limit or use exception mechanism to avoid unnecessary notifications.",
          "origin": "kubescape",
          "originId": "C-0004",
          "passed": false,
          "skipped": false,
          "skipReason": null
        },
        {
          "severity": "LOW",
          "title": "K8s common labels usage",
          "description": "Kubernetes common labels help manage and monitor Kubernetes cluster using different tools such as kubectl, dashboard and others in an interoperable way. Refer to https://kubernetes.io/docs/concepts/overview/working-with-objects/common-labels/ for more information. This control helps you find objects that don't have any of these labels defined.",
          "remediation": "Define applicable labels or use the exception mechanism to prevent further notifications.",
          "origin": "kubescape",
          "originId": "C-0077",
          "passed": false,
          "skipped": false,
          "skipReason": null
        },
        {
          "severity": "MEDIUM",
          "title": "Ingress and Egress blocked",
          "description": "Disable Ingress and Egress traffic on all pods wherever possible. It is recommended to define restrictive network policy on all new pods, and then enable sources/destinations that this pod must communicate with.",
          "remediation": "Define a network policy that restricts ingress and egress connections.",
          "origin": "kubescape",
          "originId": "C-0030",
          "passed": false,
          "skipped": false,
          "skipReason": null
        },
        {
          "severity": "MEDIUM",
          "title": "Configured liveness probe",
          "description": "Liveness probe is intended to ensure that workload remains healthy during its entire execution lifecycle, or otherwise restrat the container. It is highly recommended to define liveness probe for every worker container. This control finds all the pods where the Liveness probe is not configured.",
          "remediation": "Ensure Liveness probes are configured wherever possible.",
          "origin": "kubescape",
          "originId": "C-0056",
          "passed": false,
          "skipped": false,
          "skipReason": null
        },
        {
          "severity": "MEDIUM",
          "title": "Allow privilege escalation",
          "description": "Attackers may gain access to a container and uplift its privilege to enable excessive capabilities.",
          "remediation": "If your application does not need it, make sure the allowPrivilegeEscalation field of the securityContext is set to false.",
          "origin": "kubescape",
          "originId": "C-0016",
          "passed": false,
          "skipped": false,
          "skipReason": null
        },
        {
          "severity": "HIGH",
          "title": "Resources CPU limit and request",
          "description": "This control identifies all Pods for which the CPU limit is not set.",
          "remediation": "Set the CPU limit or use exception mechanism to avoid unnecessary notifications.",
          "origin": "kubescape",
          "originId": "C-0050",
          "passed": false,
          "skipped": false,
          "skipReason": null
        },
        {
          "severity": "MEDIUM",
          "title": "Linux hardening",
          "description": "Containers may be given more privileges than they actually need. This can increase the potential impact of a container compromise.",
          "remediation": "You can use AppArmor, Seccomp, SELinux and Linux Capabilities mechanisms to restrict containers abilities to utilize unwanted privileges.",
          "origin": "kubescape",
          "originId": "C-0055",
          "passed": false,
          "skipped": false,
          "skipReason": null
        },
        {
          "severity": "HIGH",
          "title": "Resource limits",
          "description": "CPU and memory resources should have a limit set for every container or a namespace to prevent resource exhaustion. This control identifies all the pods without resource limit definitions by checking their yaml definition file as well as their namespace LimitRange objects. It is also recommended to use ResourceQuota object to restrict overall namespace resources, but this is not verified by this control.",
          "remediation": "Define LimitRange and Resource Limits in the namespace or in the deployment/pod manifests.",
          "origin": "kubescape",
          "originId": "C-0009",
          "passed": false,
          "skipped": false,
          "skipReason": null
        },
        {
          "severity": "LOW",
          "title": "Immutable container filesystem",
          "description": "Mutable container filesystem can be abused to inject malicious code or data into containers. Use immutable (read-only) filesystem to limit potential attacks.",
          "remediation": "Set the filesystem of the container to read-only when possible (pod securityContext, readOnlyRootFilesystem: true). If containers application needs to write into the filesystem, it is recommended to mount secondary filesystems for specific directories where application require write access.",
          "origin": "kubescape",
          "originId": "C-0017",
          "passed": false,
          "skipped": false,
          "skipReason": null
        }
      ]
    },
    {
      "kind": "ServiceAccount",
      "namespace": null,
      "name": "-kcs-serviceaccount",
      "checks": [
        {
          "severity": "MEDIUM",
          "title": "Data Destruction",
          "description": "Attackers may attempt to destroy data and resources in the cluster. This includes deleting deployments, configurations, storage, and compute resources. This control identifies all subjects that can delete resources.",
          "remediation": "You should follow the least privilege principle and minimize the number of subjects that can delete resources.",
          "origin": "kubescape",
          "originId": "C-0007",
          "passed": false,
          "skipped": false,
          "skipReason": null
        },
        {
          "severity": "HIGH",
          "title": "List Kubernetes secrets",
          "description": "Attackers who have permissions to access secrets can access sensitive information that might include credentials to various services. This control determines which user, group or service account can list/get secrets.",
          "remediation": "Monitor and approve list of users, groups and service accounts that can access secrets. Use exception mechanism to prevent repetitive the notifications.",
          "origin": "kubescape",
          "originId": "C-0015",
          "passed": false,
          "skipped": false,
          "skipReason": null
        },
        {
          "severity": "MEDIUM",
          "title": "Access container service account",
          "description": "Attackers who obtain access to a pod can use its SA token to communicate with KubeAPI server. All pods with SA token mounted (if such token has a Role or a ClusterRole binding) are considerred potentially dangerous.",
          "remediation": "Verify that RBAC is enabled. Follow the least privilege principle and ensure that only necessary pods have SA token mounted into them.",
          "origin": "kubescape",
          "originId": "C-0053",
          "passed": false,
          "skipped": false,
          "skipReason": null
        },
        {
          "severity": "MEDIUM",
          "title": "Automatic mapping of service account",
          "description": "Potential attacker may gain access to a pod and steal its service account token. Therefore, it is recommended to disable automatic mapping of the service account tokens in service account configuration and enable it only for pods that need to use them.",
          "remediation": "Disable automatic mounting of service account tokens to pods either at the service account level or at the individual pod level, by specifying the automountServiceAccountToken: false. Note that pod level takes precedence.",
          "origin": "kubescape",
          "originId": "C-0034",
          "passed": false,
          "skipped": false,
          "skipReason": null
        }
      ]
    },
    {
      "kind": "Deployment",
      "namespace": null,
      "name": "-kube-security-scanner",
      "checks": [
        {
          "severity": "LOW",
          "title": "Label usage for resources",
          "description": "It is recommended to set labels that identify semantic attributes of your application or deployment. For example, { app: myapp, tier: frontend, phase: test, deployment: v3 }. These labels can used to assign policies to logical groups of the deployments as well as for presentation and tracking purposes. This control helps you find deployments without any of the expected labels.",
          "remediation": "Define labels that are most suitable to your needs of use the exceptions to prevent further notifications.",
          "origin": "kubescape",
          "originId": "C-0076",
          "passed": false,
          "skipped": false,
          "skipReason": null
        },
        {
          "severity": "HIGH",
          "title": "Resources memory limit and request",
          "description": "This control identifies all Pods for which the memory limit is not set.",
          "remediation": "Set the memory limit or use exception mechanism to avoid unnecessary notifications.",
          "origin": "kubescape",
          "originId": "C-0004",
          "passed": false,
          "skipped": false,
          "skipReason": null
        },
        {
          "severity": "MEDIUM",
          "title": "Ingress and Egress blocked",
          "description": "Disable Ingress and Egress traffic on all pods wherever possible. It is recommended to define restrictive network policy on all new pods, and then enable sources/destinations that this pod must communicate with.",
          "remediation": "Define a network policy that restricts ingress and egress connections.",
          "origin": "kubescape",
          "originId": "C-0030",
          "passed": false,
          "skipped": false,
          "skipReason": null
        },
        {
          "severity": "MEDIUM",
          "title": "Allow privilege escalation",
          "description": "Attackers may gain access to a container and uplift its privilege to enable excessive capabilities.",
          "remediation": "If your application does not need it, make sure the allowPrivilegeEscalation field of the securityContext is set to false.",
          "origin": "kubescape",
          "originId": "C-0016",
          "passed": false,
          "skipped": false,
          "skipReason": null
        },
        {
          "severity": "HIGH",
          "title": "Resources CPU limit and request",
          "description": "This control identifies all Pods for which the CPU limit is not set.",
          "remediation": "Set the CPU limit or use exception mechanism to avoid unnecessary notifications.",
          "origin": "kubescape",
          "originId": "C-0050",
          "passed": false,
          "skipped": false,
          "skipReason": null
        },
        {
          "severity": "LOW",
          "title": "Pods in default namespace",
          "description": "It is recommended to avoid running pods in cluster without explicit namespace assignment. This control identifies all the pods running in the default namespace.",
          "remediation": "Create necessary namespaces and move all the pods from default namespace there.",
          "origin": "kubescape",
          "originId": "C-0061",
          "passed": false,
          "skipped": false,
          "skipReason": null
        },
        {
          "severity": "MEDIUM",
          "title": "Linux hardening",
          "description": "Containers may be given more privileges than they actually need. This can increase the potential impact of a container compromise.",
          "remediation": "You can use AppArmor, Seccomp, SELinux and Linux Capabilities mechanisms to restrict containers abilities to utilize unwanted privileges.",
          "origin": "kubescape",
          "originId": "C-0055",
          "passed": false,
          "skipped": false,
          "skipReason": null
        },
        {
          "severity": "HIGH",
          "title": "Resource limits",
          "description": "CPU and memory resources should have a limit set for every container or a namespace to prevent resource exhaustion. This control identifies all the pods without resource limit definitions by checking their yaml definition file as well as their namespace LimitRange objects. It is also recommended to use ResourceQuota object to restrict overall namespace resources, but this is not verified by this control.",
          "remediation": "Define LimitRange and Resource Limits in the namespace or in the deployment/pod manifests.",
          "origin": "kubescape",
          "originId": "C-0009",
          "passed": false,
          "skipped": false,
          "skipReason": null
        },
        {
          "severity": "LOW",
          "title": "Immutable container filesystem",
          "description": "Mutable container filesystem can be abused to inject malicious code or data into containers. Use immutable (read-only) filesystem to limit potential attacks.",
          "remediation": "Set the filesystem of the container to read-only when possible (pod securityContext, readOnlyRootFilesystem: true). If containers application needs to write into the filesystem, it is recommended to mount secondary filesystems for specific directories where application require write access.",
          "origin": "kubescape",
          "originId": "C-0017",
          "passed": false,
          "skipped": false,
          "skipReason": null
        }
      ]
    },
    {
      "kind": "Deployment",
      "namespace": null,
      "name": "-mongodb-deployment",
      "checks": [
        {
          "severity": "LOW",
          "title": "Configured readiness probe",
          "description": "Readiness probe is intended to ensure that workload is ready to process network traffic. It is highly recommended to define readiness probe for every worker container. This control finds all the pods where the readiness probe is not configured.",
          "remediation": "Ensure Readiness probes are configured wherever possible.",
          "origin": "kubescape",
          "originId": "C-0018",
          "passed": false,
          "skipped": false,
          "skipReason": null
        },
        {
          "severity": "LOW",
          "title": "Label usage for resources",
          "description": "It is recommended to set labels that identify semantic attributes of your application or deployment. For example, { app: myapp, tier: frontend, phase: test, deployment: v3 }. These labels can used to assign policies to logical groups of the deployments as well as for presentation and tracking purposes. This control helps you find deployments without any of the expected labels.",
          "remediation": "Define labels that are most suitable to your needs of use the exceptions to prevent further notifications.",
          "origin": "kubescape",
          "originId": "C-0076",
          "passed": false,
          "skipped": false,
          "skipReason": null
        },
        {
          "severity": "HIGH",
          "title": "Resources memory limit and request",
          "description": "This control identifies all Pods for which the memory limit is not set.",
          "remediation": "Set the memory limit or use exception mechanism to avoid unnecessary notifications.",
          "origin": "kubescape",
          "originId": "C-0004",
          "passed": false,
          "skipped": false,
          "skipReason": null
        },
        {
          "severity": "LOW",
          "title": "K8s common labels usage",
          "description": "Kubernetes common labels help manage and monitor Kubernetes cluster using different tools such as kubectl, dashboard and others in an interoperable way. Refer to https://kubernetes.io/docs/concepts/overview/working-with-objects/common-labels/ for more information. This control helps you find objects that don't have any of these labels defined.",
          "remediation": "Define applicable labels or use the exception mechanism to prevent further notifications.",
          "origin": "kubescape",
          "originId": "C-0077",
          "passed": false,
          "skipped": false,
          "skipReason": null
        },
        {
          "severity": "MEDIUM",
          "title": "Ingress and Egress blocked",
          "description": "Disable Ingress and Egress traffic on all pods wherever possible. It is recommended to define restrictive network policy on all new pods, and then enable sources/destinations that this pod must communicate with.",
          "remediation": "Define a network policy that restricts ingress and egress connections.",
          "origin": "kubescape",
          "originId": "C-0030",
          "passed": false,
          "skipped": false,
          "skipReason": null
        },
        {
          "severity": "MEDIUM",
          "title": "Configured liveness probe",
          "description": "Liveness probe is intended to ensure that workload remains healthy during its entire execution lifecycle, or otherwise restrat the container. It is highly recommended to define liveness probe for every worker container. This control finds all the pods where the Liveness probe is not configured.",
          "remediation": "Ensure Liveness probes are configured wherever possible.",
          "origin": "kubescape",
          "originId": "C-0056",
          "passed": false,
          "skipped": false,
          "skipReason": null
        },
        {
          "severity": "MEDIUM",
          "title": "Allow privilege escalation",
          "description": "Attackers may gain access to a container and uplift its privilege to enable excessive capabilities.",
          "remediation": "If your application does not need it, make sure the allowPrivilegeEscalation field of the securityContext is set to false.",
          "origin": "kubescape",
          "originId": "C-0016",
          "passed": false,
          "skipped": false,
          "skipReason": null
        },
        {
          "severity": "HIGH",
          "title": "Resources CPU limit and request",
          "description": "This control identifies all Pods for which the CPU limit is not set.",
          "remediation": "Set the CPU limit or use exception mechanism to avoid unnecessary notifications.",
          "origin": "kubescape",
          "originId": "C-0050",
          "passed": false,
          "skipped": false,
          "skipReason": null
        },
        {
          "severity": "LOW",
          "title": "Pods in default namespace",
          "description": "It is recommended to avoid running pods in cluster without explicit namespace assignment. This control identifies all the pods running in the default namespace.",
          "remediation": "Create necessary namespaces and move all the pods from default namespace there.",
          "origin": "kubescape",
          "originId": "C-0061",
          "passed": false,
          "skipped": false,
          "skipReason": null
        },
        {
          "severity": "MEDIUM",
          "title": "Linux hardening",
          "description": "Containers may be given more privileges than they actually need. This can increase the potential impact of a container compromise.",
          "remediation": "You can use AppArmor, Seccomp, SELinux and Linux Capabilities mechanisms to restrict containers abilities to utilize unwanted privileges.",
          "origin": "kubescape",
          "originId": "C-0055",
          "passed": false,
          "skipped": false,
          "skipReason": null
        },
        {
          "severity": "HIGH",
          "title": "Resource limits",
          "description": "CPU and memory resources should have a limit set for every container or a namespace to prevent resource exhaustion. This control identifies all the pods without resource limit definitions by checking their yaml definition file as well as their namespace LimitRange objects. It is also recommended to use ResourceQuota object to restrict overall namespace resources, but this is not verified by this control.",
          "remediation": "Define LimitRange and Resource Limits in the namespace or in the deployment/pod manifests.",
          "origin": "kubescape",
          "originId": "C-0009",
          "passed": false,
          "skipped": false,
          "skipReason": null
        },
        {
          "severity": "LOW",
          "title": "Immutable container filesystem",
          "description": "Mutable container filesystem can be abused to inject malicious code or data into containers. Use immutable (read-only) filesystem to limit potential attacks.",
          "remediation": "Set the filesystem of the container to read-only when possible (pod securityContext, readOnlyRootFilesystem: true). If containers application needs to write into the filesystem, it is recommended to mount secondary filesystems for specific directories where application require write access.",
          "origin": "kubescape",
          "originId": "C-0017",
          "passed": false,
          "skipped": false,
          "skipReason": null
        }
      ]
    },
    {
      "kind": "Job",
      "namespace": null,
      "name": "kube-bench",
      "checks": [
        {
          "severity": "LOW",
          "title": "Configured readiness probe",
          "description": "Readiness probe is intended to ensure that workload is ready to process network traffic. It is highly recommended to define readiness probe for every worker container. This control finds all the pods where the readiness probe is not configured.",
          "remediation": "Ensure Readiness probes are configured wherever possible.",
          "origin": "kubescape",
          "originId": "C-0018",
          "passed": false,
          "skipped": false,
          "skipReason": null
        },
        {
          "severity": "LOW",
          "title": "Label usage for resources",
          "description": "It is recommended to set labels that identify semantic attributes of your application or deployment. For example, { app: myapp, tier: frontend, phase: test, deployment: v3 }. These labels can used to assign policies to logical groups of the deployments as well as for presentation and tracking purposes. This control helps you find deployments without any of the expected labels.",
          "remediation": "Define labels that are most suitable to your needs of use the exceptions to prevent further notifications.",
          "origin": "kubescape",
          "originId": "C-0076",
          "passed": false,
          "skipped": false,
          "skipReason": null
        },
        {
          "severity": "HIGH",
          "title": "Resources memory limit and request",
          "description": "This control identifies all Pods for which the memory limit is not set.",
          "remediation": "Set the memory limit or use exception mechanism to avoid unnecessary notifications.",
          "origin": "kubescape",
          "originId": "C-0004",
          "passed": false,
          "skipped": false,
          "skipReason": null
        },
        {
          "severity": "LOW",
          "title": "K8s common labels usage",
          "description": "Kubernetes common labels help manage and monitor Kubernetes cluster using different tools such as kubectl, dashboard and others in an interoperable way. Refer to https://kubernetes.io/docs/concepts/overview/working-with-objects/common-labels/ for more information. This control helps you find objects that don't have any of these labels defined.",
          "remediation": "Define applicable labels or use the exception mechanism to prevent further notifications.",
          "origin": "kubescape",
          "originId": "C-0077",
          "passed": false,
          "skipped": false,
          "skipReason": null
        },
        {
          "severity": "HIGH",
          "title": "Host PID/IPC privileges",
          "description": "Containers should be isolated from the host machine as much as possible. The hostPID and hostIPC fields in deployment yaml may allow cross-container influence and may expose the host itself to potentially malicious or destructive actions. This control identifies all pods using hostPID or hostIPC privileges.",
          "remediation": "Remove hostPID and hostIPC from the yaml file(s) privileges unless they are absolutely necessary.",
          "origin": "kubescape",
          "originId": "C-0038",
          "passed": false,
          "skipped": false,
          "skipReason": null
        },
        {
          "severity": "MEDIUM",
          "title": "Ingress and Egress blocked",
          "description": "Disable Ingress and Egress traffic on all pods wherever possible. It is recommended to define restrictive network policy on all new pods, and then enable sources/destinations that this pod must communicate with.",
          "remediation": "Define a network policy that restricts ingress and egress connections.",
          "origin": "kubescape",
          "originId": "C-0030",
          "passed": false,
          "skipped": false,
          "skipReason": null
        },
        {
          "severity": "MEDIUM",
          "title": "Configured liveness probe",
          "description": "Liveness probe is intended to ensure that workload remains healthy during its entire execution lifecycle, or otherwise restrat the container. It is highly recommended to define liveness probe for every worker container. This control finds all the pods where the Liveness probe is not configured.",
          "remediation": "Ensure Liveness probes are configured wherever possible.",
          "origin": "kubescape",
          "originId": "C-0056",
          "passed": false,
          "skipped": false,
          "skipReason": null
        },
        {
          "severity": "HIGH",
          "title": "HostPath mount",
          "description": "Mounting host directory to the container can be used by attackers to get access to the underlying host. This control identifies all the pods using hostPath mount.",
          "remediation": "Remove hostPath mounts unless they are absolutely necessary and use exception mechanism to remove notifications.",
          "origin": "kubescape",
          "originId": "C-0048",
          "passed": false,
          "skipped": false,
          "skipReason": null
        },
        {
          "severity": "MEDIUM",
          "title": "Allow privilege escalation",
          "description": "Attackers may gain access to a container and uplift its privilege to enable excessive capabilities.",
          "remediation": "If your application does not need it, make sure the allowPrivilegeEscalation field of the securityContext is set to false.",
          "origin": "kubescape",
          "originId": "C-0016",
          "passed": false,
          "skipped": false,
          "skipReason": null
        },
        {
          "severity": "HIGH",
          "title": "Resources CPU limit and request",
          "description": "This control identifies all Pods for which the CPU limit is not set.",
          "remediation": "Set the CPU limit or use exception mechanism to avoid unnecessary notifications.",
          "origin": "kubescape",
          "originId": "C-0050",
          "passed": false,
          "skipped": false,
          "skipReason": null
        },
        {
          "severity": "LOW",
          "title": "Pods in default namespace",
          "description": "It is recommended to avoid running pods in cluster without explicit namespace assignment. This control identifies all the pods running in the default namespace.",
          "remediation": "Create necessary namespaces and move all the pods from default namespace there.",
          "origin": "kubescape",
          "originId": "C-0061",
          "passed": false,
          "skipped": false,
          "skipReason": null
        },
        {
          "severity": "MEDIUM",
          "title": "Linux hardening",
          "description": "Containers may be given more privileges than they actually need. This can increase the potential impact of a container compromise.",
          "remediation": "You can use AppArmor, Seccomp, SELinux and Linux Capabilities mechanisms to restrict containers abilities to utilize unwanted privileges.",
          "origin": "kubescape",
          "originId": "C-0055",
          "passed": false,
          "skipped": false,
          "skipReason": null
        },
        {
          "severity": "HIGH",
          "title": "Resource limits",
          "description": "CPU and memory resources should have a limit set for every container or a namespace to prevent resource exhaustion. This control identifies all the pods without resource limit definitions by checking their yaml definition file as well as their namespace LimitRange objects. It is also recommended to use ResourceQuota object to restrict overall namespace resources, but this is not verified by this control.",
          "remediation": "Define LimitRange and Resource Limits in the namespace or in the deployment/pod manifests.",
          "origin": "kubescape",
          "originId": "C-0009",
          "passed": false,
          "skipped": false,
          "skipReason": null
        },
        {
          "severity": "LOW",
          "title": "Immutable container filesystem",
          "description": "Mutable container filesystem can be abused to inject malicious code or data into containers. Use immutable (read-only) filesystem to limit potential attacks.",
          "remediation": "Set the filesystem of the container to read-only when possible (pod securityContext, readOnlyRootFilesystem: true). If containers application needs to write into the filesystem, it is recommended to mount secondary filesystems for specific directories where application require write access.",
          "origin": "kubescape",
          "originId": "C-0017",
          "passed": false,
          "skipped": false,
          "skipReason": null
        },
        {
          "severity": "LOW",
          "title": "Configured readiness probe",
          "description": "Readiness probe is intended to ensure that workload is ready to process network traffic. It is highly recommended to define readiness probe for every worker container. This control finds all the pods where the readiness probe is not configured.",
          "remediation": "Ensure Readiness probes are configured wherever possible.",
          "origin": "kubescape",
          "originId": "C-0018",
          "passed": false,
          "skipped": false,
          "skipReason": null
        },
        {
          "severity": "LOW",
          "title": "Label usage for resources",
          "description": "It is recommended to set labels that identify semantic attributes of your application or deployment. For example, { app: myapp, tier: frontend, phase: test, deployment: v3 }. These labels can used to assign policies to logical groups of the deployments as well as for presentation and tracking purposes. This control helps you find deployments without any of the expected labels.",
          "remediation": "Define labels that are most suitable to your needs of use the exceptions to prevent further notifications.",
          "origin": "kubescape",
          "originId": "C-0076",
          "passed": false,
          "skipped": false,
          "skipReason": null
        },
        {
          "severity": "HIGH",
          "title": "Resources memory limit and request",
          "description": "This control identifies all Pods for which the memory limit is not set.",
          "remediation": "Set the memory limit or use exception mechanism to avoid unnecessary notifications.",
          "origin": "kubescape",
          "originId": "C-0004",
          "passed": false,
          "skipped": false,
          "skipReason": null
        },
        {
          "severity": "LOW",
          "title": "K8s common labels usage",
          "description": "Kubernetes common labels help manage and monitor Kubernetes cluster using different tools such as kubectl, dashboard and others in an interoperable way. Refer to https://kubernetes.io/docs/concepts/overview/working-with-objects/common-labels/ for more information. This control helps you find objects that don't have any of these labels defined.",
          "remediation": "Define applicable labels or use the exception mechanism to prevent further notifications.",
          "origin": "kubescape",
          "originId": "C-0077",
          "passed": false,
          "skipped": false,
          "skipReason": null
        },
        {
          "severity": "HIGH",
          "title": "Host PID/IPC privileges",
          "description": "Containers should be isolated from the host machine as much as possible. The hostPID and hostIPC fields in deployment yaml may allow cross-container influence and may expose the host itself to potentially malicious or destructive actions. This control identifies all pods using hostPID or hostIPC privileges.",
          "remediation": "Remove hostPID and hostIPC from the yaml file(s) privileges unless they are absolutely necessary.",
          "origin": "kubescape",
          "originId": "C-0038",
          "passed": false,
          "skipped": false,
          "skipReason": null
        },
        {
          "severity": "MEDIUM",
          "title": "Ingress and Egress blocked",
          "description": "Disable Ingress and Egress traffic on all pods wherever possible. It is recommended to define restrictive network policy on all new pods, and then enable sources/destinations that this pod must communicate with.",
          "remediation": "Define a network policy that restricts ingress and egress connections.",
          "origin": "kubescape",
          "originId": "C-0030",
          "passed": false,
          "skipped": false,
          "skipReason": null
        },
        {
          "severity": "MEDIUM",
          "title": "Configured liveness probe",
          "description": "Liveness probe is intended to ensure that workload remains healthy during its entire execution lifecycle, or otherwise restrat the container. It is highly recommended to define liveness probe for every worker container. This control finds all the pods where the Liveness probe is not configured.",
          "remediation": "Ensure Liveness probes are configured wherever possible.",
          "origin": "kubescape",
          "originId": "C-0056",
          "passed": false,
          "skipped": false,
          "skipReason": null
        },
        {
          "severity": "HIGH",
          "title": "HostPath mount",
          "description": "Mounting host directory to the container can be used by attackers to get access to the underlying host. This control identifies all the pods using hostPath mount.",
          "remediation": "Remove hostPath mounts unless they are absolutely necessary and use exception mechanism to remove notifications.",
          "origin": "kubescape",
          "originId": "C-0048",
          "passed": false,
          "skipped": false,
          "skipReason": null
        },
        {
          "severity": "MEDIUM",
          "title": "Allow privilege escalation",
          "description": "Attackers may gain access to a container and uplift its privilege to enable excessive capabilities.",
          "remediation": "If your application does not need it, make sure the allowPrivilegeEscalation field of the securityContext is set to false.",
          "origin": "kubescape",
          "originId": "C-0016",
          "passed": false,
          "skipped": false,
          "skipReason": null
        },
        {
          "severity": "HIGH",
          "title": "Resources CPU limit and request",
          "description": "This control identifies all Pods for which the CPU limit is not set.",
          "remediation": "Set the CPU limit or use exception mechanism to avoid unnecessary notifications.",
          "origin": "kubescape",
          "originId": "C-0050",
          "passed": false,
          "skipped": false,
          "skipReason": null
        },
        {
          "severity": "LOW",
          "title": "Pods in default namespace",
          "description": "It is recommended to avoid running pods in cluster without explicit namespace assignment. This control identifies all the pods running in the default namespace.",
          "remediation": "Create necessary namespaces and move all the pods from default namespace there.",
          "origin": "kubescape",
          "originId": "C-0061",
          "passed": false,
          "skipped": false,
          "skipReason": null
        },
        {
          "severity": "MEDIUM",
          "title": "Linux hardening",
          "description": "Containers may be given more privileges than they actually need. This can increase the potential impact of a container compromise.",
          "remediation": "You can use AppArmor, Seccomp, SELinux and Linux Capabilities mechanisms to restrict containers abilities to utilize unwanted privileges.",
          "origin": "kubescape",
          "originId": "C-0055",
          "passed": false,
          "skipped": false,
          "skipReason": null
        },
        {
          "severity": "HIGH",
          "title": "Resource limits",
          "description": "CPU and memory resources should have a limit set for every container or a namespace to prevent resource exhaustion. This control identifies all the pods without resource limit definitions by checking their yaml definition file as well as their namespace LimitRange objects. It is also recommended to use ResourceQuota object to restrict overall namespace resources, but this is not verified by this control.",
          "remediation": "Define LimitRange and Resource Limits in the namespace or in the deployment/pod manifests.",
          "origin": "kubescape",
          "originId": "C-0009",
          "passed": false,
          "skipped": false,
          "skipReason": null
        },
        {
          "severity": "LOW",
          "title": "Immutable container filesystem",
          "description": "Mutable container filesystem can be abused to inject malicious code or data into containers. Use immutable (read-only) filesystem to limit potential attacks.",
          "remediation": "Set the filesystem of the container to read-only when possible (pod securityContext, readOnlyRootFilesystem: true). If containers application needs to write into the filesystem, it is recommended to mount secondary filesystems for specific directories where application require write access.",
          "origin": "kubescape",
          "originId": "C-0017",
          "passed": false,
          "skipped": false,
          "skipReason": null
        }
      ]
    },
    {
      "kind": "Pod",
      "namespace": null,
      "name": "-kube-security-scanner-test-connection",
      "checks": [
        {
          "severity": "LOW",
          "title": "Configured readiness probe",
          "description": "Readiness probe is intended to ensure that workload is ready to process network traffic. It is highly recommended to define readiness probe for every worker container. This control finds all the pods where the readiness probe is not configured.",
          "remediation": "Ensure Readiness probes are configured wherever possible.",
          "origin": "kubescape",
          "originId": "C-0018",
          "passed": false,
          "skipped": false,
          "skipReason": null
        },
        {
          "severity": "LOW",
          "title": "Label usage for resources",
          "description": "It is recommended to set labels that identify semantic attributes of your application or deployment. For example, { app: myapp, tier: frontend, phase: test, deployment: v3 }. These labels can used to assign policies to logical groups of the deployments as well as for presentation and tracking purposes. This control helps you find deployments without any of the expected labels.",
          "remediation": "Define labels that are most suitable to your needs of use the exceptions to prevent further notifications.",
          "origin": "kubescape",
          "originId": "C-0076",
          "passed": false,
          "skipped": false,
          "skipReason": null
        },
        {
          "severity": "HIGH",
          "title": "Resources memory limit and request",
          "description": "This control identifies all Pods for which the memory limit is not set.",
          "remediation": "Set the memory limit or use exception mechanism to avoid unnecessary notifications.",
          "origin": "kubescape",
          "originId": "C-0004",
          "passed": false,
          "skipped": false,
          "skipReason": null
        },
        {
          "severity": "MEDIUM",
          "title": "Ingress and Egress blocked",
          "description": "Disable Ingress and Egress traffic on all pods wherever possible. It is recommended to define restrictive network policy on all new pods, and then enable sources/destinations that this pod must communicate with.",
          "remediation": "Define a network policy that restricts ingress and egress connections.",
          "origin": "kubescape",
          "originId": "C-0030",
          "passed": false,
          "skipped": false,
          "skipReason": null
        },
        {
          "severity": "MEDIUM",
          "title": "Configured liveness probe",
          "description": "Liveness probe is intended to ensure that workload remains healthy during its entire execution lifecycle, or otherwise restrat the container. It is highly recommended to define liveness probe for every worker container. This control finds all the pods where the Liveness probe is not configured.",
          "remediation": "Ensure Liveness probes are configured wherever possible.",
          "origin": "kubescape",
          "originId": "C-0056",
          "passed": false,
          "skipped": false,
          "skipReason": null
        },
        {
          "severity": "LOW",
          "title": "Naked pods",
          "description": "It is not recommended to create pods without parental Deployment, ReplicaSet, StatefulSet etc.Manual creation if pods may lead to a configuration drifts and other untracked changes in the system. Such pods won't be automatically rescheduled by Kubernetes in case of a crash or infrastructure failure. This control identifies every pod that does not have corresponding parental object.",
          "remediation": "Create necessary Deployment object for every pod making any pod a first class citizen in your IaC architecture.",
          "origin": "kubescape",
          "originId": "C-0073",
          "passed": false,
          "skipped": false,
          "skipReason": null
        },
        {
          "severity": "MEDIUM",
          "title": "Allow privilege escalation",
          "description": "Attackers may gain access to a container and uplift its privilege to enable excessive capabilities.",
          "remediation": "If your application does not need it, make sure the allowPrivilegeEscalation field of the securityContext is set to false.",
          "origin": "kubescape",
          "originId": "C-0016",
          "passed": false,
          "skipped": false,
          "skipReason": null
        },
        {
          "severity": "HIGH",
          "title": "Resources CPU limit and request",
          "description": "This control identifies all Pods for which the CPU limit is not set.",
          "remediation": "Set the CPU limit or use exception mechanism to avoid unnecessary notifications.",
          "origin": "kubescape",
          "originId": "C-0050",
          "passed": false,
          "skipped": false,
          "skipReason": null
        },
        {
          "severity": "LOW",
          "title": "Pods in default namespace",
          "description": "It is recommended to avoid running pods in cluster without explicit namespace assignment. This control identifies all the pods running in the default namespace.",
          "remediation": "Create necessary namespaces and move all the pods from default namespace there.",
          "origin": "kubescape",
          "originId": "C-0061",
          "passed": false,
          "skipped": false,
          "skipReason": null
        },
        {
          "severity": "MEDIUM",
          "title": "Linux hardening",
          "description": "Containers may be given more privileges than they actually need. This can increase the potential impact of a container compromise.",
          "remediation": "You can use AppArmor, Seccomp, SELinux and Linux Capabilities mechanisms to restrict containers abilities to utilize unwanted privileges.",
          "origin": "kubescape",
          "originId": "C-0055",
          "passed": false,
          "skipped": false,
          "skipReason": null
        },
        {
          "severity": "HIGH",
          "title": "Resource limits",
          "description": "CPU and memory resources should have a limit set for every container or a namespace to prevent resource exhaustion. This control identifies all the pods without resource limit definitions by checking their yaml definition file as well as their namespace LimitRange objects. It is also recommended to use ResourceQuota object to restrict overall namespace resources, but this is not verified by this control.",
          "remediation": "Define LimitRange and Resource Limits in the namespace or in the deployment/pod manifests.",
          "origin": "kubescape",
          "originId": "C-0009",
          "passed": false,
          "skipped": false,
          "skipReason": null
        },
        {
          "severity": "LOW",
          "title": "Immutable container filesystem",
          "description": "Mutable container filesystem can be abused to inject malicious code or data into containers. Use immutable (read-only) filesystem to limit potential attacks.",
          "remediation": "Set the filesystem of the container to read-only when possible (pod securityContext, readOnlyRootFilesystem: true). If containers application needs to write into the filesystem, it is recommended to mount secondary filesystems for specific directories where application require write access.",
          "origin": "kubescape",
          "originId": "C-0017",
          "passed": false,
          "skipped": false,
          "skipReason": null
        }
      ]
    }
  ],
  "skippedChecks": [
    {
      "severity": "HIGH",
      "title": "Forbidden Container Registries",
      "description": "In cases where the Kubernetes cluster is provided by a CSP (e.g., AKS in Azure, GKE in GCP, or EKS in AWS), compromised cloud credential can lead to the cluster takeover. Attackers may abuse cloud account credentials or IAM mechanism to the cluster’s management layer.",
      "remediation": "Limit the registries from which you pull container images from",
      "origin": "kubescape",
      "originId": "C-0001",
      "passed": false,
      "skipped": true,
      "skipReason": "Control configurations are empty"
    },
    {
      "severity": "MEDIUM",
      "title": "Images from allowed registry",
      "description": "This control is intended to ensure that all the used container images are taken from the authorized repositories. It allows user to list all the approved repositories and will fail all the images taken from any repository outside of this list.",
      "remediation": "You should enable all trusted repositories in the parameters of this control.",
      "origin": "kubescape",
      "originId": "C-0078",
      "passed": false,
      "skipped": true,
      "skipReason": "Control configurations are empty"
    }
  ]
}
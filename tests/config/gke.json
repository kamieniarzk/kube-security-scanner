{
  "scanId": "65b031db2501545a5c7c0523",
  "aggregated": true,
  "namespacedResources": {
    "default": [
      {
        "kind": "Service",
        "namespace": "default",
        "name": "kubernetes",
        "checks": [
          {
            "severity": "MEDIUM",
            "title": " The services selector does not match any pods",
            "description": "Makes sure that all Services targets a Pod",
            "remediation": "",
            "origin": "kube-score",
            "originId": "service-targets-pod",
            "passed": false,
            "skipped": false,
            "skipReason": null
          }
        ]
      }
    ],
    "gmp-public": [
      {
        "kind": "Role",
        "namespace": "gmp-public",
        "name": "operator",
        "checks": [
          {
            "severity": "MEDIUM",
            "title": "Manage namespace secrets",
            "description": "Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.",
            "remediation": "Manage namespace secrets are not allowed. Remove resource 'secrets' from role",
            "origin": "trivy",
            "originId": "KSV113",
            "passed": false,
            "skipped": false,
            "skipReason": null
          }
        ]
      },
      {
        "kind": "ServiceAccount",
        "namespace": "gmp-public",
        "name": "default",
        "checks": [
          {
            "severity": "MEDIUM",
            "title": "Automatic mapping of service account",
            "description": "Potential attacker may gain access to a pod and steal its service account token. Therefore, it is recommended to disable automatic mapping of the service account tokens in service account configuration and enable it only for pods that need to use them.",
            "remediation": "Disable automatic mounting of service account tokens to pods either at the service account level or at the individual pod level, by specifying the automountServiceAccountToken: false. Note that pod level takes precedence.",
            "origin": "kubescape",
            "originId": "C-0034",
            "passed": false,
            "skipped": false,
            "skipReason": null
          }
        ]
      }
    ],
    "kube-node-lease": [],
    "kube-system": [
      {
        "kind": "DaemonSet",
        "namespace": "kube-system",
        "name": "nvidia-gpu-device-plugin-large-cos",
        "checks": [
          {
            "severity": "MEDIUM",
            "title": "Can elevate its own privileges",
            "description": "A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.",
            "remediation": "Set 'set containers[].securityContext.allowPrivilegeEscalation' to 'false'.",
            "origin": "trivy",
            "originId": "KSV001",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Can elevate its own privileges",
            "description": "A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.",
            "remediation": "Set 'set containers[].securityContext.allowPrivilegeEscalation' to 'false'.",
            "origin": "trivy",
            "originId": "KSV001",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Can elevate its own privileges",
            "description": "A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.",
            "remediation": "Set 'set containers[].securityContext.allowPrivilegeEscalation' to 'false'.",
            "origin": "trivy",
            "originId": "KSV001",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "Access to host network",
            "description": "Sharing the host’s network namespace permits processes in the pod to communicate with processes bound to the host’s loopback adapter.",
            "remediation": "Do not set 'spec.template.spec.hostNetwork' to true.",
            "origin": "trivy",
            "originId": "KSV009",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "Access to host PID",
            "description": "Sharing the host’s PID namespace allows visibility on host processes, potentially leaking information such as environment variables and configuration.",
            "remediation": "Do not set 'spec.template.spec.hostPID' to true.",
            "origin": "trivy",
            "originId": "KSV010",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Runs as root user",
            "description": "Force the running image to run as a non-root user to ensure least privileges.",
            "remediation": "Set 'containers[].securityContext.runAsNonRoot' to true.",
            "origin": "trivy",
            "originId": "KSV012",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Runs as root user",
            "description": "Force the running image to run as a non-root user to ensure least privileges.",
            "remediation": "Set 'containers[].securityContext.runAsNonRoot' to true.",
            "origin": "trivy",
            "originId": "KSV012",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Runs as root user",
            "description": "Force the running image to run as a non-root user to ensure least privileges.",
            "remediation": "Set 'containers[].securityContext.runAsNonRoot' to true.",
            "origin": "trivy",
            "originId": "KSV012",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "Privileged",
            "description": "Privileged containers share namespaces with the host system and do not offer any security. They should be used exclusively for system containers that require high privileges.",
            "remediation": "Change 'containers[].securityContext.privileged' to 'false'.",
            "origin": "trivy",
            "originId": "KSV017",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "Privileged",
            "description": "Privileged containers share namespaces with the host system and do not offer any security. They should be used exclusively for system containers that require high privileges.",
            "remediation": "Change 'containers[].securityContext.privileged' to 'false'.",
            "origin": "trivy",
            "originId": "KSV017",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "Privileged",
            "description": "Privileged containers share namespaces with the host system and do not offer any security. They should be used exclusively for system containers that require high privileges.",
            "remediation": "Change 'containers[].securityContext.privileged' to 'false'.",
            "origin": "trivy",
            "originId": "KSV017",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "hostPath volumes mounted",
            "description": "According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.",
            "remediation": "Do not set 'spec.volumes[*].hostPath'.",
            "origin": "trivy",
            "originId": "KSV023",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "Access to host ports",
            "description": "According to pod security standard 'Host Ports', hostPorts should be disallowed, or at minimum restricted to a known list.",
            "remediation": "Do not set spec.containers[*].ports[*].hostPort and spec.initContainers[*].ports[*].hostPort.",
            "origin": "trivy",
            "originId": "KSV024",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "Access to host ports",
            "description": "According to pod security standard 'Host Ports', hostPorts should be disallowed, or at minimum restricted to a known list.",
            "remediation": "Do not set spec.containers[*].ports[*].hostPort and spec.initContainers[*].ports[*].hostPort.",
            "origin": "trivy",
            "originId": "KSV024",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "Access to host ports",
            "description": "According to pod security standard 'Host Ports', hostPorts should be disallowed, or at minimum restricted to a known list.",
            "remediation": "Do not set spec.containers[*].ports[*].hostPort and spec.initContainers[*].ports[*].hostPort.",
            "origin": "trivy",
            "originId": "KSV024",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Seccomp policies disabled",
            "description": "A program inside the container can bypass Seccomp protection policies.",
            "remediation": "Specify seccomp either by annotation or by seccomp profile type having allowed values as per pod security standards",
            "origin": "trivy",
            "originId": "KSV104",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Seccomp policies disabled",
            "description": "A program inside the container can bypass Seccomp protection policies.",
            "remediation": "Specify seccomp either by annotation or by seccomp profile type having allowed values as per pod security standards",
            "origin": "trivy",
            "originId": "KSV104",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Seccomp policies disabled",
            "description": "A program inside the container can bypass Seccomp protection policies.",
            "remediation": "Specify seccomp either by annotation or by seccomp profile type having allowed values as per pod security standards",
            "origin": "trivy",
            "originId": "KSV104",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "Kubernetes resource with disallowed volumes mounted",
            "description": "HostPath present many security risks and as a security practice it is better to avoid critical host paths mounts.",
            "remediation": "Do not Set 'spec.volumes[*].hostPath.path' to any of the disallowed volumes.",
            "origin": "trivy",
            "originId": "KSV121",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Container hostPort",
            "description": "Configuring hostPort requires a particular port number. If two objects specify the same HostPort, they could not be deployed to the same node. It may prevent the second object from starting, even if Kubernetes will try reschedule it on another node, provided there are available nodes with sufficient amount of resources. Also, if the number of replicas of such workload is higher than the number of nodes, the deployment will consistently fail.",
            "remediation": "Avoid usage of hostPort unless it is absolutely necessary, in which case define appropriate exception. Use NodePort / ClusterIP instead.",
            "origin": "kubescape",
            "originId": "C-0044",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "HostNetwork access",
            "description": "Potential attackers may gain access to a pod and inherit access to the entire host network. For example, in AWS case, they will have access to the entire VPC. This control identifies all the pods with host network access enabled.",
            "remediation": "Only connect pods to host network when it is necessary. If not, set the hostNetwork field of the pod spec to false, or completely remove it (false is the default). Whitelist only those pods that must have access to host network by design.",
            "origin": "kubescape",
            "originId": "C-0041",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Ingress and Egress blocked",
            "description": "Disable Ingress and Egress traffic on all pods wherever possible. It is recommended to define restrictive network policy on all new pods, and then enable sources/destinations that this pod must communicate with.",
            "remediation": "Define a network policy that restricts ingress and egress connections.",
            "origin": "kubescape",
            "originId": "C-0030",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "Resources CPU limit and request",
            "description": "This control identifies all Pods for which the CPU limit is not set.",
            "remediation": "Set the CPU limit or use exception mechanism to avoid unnecessary notifications.",
            "origin": "kubescape",
            "originId": "C-0050",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "Resource limits",
            "description": "CPU and memory resources should have a limit set for every container or a namespace to prevent resource exhaustion. This control identifies all the pods without resource limit definitions by checking their yaml definition file as well as their namespace LimitRange objects. It is also recommended to use ResourceQuota object to restrict overall namespace resources, but this is not verified by this control.",
            "remediation": "Define LimitRange and Resource Limits in the namespace or in the deployment/pod manifests.",
            "origin": "kubescape",
            "originId": "C-0009",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Automatic mapping of service account",
            "description": "Potential attacker may gain access to a pod and steal its service account token. Therefore, it is recommended to disable automatic mapping of the service account tokens in service account configuration and enable it only for pods that need to use them.",
            "remediation": "Disable automatic mounting of service account tokens to pods either at the service account level or at the individual pod level, by specifying the automountServiceAccountToken: false. Note that pod level takes precedence.",
            "origin": "kubescape",
            "originId": "C-0034",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "Writable hostPath mount",
            "description": "Mounting host directory to the container can be used by attackers to get access to the underlying host and gain persistence.",
            "remediation": "Refrain from using the hostPath mount or use the exception mechanism to remove unnecessary notifications.",
            "origin": "kubescape",
            "originId": "C-0045",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "HostPath mount",
            "description": "Mounting host directory to the container can be used by attackers to get access to the underlying host. This control identifies all the pods using hostPath mount.",
            "remediation": "Remove hostPath mounts unless they are absolutely necessary and use exception mechanism to remove notifications.",
            "origin": "kubescape",
            "originId": "C-0048",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Allow privilege escalation",
            "description": "Attackers may gain access to a container and uplift its privilege to enable excessive capabilities.",
            "remediation": "If your application does not need it, make sure the allowPrivilegeEscalation field of the securityContext is set to false.",
            "origin": "kubescape",
            "originId": "C-0016",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Configured liveness probe",
            "description": "Liveness probe is intended to ensure that workload remains healthy during its entire execution lifecycle, or otherwise restrat the container. It is highly recommended to define liveness probe for every worker container. This control finds all the pods where the Liveness probe is not configured.",
            "remediation": "Ensure Liveness probes are configured wherever possible.",
            "origin": "kubescape",
            "originId": "C-0056",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Non-root containers",
            "description": "Potential attackers may gain access to a container and leverage its existing privileges to conduct an attack. Therefore, it is not recommended to deploy containers with root privileges unless it is absolutely necessary. This control identifies all the pods running as root or can escalate to root.",
            "remediation": "If your application does not need root privileges, make sure to define the runAsUser or runAsGroup under the PodSecurityContext and use user ID 1000 or higher. Do not turn on allowPrivlegeEscalation bit and make sure runAsNonRoot is true.",
            "origin": "kubescape",
            "originId": "C-0013",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "Host PID/IPC privileges",
            "description": "Containers should be isolated from the host machine as much as possible. The hostPID and hostIPC fields in deployment yaml may allow cross-container influence and may expose the host itself to potentially malicious or destructive actions. This control identifies all pods using hostPID or hostIPC privileges.",
            "remediation": "Remove hostPID and hostIPC from the yaml file(s) privileges unless they are absolutely necessary.",
            "origin": "kubescape",
            "originId": "C-0038",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "Privileged container",
            "description": "Potential attackers may gain access to privileged containers and inherit access to the host resources. Therefore, it is not recommended to deploy privileged containers unless it is absolutely necessary. This control identifies all the privileged Pods.",
            "remediation": "Remove privileged capabilities by setting the securityContext.privileged to false. If you must deploy a Pod as privileged, add other restriction to it, such as network policy, Seccomp etc and still remove all unnecessary capabilities. Use the exception mechanism to remove unnecessary notifications.",
            "origin": "kubescape",
            "originId": "C-0057",
            "passed": false,
            "skipped": false,
            "skipReason": null
          }
        ]
      },
      {
        "kind": "Role",
        "namespace": "kube-system",
        "name": "system:controller:token-cleaner",
        "checks": [
          {
            "severity": "MEDIUM",
            "title": "Manage namespace secrets",
            "description": "Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.",
            "remediation": "Manage namespace secrets are not allowed. Remove resource 'secrets' from role",
            "origin": "trivy",
            "originId": "KSV113",
            "passed": false,
            "skipped": false,
            "skipReason": null
          }
        ]
      },
      {
        "kind": "ReplicaSet",
        "namespace": "kube-system",
        "name": "konnectivity-agent-5f9d4d57d8",
        "checks": [
          {
            "severity": "MEDIUM",
            "title": "konnectivity-agent Ephemeral Storage limit is not set",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage",
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "CRITICAL",
            "title": " The pod is not targeted by a service, skipping probe checks.",
            "description": "Makes sure that all Pods have safe probe configurations",
            "remediation": "",
            "origin": "kube-score",
            "originId": "pod-probes",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "CRITICAL",
            "title": " Pod Topology Spread Constraints",
            "description": "Pod Topology Spread Constraints",
            "remediation": "Pod Topology Spread Constraints",
            "origin": "kube-score",
            "originId": "pod-topology-spread-constraints",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "konnectivity-agent The container is running with a low user ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "konnectivity-agent The container running with a low group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "konnectivity-agent The pod has a container with a writable root filesystem",
            "description": "Makes sure that all pods have a security context with read only filesystem set",
            "remediation": "Set securityContext.readOnlyRootFilesystem to true",
            "origin": "kube-score",
            "originId": "container-security-context-readonlyrootfilesystem",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "konnectivity-agent CPU limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "konnectivity-agent ImagePullPolicy is not set to Always",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want.",
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": " The pod does not have a matching NetworkPolicy",
            "description": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "remediation": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect.",
            "origin": "kube-score",
            "originId": "pod-networkpolicy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "konnectivity-agent Ephemeral Storage limit is not set",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage",
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "CRITICAL",
            "title": " The pod is not targeted by a service, skipping probe checks.",
            "description": "Makes sure that all Pods have safe probe configurations",
            "remediation": "",
            "origin": "kube-score",
            "originId": "pod-probes",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "CRITICAL",
            "title": " Pod Topology Spread Constraints",
            "description": "Pod Topology Spread Constraints",
            "remediation": "Pod Topology Spread Constraints",
            "origin": "kube-score",
            "originId": "pod-topology-spread-constraints",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "konnectivity-agent The container is running with a low user ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "konnectivity-agent The container running with a low group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "konnectivity-agent The pod has a container with a writable root filesystem",
            "description": "Makes sure that all pods have a security context with read only filesystem set",
            "remediation": "Set securityContext.readOnlyRootFilesystem to true",
            "origin": "kube-score",
            "originId": "container-security-context-readonlyrootfilesystem",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "konnectivity-agent CPU limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "konnectivity-agent ImagePullPolicy is not set to Always",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want.",
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": " The pod does not have a matching NetworkPolicy",
            "description": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "remediation": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect.",
            "origin": "kube-score",
            "originId": "pod-networkpolicy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          }
        ]
      },
      {
        "kind": "DaemonSet",
        "namespace": "kube-system",
        "name": "pdcsi-node",
        "checks": [
          {
            "severity": "MEDIUM",
            "title": "Can elevate its own privileges",
            "description": "A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.",
            "remediation": "Set 'set containers[].securityContext.allowPrivilegeEscalation' to 'false'.",
            "origin": "trivy",
            "originId": "KSV001",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Can elevate its own privileges",
            "description": "A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.",
            "remediation": "Set 'set containers[].securityContext.allowPrivilegeEscalation' to 'false'.",
            "origin": "trivy",
            "originId": "KSV001",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "Access to host network",
            "description": "Sharing the host’s network namespace permits processes in the pod to communicate with processes bound to the host’s loopback adapter.",
            "remediation": "Do not set 'spec.template.spec.hostNetwork' to true.",
            "origin": "trivy",
            "originId": "KSV009",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Runs as root user",
            "description": "Force the running image to run as a non-root user to ensure least privileges.",
            "remediation": "Set 'containers[].securityContext.runAsNonRoot' to true.",
            "origin": "trivy",
            "originId": "KSV012",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Runs as root user",
            "description": "Force the running image to run as a non-root user to ensure least privileges.",
            "remediation": "Set 'containers[].securityContext.runAsNonRoot' to true.",
            "origin": "trivy",
            "originId": "KSV012",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "Privileged",
            "description": "Privileged containers share namespaces with the host system and do not offer any security. They should be used exclusively for system containers that require high privileges.",
            "remediation": "Change 'containers[].securityContext.privileged' to 'false'.",
            "origin": "trivy",
            "originId": "KSV017",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "hostPath volumes mounted",
            "description": "According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.",
            "remediation": "Do not set 'spec.volumes[*].hostPath'.",
            "origin": "trivy",
            "originId": "KSV023",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Seccomp policies disabled",
            "description": "A program inside the container can bypass Seccomp protection policies.",
            "remediation": "Specify seccomp either by annotation or by seccomp profile type having allowed values as per pod security standards",
            "origin": "trivy",
            "originId": "KSV104",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Seccomp policies disabled",
            "description": "A program inside the container can bypass Seccomp protection policies.",
            "remediation": "Specify seccomp either by annotation or by seccomp profile type having allowed values as per pod security standards",
            "origin": "trivy",
            "originId": "KSV104",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "Kubernetes resource with disallowed volumes mounted",
            "description": "HostPath present many security risks and as a security practice it is better to avoid critical host paths mounts.",
            "remediation": "Do not Set 'spec.volumes[*].hostPath.path' to any of the disallowed volumes.",
            "origin": "trivy",
            "originId": "KSV121",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "csi-driver-registrar The container is running with a low user ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "csi-driver-registrar The container running with a low group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "gce-pd-driver The container is running with a low user ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "gce-pd-driver The container running with a low group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "csi-driver-registrar The pod has a container with a writable root filesystem",
            "description": "Makes sure that all pods have a security context with read only filesystem set",
            "remediation": "Set securityContext.readOnlyRootFilesystem to true",
            "origin": "kube-score",
            "originId": "container-security-context-readonlyrootfilesystem",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": " The pod does not have a matching NetworkPolicy",
            "description": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "remediation": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect.",
            "origin": "kube-score",
            "originId": "pod-networkpolicy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "csi-driver-registrar CPU limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "gce-pd-driver CPU limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "csi-driver-registrar ImagePullPolicy is not set to Always",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want.",
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "gce-pd-driver ImagePullPolicy is not set to Always",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want.",
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "CRITICAL",
            "title": " The pod is not targeted by a service, skipping probe checks.",
            "description": "Makes sure that all Pods have safe probe configurations",
            "remediation": "",
            "origin": "kube-score",
            "originId": "pod-probes",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "gce-pd-driver The container is privileged",
            "description": "Makes sure that all pods have a unprivileged security context set",
            "remediation": "Set securityContext.privileged to false. Privileged containers can access all devices on the host, and grants almost the same access as non-containerized processes on the host.",
            "origin": "kube-score",
            "originId": "container-security-context-privileged",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "CRITICAL",
            "title": " Pod Topology Spread Constraints",
            "description": "Pod Topology Spread Constraints",
            "remediation": "No Pod Topology Spread Constraints set, kube-scheduler defaults assumed",
            "origin": "kube-score",
            "originId": "pod-topology-spread-constraints",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "csi-driver-registrar Ephemeral Storage limit is not set",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage",
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "gce-pd-driver Ephemeral Storage limit is not set",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage",
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "CRITICAL",
            "title": " Pod Topology Spread Constraints",
            "description": "Pod Topology Spread Constraints",
            "remediation": "No Pod Topology Spread Constraints set, kube-scheduler defaults assumed",
            "origin": "kube-score",
            "originId": "pod-topology-spread-constraints",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "csi-driver-registrar Ephemeral Storage limit is not set",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage",
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "gce-pd-driver Ephemeral Storage limit is not set",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage",
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "CRITICAL",
            "title": " The pod is not targeted by a service, skipping probe checks.",
            "description": "Makes sure that all Pods have safe probe configurations",
            "remediation": "",
            "origin": "kube-score",
            "originId": "pod-probes",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "gce-pd-driver The container is privileged",
            "description": "Makes sure that all pods have a unprivileged security context set",
            "remediation": "Set securityContext.privileged to false. Privileged containers can access all devices on the host, and grants almost the same access as non-containerized processes on the host.",
            "origin": "kube-score",
            "originId": "container-security-context-privileged",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "csi-driver-registrar The pod has a container with a writable root filesystem",
            "description": "Makes sure that all pods have a security context with read only filesystem set",
            "remediation": "Set securityContext.readOnlyRootFilesystem to true",
            "origin": "kube-score",
            "originId": "container-security-context-readonlyrootfilesystem",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "csi-driver-registrar The container is running with a low user ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "csi-driver-registrar The container running with a low group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "gce-pd-driver The container is running with a low user ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "gce-pd-driver The container running with a low group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "csi-driver-registrar CPU limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "gce-pd-driver CPU limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "csi-driver-registrar ImagePullPolicy is not set to Always",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want.",
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "gce-pd-driver ImagePullPolicy is not set to Always",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want.",
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": " The pod does not have a matching NetworkPolicy",
            "description": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "remediation": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect.",
            "origin": "kube-score",
            "originId": "pod-networkpolicy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          }
        ]
      },
      {
        "kind": "DaemonSet",
        "namespace": "kube-system",
        "name": "nvidia-gpu-device-plugin-small-ubuntu",
        "checks": [
          {
            "severity": "MEDIUM",
            "title": "Can elevate its own privileges",
            "description": "A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.",
            "remediation": "Set 'set containers[].securityContext.allowPrivilegeEscalation' to 'false'.",
            "origin": "trivy",
            "originId": "KSV001",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Can elevate its own privileges",
            "description": "A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.",
            "remediation": "Set 'set containers[].securityContext.allowPrivilegeEscalation' to 'false'.",
            "origin": "trivy",
            "originId": "KSV001",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Can elevate its own privileges",
            "description": "A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.",
            "remediation": "Set 'set containers[].securityContext.allowPrivilegeEscalation' to 'false'.",
            "origin": "trivy",
            "originId": "KSV001",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "Access to host network",
            "description": "Sharing the host’s network namespace permits processes in the pod to communicate with processes bound to the host’s loopback adapter.",
            "remediation": "Do not set 'spec.template.spec.hostNetwork' to true.",
            "origin": "trivy",
            "originId": "KSV009",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "Access to host PID",
            "description": "Sharing the host’s PID namespace allows visibility on host processes, potentially leaking information such as environment variables and configuration.",
            "remediation": "Do not set 'spec.template.spec.hostPID' to true.",
            "origin": "trivy",
            "originId": "KSV010",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Runs as root user",
            "description": "Force the running image to run as a non-root user to ensure least privileges.",
            "remediation": "Set 'containers[].securityContext.runAsNonRoot' to true.",
            "origin": "trivy",
            "originId": "KSV012",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Runs as root user",
            "description": "Force the running image to run as a non-root user to ensure least privileges.",
            "remediation": "Set 'containers[].securityContext.runAsNonRoot' to true.",
            "origin": "trivy",
            "originId": "KSV012",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Runs as root user",
            "description": "Force the running image to run as a non-root user to ensure least privileges.",
            "remediation": "Set 'containers[].securityContext.runAsNonRoot' to true.",
            "origin": "trivy",
            "originId": "KSV012",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "Privileged",
            "description": "Privileged containers share namespaces with the host system and do not offer any security. They should be used exclusively for system containers that require high privileges.",
            "remediation": "Change 'containers[].securityContext.privileged' to 'false'.",
            "origin": "trivy",
            "originId": "KSV017",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "Privileged",
            "description": "Privileged containers share namespaces with the host system and do not offer any security. They should be used exclusively for system containers that require high privileges.",
            "remediation": "Change 'containers[].securityContext.privileged' to 'false'.",
            "origin": "trivy",
            "originId": "KSV017",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "Privileged",
            "description": "Privileged containers share namespaces with the host system and do not offer any security. They should be used exclusively for system containers that require high privileges.",
            "remediation": "Change 'containers[].securityContext.privileged' to 'false'.",
            "origin": "trivy",
            "originId": "KSV017",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "hostPath volumes mounted",
            "description": "According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.",
            "remediation": "Do not set 'spec.volumes[*].hostPath'.",
            "origin": "trivy",
            "originId": "KSV023",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "Access to host ports",
            "description": "According to pod security standard 'Host Ports', hostPorts should be disallowed, or at minimum restricted to a known list.",
            "remediation": "Do not set spec.containers[*].ports[*].hostPort and spec.initContainers[*].ports[*].hostPort.",
            "origin": "trivy",
            "originId": "KSV024",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "Access to host ports",
            "description": "According to pod security standard 'Host Ports', hostPorts should be disallowed, or at minimum restricted to a known list.",
            "remediation": "Do not set spec.containers[*].ports[*].hostPort and spec.initContainers[*].ports[*].hostPort.",
            "origin": "trivy",
            "originId": "KSV024",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "Access to host ports",
            "description": "According to pod security standard 'Host Ports', hostPorts should be disallowed, or at minimum restricted to a known list.",
            "remediation": "Do not set spec.containers[*].ports[*].hostPort and spec.initContainers[*].ports[*].hostPort.",
            "origin": "trivy",
            "originId": "KSV024",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Seccomp policies disabled",
            "description": "A program inside the container can bypass Seccomp protection policies.",
            "remediation": "Specify seccomp either by annotation or by seccomp profile type having allowed values as per pod security standards",
            "origin": "trivy",
            "originId": "KSV104",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Seccomp policies disabled",
            "description": "A program inside the container can bypass Seccomp protection policies.",
            "remediation": "Specify seccomp either by annotation or by seccomp profile type having allowed values as per pod security standards",
            "origin": "trivy",
            "originId": "KSV104",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Seccomp policies disabled",
            "description": "A program inside the container can bypass Seccomp protection policies.",
            "remediation": "Specify seccomp either by annotation or by seccomp profile type having allowed values as per pod security standards",
            "origin": "trivy",
            "originId": "KSV104",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "Kubernetes resource with disallowed volumes mounted",
            "description": "HostPath present many security risks and as a security practice it is better to avoid critical host paths mounts.",
            "remediation": "Do not Set 'spec.volumes[*].hostPath.path' to any of the disallowed volumes.",
            "origin": "trivy",
            "originId": "KSV121",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Container hostPort",
            "description": "Configuring hostPort requires a particular port number. If two objects specify the same HostPort, they could not be deployed to the same node. It may prevent the second object from starting, even if Kubernetes will try reschedule it on another node, provided there are available nodes with sufficient amount of resources. Also, if the number of replicas of such workload is higher than the number of nodes, the deployment will consistently fail.",
            "remediation": "Avoid usage of hostPort unless it is absolutely necessary, in which case define appropriate exception. Use NodePort / ClusterIP instead.",
            "origin": "kubescape",
            "originId": "C-0044",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "HostNetwork access",
            "description": "Potential attackers may gain access to a pod and inherit access to the entire host network. For example, in AWS case, they will have access to the entire VPC. This control identifies all the pods with host network access enabled.",
            "remediation": "Only connect pods to host network when it is necessary. If not, set the hostNetwork field of the pod spec to false, or completely remove it (false is the default). Whitelist only those pods that must have access to host network by design.",
            "origin": "kubescape",
            "originId": "C-0041",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Ingress and Egress blocked",
            "description": "Disable Ingress and Egress traffic on all pods wherever possible. It is recommended to define restrictive network policy on all new pods, and then enable sources/destinations that this pod must communicate with.",
            "remediation": "Define a network policy that restricts ingress and egress connections.",
            "origin": "kubescape",
            "originId": "C-0030",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "Resources CPU limit and request",
            "description": "This control identifies all Pods for which the CPU limit is not set.",
            "remediation": "Set the CPU limit or use exception mechanism to avoid unnecessary notifications.",
            "origin": "kubescape",
            "originId": "C-0050",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "Resource limits",
            "description": "CPU and memory resources should have a limit set for every container or a namespace to prevent resource exhaustion. This control identifies all the pods without resource limit definitions by checking their yaml definition file as well as their namespace LimitRange objects. It is also recommended to use ResourceQuota object to restrict overall namespace resources, but this is not verified by this control.",
            "remediation": "Define LimitRange and Resource Limits in the namespace or in the deployment/pod manifests.",
            "origin": "kubescape",
            "originId": "C-0009",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Automatic mapping of service account",
            "description": "Potential attacker may gain access to a pod and steal its service account token. Therefore, it is recommended to disable automatic mapping of the service account tokens in service account configuration and enable it only for pods that need to use them.",
            "remediation": "Disable automatic mounting of service account tokens to pods either at the service account level or at the individual pod level, by specifying the automountServiceAccountToken: false. Note that pod level takes precedence.",
            "origin": "kubescape",
            "originId": "C-0034",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "Writable hostPath mount",
            "description": "Mounting host directory to the container can be used by attackers to get access to the underlying host and gain persistence.",
            "remediation": "Refrain from using the hostPath mount or use the exception mechanism to remove unnecessary notifications.",
            "origin": "kubescape",
            "originId": "C-0045",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "HostPath mount",
            "description": "Mounting host directory to the container can be used by attackers to get access to the underlying host. This control identifies all the pods using hostPath mount.",
            "remediation": "Remove hostPath mounts unless they are absolutely necessary and use exception mechanism to remove notifications.",
            "origin": "kubescape",
            "originId": "C-0048",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Allow privilege escalation",
            "description": "Attackers may gain access to a container and uplift its privilege to enable excessive capabilities.",
            "remediation": "If your application does not need it, make sure the allowPrivilegeEscalation field of the securityContext is set to false.",
            "origin": "kubescape",
            "originId": "C-0016",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Configured liveness probe",
            "description": "Liveness probe is intended to ensure that workload remains healthy during its entire execution lifecycle, or otherwise restrat the container. It is highly recommended to define liveness probe for every worker container. This control finds all the pods where the Liveness probe is not configured.",
            "remediation": "Ensure Liveness probes are configured wherever possible.",
            "origin": "kubescape",
            "originId": "C-0056",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Non-root containers",
            "description": "Potential attackers may gain access to a container and leverage its existing privileges to conduct an attack. Therefore, it is not recommended to deploy containers with root privileges unless it is absolutely necessary. This control identifies all the pods running as root or can escalate to root.",
            "remediation": "If your application does not need root privileges, make sure to define the runAsUser or runAsGroup under the PodSecurityContext and use user ID 1000 or higher. Do not turn on allowPrivlegeEscalation bit and make sure runAsNonRoot is true.",
            "origin": "kubescape",
            "originId": "C-0013",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "Host PID/IPC privileges",
            "description": "Containers should be isolated from the host machine as much as possible. The hostPID and hostIPC fields in deployment yaml may allow cross-container influence and may expose the host itself to potentially malicious or destructive actions. This control identifies all pods using hostPID or hostIPC privileges.",
            "remediation": "Remove hostPID and hostIPC from the yaml file(s) privileges unless they are absolutely necessary.",
            "origin": "kubescape",
            "originId": "C-0038",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "Privileged container",
            "description": "Potential attackers may gain access to privileged containers and inherit access to the host resources. Therefore, it is not recommended to deploy privileged containers unless it is absolutely necessary. This control identifies all the privileged Pods.",
            "remediation": "Remove privileged capabilities by setting the securityContext.privileged to false. If you must deploy a Pod as privileged, add other restriction to it, such as network policy, Seccomp etc and still remove all unnecessary capabilities. Use the exception mechanism to remove unnecessary notifications.",
            "origin": "kubescape",
            "originId": "C-0057",
            "passed": false,
            "skipped": false,
            "skipReason": null
          }
        ]
      },
      {
        "kind": "Deployment",
        "namespace": "kube-system",
        "name": "antrea-controller",
        "checks": [
          {
            "severity": "MEDIUM",
            "title": "Can elevate its own privileges",
            "description": "A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.",
            "remediation": "Set 'set containers[].securityContext.allowPrivilegeEscalation' to 'false'.",
            "origin": "trivy",
            "originId": "KSV001",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Can elevate its own privileges",
            "description": "A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.",
            "remediation": "Set 'set containers[].securityContext.allowPrivilegeEscalation' to 'false'.",
            "origin": "trivy",
            "originId": "KSV001",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Runs as root user",
            "description": "Force the running image to run as a non-root user to ensure least privileges.",
            "remediation": "Set 'containers[].securityContext.runAsNonRoot' to true.",
            "origin": "trivy",
            "originId": "KSV012",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Runs as root user",
            "description": "Force the running image to run as a non-root user to ensure least privileges.",
            "remediation": "Set 'containers[].securityContext.runAsNonRoot' to true.",
            "origin": "trivy",
            "originId": "KSV012",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Seccomp policies disabled",
            "description": "A program inside the container can bypass Seccomp protection policies.",
            "remediation": "Specify seccomp either by annotation or by seccomp profile type having allowed values as per pod security standards",
            "origin": "trivy",
            "originId": "KSV104",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Seccomp policies disabled",
            "description": "A program inside the container can bypass Seccomp protection policies.",
            "remediation": "Specify seccomp either by annotation or by seccomp profile type having allowed values as per pod security standards",
            "origin": "trivy",
            "originId": "KSV104",
            "passed": false,
            "skipped": false,
            "skipReason": null
          }
        ]
      },
      {
        "kind": "DaemonSet",
        "namespace": "kube-system",
        "name": "kube-proxy",
        "checks": [
          {
            "severity": "MEDIUM",
            "title": "Can elevate its own privileges",
            "description": "A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.",
            "remediation": "Set 'set containers[].securityContext.allowPrivilegeEscalation' to 'false'.",
            "origin": "trivy",
            "originId": "KSV001",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "Access to host network",
            "description": "Sharing the host’s network namespace permits processes in the pod to communicate with processes bound to the host’s loopback adapter.",
            "remediation": "Do not set 'spec.template.spec.hostNetwork' to true.",
            "origin": "trivy",
            "originId": "KSV009",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Runs as root user",
            "description": "Force the running image to run as a non-root user to ensure least privileges.",
            "remediation": "Set 'containers[].securityContext.runAsNonRoot' to true.",
            "origin": "trivy",
            "originId": "KSV012",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "Privileged",
            "description": "Privileged containers share namespaces with the host system and do not offer any security. They should be used exclusively for system containers that require high privileges.",
            "remediation": "Change 'containers[].securityContext.privileged' to 'false'.",
            "origin": "trivy",
            "originId": "KSV017",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "hostPath volumes mounted",
            "description": "According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.",
            "remediation": "Do not set 'spec.volumes[*].hostPath'.",
            "origin": "trivy",
            "originId": "KSV023",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Seccomp policies disabled",
            "description": "A program inside the container can bypass Seccomp protection policies.",
            "remediation": "Specify seccomp either by annotation or by seccomp profile type having allowed values as per pod security standards",
            "origin": "trivy",
            "originId": "KSV104",
            "passed": false,
            "skipped": false,
            "skipReason": null
          }
        ]
      },
      {
        "kind": "DaemonSet",
        "namespace": "kube-system",
        "name": "pdcsi-node-windows",
        "checks": [
          {
            "severity": "MEDIUM",
            "title": "Can elevate its own privileges",
            "description": "A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.",
            "remediation": "Set 'set containers[].securityContext.allowPrivilegeEscalation' to 'false'.",
            "origin": "trivy",
            "originId": "KSV001",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Can elevate its own privileges",
            "description": "A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.",
            "remediation": "Set 'set containers[].securityContext.allowPrivilegeEscalation' to 'false'.",
            "origin": "trivy",
            "originId": "KSV001",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Runs as root user",
            "description": "Force the running image to run as a non-root user to ensure least privileges.",
            "remediation": "Set 'containers[].securityContext.runAsNonRoot' to true.",
            "origin": "trivy",
            "originId": "KSV012",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Runs as root user",
            "description": "Force the running image to run as a non-root user to ensure least privileges.",
            "remediation": "Set 'containers[].securityContext.runAsNonRoot' to true.",
            "origin": "trivy",
            "originId": "KSV012",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "hostPath volumes mounted",
            "description": "According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.",
            "remediation": "Do not set 'spec.volumes[*].hostPath'.",
            "origin": "trivy",
            "originId": "KSV023",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Seccomp policies disabled",
            "description": "A program inside the container can bypass Seccomp protection policies.",
            "remediation": "Specify seccomp either by annotation or by seccomp profile type having allowed values as per pod security standards",
            "origin": "trivy",
            "originId": "KSV104",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Seccomp policies disabled",
            "description": "A program inside the container can bypass Seccomp protection policies.",
            "remediation": "Specify seccomp either by annotation or by seccomp profile type having allowed values as per pod security standards",
            "origin": "trivy",
            "originId": "KSV104",
            "passed": false,
            "skipped": false,
            "skipReason": null
          }
        ]
      },
      {
        "kind": "DaemonSet",
        "namespace": "kube-system",
        "name": "nvidia-gpu-device-plugin-medium-cos",
        "checks": [
          {
            "severity": "MEDIUM",
            "title": "Can elevate its own privileges",
            "description": "A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.",
            "remediation": "Set 'set containers[].securityContext.allowPrivilegeEscalation' to 'false'.",
            "origin": "trivy",
            "originId": "KSV001",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Can elevate its own privileges",
            "description": "A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.",
            "remediation": "Set 'set containers[].securityContext.allowPrivilegeEscalation' to 'false'.",
            "origin": "trivy",
            "originId": "KSV001",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Can elevate its own privileges",
            "description": "A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.",
            "remediation": "Set 'set containers[].securityContext.allowPrivilegeEscalation' to 'false'.",
            "origin": "trivy",
            "originId": "KSV001",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "Access to host network",
            "description": "Sharing the host’s network namespace permits processes in the pod to communicate with processes bound to the host’s loopback adapter.",
            "remediation": "Do not set 'spec.template.spec.hostNetwork' to true.",
            "origin": "trivy",
            "originId": "KSV009",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "Access to host PID",
            "description": "Sharing the host’s PID namespace allows visibility on host processes, potentially leaking information such as environment variables and configuration.",
            "remediation": "Do not set 'spec.template.spec.hostPID' to true.",
            "origin": "trivy",
            "originId": "KSV010",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Runs as root user",
            "description": "Force the running image to run as a non-root user to ensure least privileges.",
            "remediation": "Set 'containers[].securityContext.runAsNonRoot' to true.",
            "origin": "trivy",
            "originId": "KSV012",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Runs as root user",
            "description": "Force the running image to run as a non-root user to ensure least privileges.",
            "remediation": "Set 'containers[].securityContext.runAsNonRoot' to true.",
            "origin": "trivy",
            "originId": "KSV012",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Runs as root user",
            "description": "Force the running image to run as a non-root user to ensure least privileges.",
            "remediation": "Set 'containers[].securityContext.runAsNonRoot' to true.",
            "origin": "trivy",
            "originId": "KSV012",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "Privileged",
            "description": "Privileged containers share namespaces with the host system and do not offer any security. They should be used exclusively for system containers that require high privileges.",
            "remediation": "Change 'containers[].securityContext.privileged' to 'false'.",
            "origin": "trivy",
            "originId": "KSV017",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "Privileged",
            "description": "Privileged containers share namespaces with the host system and do not offer any security. They should be used exclusively for system containers that require high privileges.",
            "remediation": "Change 'containers[].securityContext.privileged' to 'false'.",
            "origin": "trivy",
            "originId": "KSV017",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "Privileged",
            "description": "Privileged containers share namespaces with the host system and do not offer any security. They should be used exclusively for system containers that require high privileges.",
            "remediation": "Change 'containers[].securityContext.privileged' to 'false'.",
            "origin": "trivy",
            "originId": "KSV017",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "hostPath volumes mounted",
            "description": "According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.",
            "remediation": "Do not set 'spec.volumes[*].hostPath'.",
            "origin": "trivy",
            "originId": "KSV023",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "Access to host ports",
            "description": "According to pod security standard 'Host Ports', hostPorts should be disallowed, or at minimum restricted to a known list.",
            "remediation": "Do not set spec.containers[*].ports[*].hostPort and spec.initContainers[*].ports[*].hostPort.",
            "origin": "trivy",
            "originId": "KSV024",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "Access to host ports",
            "description": "According to pod security standard 'Host Ports', hostPorts should be disallowed, or at minimum restricted to a known list.",
            "remediation": "Do not set spec.containers[*].ports[*].hostPort and spec.initContainers[*].ports[*].hostPort.",
            "origin": "trivy",
            "originId": "KSV024",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "Access to host ports",
            "description": "According to pod security standard 'Host Ports', hostPorts should be disallowed, or at minimum restricted to a known list.",
            "remediation": "Do not set spec.containers[*].ports[*].hostPort and spec.initContainers[*].ports[*].hostPort.",
            "origin": "trivy",
            "originId": "KSV024",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Seccomp policies disabled",
            "description": "A program inside the container can bypass Seccomp protection policies.",
            "remediation": "Specify seccomp either by annotation or by seccomp profile type having allowed values as per pod security standards",
            "origin": "trivy",
            "originId": "KSV104",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Seccomp policies disabled",
            "description": "A program inside the container can bypass Seccomp protection policies.",
            "remediation": "Specify seccomp either by annotation or by seccomp profile type having allowed values as per pod security standards",
            "origin": "trivy",
            "originId": "KSV104",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Seccomp policies disabled",
            "description": "A program inside the container can bypass Seccomp protection policies.",
            "remediation": "Specify seccomp either by annotation or by seccomp profile type having allowed values as per pod security standards",
            "origin": "trivy",
            "originId": "KSV104",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "Kubernetes resource with disallowed volumes mounted",
            "description": "HostPath present many security risks and as a security practice it is better to avoid critical host paths mounts.",
            "remediation": "Do not Set 'spec.volumes[*].hostPath.path' to any of the disallowed volumes.",
            "origin": "trivy",
            "originId": "KSV121",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Container hostPort",
            "description": "Configuring hostPort requires a particular port number. If two objects specify the same HostPort, they could not be deployed to the same node. It may prevent the second object from starting, even if Kubernetes will try reschedule it on another node, provided there are available nodes with sufficient amount of resources. Also, if the number of replicas of such workload is higher than the number of nodes, the deployment will consistently fail.",
            "remediation": "Avoid usage of hostPort unless it is absolutely necessary, in which case define appropriate exception. Use NodePort / ClusterIP instead.",
            "origin": "kubescape",
            "originId": "C-0044",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "HostNetwork access",
            "description": "Potential attackers may gain access to a pod and inherit access to the entire host network. For example, in AWS case, they will have access to the entire VPC. This control identifies all the pods with host network access enabled.",
            "remediation": "Only connect pods to host network when it is necessary. If not, set the hostNetwork field of the pod spec to false, or completely remove it (false is the default). Whitelist only those pods that must have access to host network by design.",
            "origin": "kubescape",
            "originId": "C-0041",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Ingress and Egress blocked",
            "description": "Disable Ingress and Egress traffic on all pods wherever possible. It is recommended to define restrictive network policy on all new pods, and then enable sources/destinations that this pod must communicate with.",
            "remediation": "Define a network policy that restricts ingress and egress connections.",
            "origin": "kubescape",
            "originId": "C-0030",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "Resources CPU limit and request",
            "description": "This control identifies all Pods for which the CPU limit is not set.",
            "remediation": "Set the CPU limit or use exception mechanism to avoid unnecessary notifications.",
            "origin": "kubescape",
            "originId": "C-0050",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "Resource limits",
            "description": "CPU and memory resources should have a limit set for every container or a namespace to prevent resource exhaustion. This control identifies all the pods without resource limit definitions by checking their yaml definition file as well as their namespace LimitRange objects. It is also recommended to use ResourceQuota object to restrict overall namespace resources, but this is not verified by this control.",
            "remediation": "Define LimitRange and Resource Limits in the namespace or in the deployment/pod manifests.",
            "origin": "kubescape",
            "originId": "C-0009",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Automatic mapping of service account",
            "description": "Potential attacker may gain access to a pod and steal its service account token. Therefore, it is recommended to disable automatic mapping of the service account tokens in service account configuration and enable it only for pods that need to use them.",
            "remediation": "Disable automatic mounting of service account tokens to pods either at the service account level or at the individual pod level, by specifying the automountServiceAccountToken: false. Note that pod level takes precedence.",
            "origin": "kubescape",
            "originId": "C-0034",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "Writable hostPath mount",
            "description": "Mounting host directory to the container can be used by attackers to get access to the underlying host and gain persistence.",
            "remediation": "Refrain from using the hostPath mount or use the exception mechanism to remove unnecessary notifications.",
            "origin": "kubescape",
            "originId": "C-0045",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "HostPath mount",
            "description": "Mounting host directory to the container can be used by attackers to get access to the underlying host. This control identifies all the pods using hostPath mount.",
            "remediation": "Remove hostPath mounts unless they are absolutely necessary and use exception mechanism to remove notifications.",
            "origin": "kubescape",
            "originId": "C-0048",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Allow privilege escalation",
            "description": "Attackers may gain access to a container and uplift its privilege to enable excessive capabilities.",
            "remediation": "If your application does not need it, make sure the allowPrivilegeEscalation field of the securityContext is set to false.",
            "origin": "kubescape",
            "originId": "C-0016",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Configured liveness probe",
            "description": "Liveness probe is intended to ensure that workload remains healthy during its entire execution lifecycle, or otherwise restrat the container. It is highly recommended to define liveness probe for every worker container. This control finds all the pods where the Liveness probe is not configured.",
            "remediation": "Ensure Liveness probes are configured wherever possible.",
            "origin": "kubescape",
            "originId": "C-0056",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Non-root containers",
            "description": "Potential attackers may gain access to a container and leverage its existing privileges to conduct an attack. Therefore, it is not recommended to deploy containers with root privileges unless it is absolutely necessary. This control identifies all the pods running as root or can escalate to root.",
            "remediation": "If your application does not need root privileges, make sure to define the runAsUser or runAsGroup under the PodSecurityContext and use user ID 1000 or higher. Do not turn on allowPrivlegeEscalation bit and make sure runAsNonRoot is true.",
            "origin": "kubescape",
            "originId": "C-0013",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "Host PID/IPC privileges",
            "description": "Containers should be isolated from the host machine as much as possible. The hostPID and hostIPC fields in deployment yaml may allow cross-container influence and may expose the host itself to potentially malicious or destructive actions. This control identifies all pods using hostPID or hostIPC privileges.",
            "remediation": "Remove hostPID and hostIPC from the yaml file(s) privileges unless they are absolutely necessary.",
            "origin": "kubescape",
            "originId": "C-0038",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "Privileged container",
            "description": "Potential attackers may gain access to privileged containers and inherit access to the host resources. Therefore, it is not recommended to deploy privileged containers unless it is absolutely necessary. This control identifies all the privileged Pods.",
            "remediation": "Remove privileged capabilities by setting the securityContext.privileged to false. If you must deploy a Pod as privileged, add other restriction to it, such as network policy, Seccomp etc and still remove all unnecessary capabilities. Use the exception mechanism to remove unnecessary notifications.",
            "origin": "kubescape",
            "originId": "C-0057",
            "passed": false,
            "skipped": false,
            "skipReason": null
          }
        ]
      },
      {
        "kind": "Role",
        "namespace": "kube-system",
        "name": "cloud-provider",
        "checks": [
          {
            "severity": "MEDIUM",
            "title": "Manage configmaps",
            "description": "Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.",
            "remediation": "Remove write permission verbs for resource 'configmaps'",
            "origin": "trivy",
            "originId": "KSV049",
            "passed": false,
            "skipped": false,
            "skipReason": null
          }
        ]
      },
      {
        "kind": "CronJob",
        "namespace": "kube-system",
        "name": "image-package-extractor-cleanup",
        "checks": [
          {
            "severity": "MEDIUM",
            "title": "Seccomp policies disabled",
            "description": "A program inside the container can bypass Seccomp protection policies.",
            "remediation": "Specify seccomp either by annotation or by seccomp profile type having allowed values as per pod security standards",
            "origin": "trivy",
            "originId": "KSV104",
            "passed": false,
            "skipped": false,
            "skipReason": null
          }
        ]
      },
      {
        "kind": "DaemonSet",
        "namespace": "kube-system",
        "name": "gke-metrics-agent-scaling-500",
        "checks": [
          {
            "severity": "HIGH",
            "title": "Access to host network",
            "description": "Sharing the host’s network namespace permits processes in the pod to communicate with processes bound to the host’s loopback adapter.",
            "remediation": "Do not set 'spec.template.spec.hostNetwork' to true.",
            "origin": "trivy",
            "originId": "KSV009",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Seccomp policies disabled",
            "description": "A program inside the container can bypass Seccomp protection policies.",
            "remediation": "Specify seccomp either by annotation or by seccomp profile type having allowed values as per pod security standards",
            "origin": "trivy",
            "originId": "KSV104",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Seccomp policies disabled",
            "description": "A program inside the container can bypass Seccomp protection policies.",
            "remediation": "Specify seccomp either by annotation or by seccomp profile type having allowed values as per pod security standards",
            "origin": "trivy",
            "originId": "KSV104",
            "passed": false,
            "skipped": false,
            "skipReason": null
          }
        ]
      },
      {
        "kind": "DaemonSet",
        "namespace": "kube-system",
        "name": "gke-metrics-agent-scaling-100",
        "checks": [
          {
            "severity": "HIGH",
            "title": "Access to host network",
            "description": "Sharing the host’s network namespace permits processes in the pod to communicate with processes bound to the host’s loopback adapter.",
            "remediation": "Do not set 'spec.template.spec.hostNetwork' to true.",
            "origin": "trivy",
            "originId": "KSV009",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Seccomp policies disabled",
            "description": "A program inside the container can bypass Seccomp protection policies.",
            "remediation": "Specify seccomp either by annotation or by seccomp profile type having allowed values as per pod security standards",
            "origin": "trivy",
            "originId": "KSV104",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Seccomp policies disabled",
            "description": "A program inside the container can bypass Seccomp protection policies.",
            "remediation": "Specify seccomp either by annotation or by seccomp profile type having allowed values as per pod security standards",
            "origin": "trivy",
            "originId": "KSV104",
            "passed": false,
            "skipped": false,
            "skipReason": null
          }
        ]
      },
      {
        "kind": "ReplicaSet",
        "namespace": "kube-system",
        "name": "l7-default-backend-594666b966",
        "checks": [
          {
            "severity": "MEDIUM",
            "title": "default-http-backend The pod has a container with a writable root filesystem",
            "description": "Makes sure that all pods have a security context with read only filesystem set",
            "remediation": "Set securityContext.readOnlyRootFilesystem to true",
            "origin": "kube-score",
            "originId": "container-security-context-readonlyrootfilesystem",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "default-http-backend The container is running with a low user ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "default-http-backend The container running with a low group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "default-http-backend CPU limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "default-http-backend Memory limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.memory",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "default-http-backend ImagePullPolicy is not set to Always",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want.",
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": " The pod does not have a matching NetworkPolicy",
            "description": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "remediation": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect.",
            "origin": "kube-score",
            "originId": "pod-networkpolicy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "CRITICAL",
            "title": " Pod Topology Spread Constraints",
            "description": "Pod Topology Spread Constraints",
            "remediation": "No Pod Topology Spread Constraints set, kube-scheduler defaults assumed",
            "origin": "kube-score",
            "originId": "pod-topology-spread-constraints",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "default-http-backend Ephemeral Storage limit is not set",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage",
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": " Container is missing a readinessProbe",
            "description": "Makes sure that all Pods have safe probe configurations",
            "remediation": "A readinessProbe should be used to indicate when the service is ready to receive traffic. Without it, the Pod is risking to receive traffic before it has booted. It's also used during rollouts, and can prevent downtime if a new version of the application is failing.",
            "origin": "kube-score",
            "originId": "pod-probes",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "default-http-backend CPU limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "default-http-backend Memory limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.memory",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "default-http-backend ImagePullPolicy is not set to Always",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want.",
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": " The pod does not have a matching NetworkPolicy",
            "description": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "remediation": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect.",
            "origin": "kube-score",
            "originId": "pod-networkpolicy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "default-http-backend Ephemeral Storage limit is not set",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage",
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": " Container is missing a readinessProbe",
            "description": "Makes sure that all Pods have safe probe configurations",
            "remediation": "A readinessProbe should be used to indicate when the service is ready to receive traffic. Without it, the Pod is risking to receive traffic before it has booted. It's also used during rollouts, and can prevent downtime if a new version of the application is failing.",
            "origin": "kube-score",
            "originId": "pod-probes",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "CRITICAL",
            "title": " Pod Topology Spread Constraints",
            "description": "Pod Topology Spread Constraints",
            "remediation": "No Pod Topology Spread Constraints set, kube-scheduler defaults assumed",
            "origin": "kube-score",
            "originId": "pod-topology-spread-constraints",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "default-http-backend The container is running with a low user ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "default-http-backend The container running with a low group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "default-http-backend The pod has a container with a writable root filesystem",
            "description": "Makes sure that all pods have a security context with read only filesystem set",
            "remediation": "Set securityContext.readOnlyRootFilesystem to true",
            "origin": "kube-score",
            "originId": "container-security-context-readonlyrootfilesystem",
            "passed": false,
            "skipped": false,
            "skipReason": null
          }
        ]
      },
      {
        "kind": "ServiceAccount",
        "namespace": "kube-system",
        "name": "clouddns",
        "checks": [
          {
            "severity": "MEDIUM",
            "title": "Automatic mapping of service account",
            "description": "Potential attacker may gain access to a pod and steal its service account token. Therefore, it is recommended to disable automatic mapping of the service account tokens in service account configuration and enable it only for pods that need to use them.",
            "remediation": "Disable automatic mounting of service account tokens to pods either at the service account level or at the individual pod level, by specifying the automountServiceAccountToken: false. Note that pod level takes precedence.",
            "origin": "kubescape",
            "originId": "C-0034",
            "passed": false,
            "skipped": false,
            "skipReason": null
          }
        ]
      },
      {
        "kind": "Deployment",
        "namespace": "kube-system",
        "name": "konnectivity-agent-autoscaler",
        "checks": [
          {
            "severity": "MEDIUM",
            "title": "Runs as root user",
            "description": "Force the running image to run as a non-root user to ensure least privileges.",
            "remediation": "Set 'containers[].securityContext.runAsNonRoot' to true.",
            "origin": "trivy",
            "originId": "KSV012",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Seccomp policies disabled",
            "description": "A program inside the container can bypass Seccomp protection policies.",
            "remediation": "Specify seccomp either by annotation or by seccomp profile type having allowed values as per pod security standards",
            "origin": "trivy",
            "originId": "KSV104",
            "passed": false,
            "skipped": false,
            "skipReason": null
          }
        ]
      },
      {
        "kind": "Role",
        "namespace": "kube-system",
        "name": "gce:cloud-provider",
        "checks": [
          {
            "severity": "MEDIUM",
            "title": "Manage configmaps",
            "description": "Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.",
            "remediation": "Remove write permission verbs for resource 'configmaps'",
            "origin": "trivy",
            "originId": "KSV049",
            "passed": false,
            "skipped": false,
            "skipReason": null
          }
        ]
      },
      {
        "kind": "Service",
        "namespace": "kube-system",
        "name": "antrea",
        "checks": [
          {
            "severity": "MEDIUM",
            "title": " The services selector does not match any pods",
            "description": "Makes sure that all Services targets a Pod",
            "remediation": "",
            "origin": "kube-score",
            "originId": "service-targets-pod",
            "passed": false,
            "skipped": false,
            "skipReason": null
          }
        ]
      },
      {
        "kind": "DaemonSet",
        "namespace": "kube-system",
        "name": "gke-metrics-agent",
        "checks": [
          {
            "severity": "HIGH",
            "title": "Access to host network",
            "description": "Sharing the host’s network namespace permits processes in the pod to communicate with processes bound to the host’s loopback adapter.",
            "remediation": "Do not set 'spec.template.spec.hostNetwork' to true.",
            "origin": "trivy",
            "originId": "KSV009",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Seccomp policies disabled",
            "description": "A program inside the container can bypass Seccomp protection policies.",
            "remediation": "Specify seccomp either by annotation or by seccomp profile type having allowed values as per pod security standards",
            "origin": "trivy",
            "originId": "KSV104",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Seccomp policies disabled",
            "description": "A program inside the container can bypass Seccomp protection policies.",
            "remediation": "Specify seccomp either by annotation or by seccomp profile type having allowed values as per pod security standards",
            "origin": "trivy",
            "originId": "KSV104",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "gke-metrics-agent The container is running with a low user ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "gke-metrics-agent The container running with a low group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "core-metrics-exporter The container is running with a low user ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "core-metrics-exporter The container running with a low group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "gke-metrics-agent The pod has a container with a writable root filesystem",
            "description": "Makes sure that all pods have a security context with read only filesystem set",
            "remediation": "Set securityContext.readOnlyRootFilesystem to true",
            "origin": "kube-score",
            "originId": "container-security-context-readonlyrootfilesystem",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "core-metrics-exporter The pod has a container with a writable root filesystem",
            "description": "Makes sure that all pods have a security context with read only filesystem set",
            "remediation": "Set securityContext.readOnlyRootFilesystem to true",
            "origin": "kube-score",
            "originId": "container-security-context-readonlyrootfilesystem",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "gke-metrics-agent CPU limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "core-metrics-exporter CPU limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "gke-metrics-agent ImagePullPolicy is not set to Always",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want.",
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "core-metrics-exporter ImagePullPolicy is not set to Always",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want.",
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": " The pod does not have a matching NetworkPolicy",
            "description": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "remediation": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect.",
            "origin": "kube-score",
            "originId": "pod-networkpolicy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "gke-metrics-agent Ephemeral Storage limit is not set",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage",
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "core-metrics-exporter Ephemeral Storage limit is not set",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage",
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "CRITICAL",
            "title": " The pod is not targeted by a service, skipping probe checks.",
            "description": "Makes sure that all Pods have safe probe configurations",
            "remediation": "",
            "origin": "kube-score",
            "originId": "pod-probes",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "CRITICAL",
            "title": " Pod Topology Spread Constraints",
            "description": "Pod Topology Spread Constraints",
            "remediation": "No Pod Topology Spread Constraints set, kube-scheduler defaults assumed",
            "origin": "kube-score",
            "originId": "pod-topology-spread-constraints",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "CRITICAL",
            "title": " The pod is not targeted by a service, skipping probe checks.",
            "description": "Makes sure that all Pods have safe probe configurations",
            "remediation": "",
            "origin": "kube-score",
            "originId": "pod-probes",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "CRITICAL",
            "title": " Pod Topology Spread Constraints",
            "description": "Pod Topology Spread Constraints",
            "remediation": "No Pod Topology Spread Constraints set, kube-scheduler defaults assumed",
            "origin": "kube-score",
            "originId": "pod-topology-spread-constraints",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "gke-metrics-agent Ephemeral Storage limit is not set",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage",
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "core-metrics-exporter Ephemeral Storage limit is not set",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage",
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "gke-metrics-agent The container is running with a low user ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "gke-metrics-agent The container running with a low group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "core-metrics-exporter The container is running with a low user ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "core-metrics-exporter The container running with a low group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "gke-metrics-agent The pod has a container with a writable root filesystem",
            "description": "Makes sure that all pods have a security context with read only filesystem set",
            "remediation": "Set securityContext.readOnlyRootFilesystem to true",
            "origin": "kube-score",
            "originId": "container-security-context-readonlyrootfilesystem",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "core-metrics-exporter The pod has a container with a writable root filesystem",
            "description": "Makes sure that all pods have a security context with read only filesystem set",
            "remediation": "Set securityContext.readOnlyRootFilesystem to true",
            "origin": "kube-score",
            "originId": "container-security-context-readonlyrootfilesystem",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": " The pod does not have a matching NetworkPolicy",
            "description": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "remediation": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect.",
            "origin": "kube-score",
            "originId": "pod-networkpolicy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "gke-metrics-agent CPU limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "core-metrics-exporter CPU limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "gke-metrics-agent ImagePullPolicy is not set to Always",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want.",
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "core-metrics-exporter ImagePullPolicy is not set to Always",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want.",
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          }
        ]
      },
      {
        "kind": "Role",
        "namespace": "kube-system",
        "name": "system::leader-locking-kube-controller-manager",
        "checks": [
          {
            "severity": "MEDIUM",
            "title": "Manage configmaps",
            "description": "Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.",
            "remediation": "Remove write permission verbs for resource 'configmaps'",
            "origin": "trivy",
            "originId": "KSV049",
            "passed": false,
            "skipped": false,
            "skipReason": null
          }
        ]
      },
      {
        "kind": "ReplicaSet",
        "namespace": "kube-system",
        "name": "metrics-server-v0.5.2-56cbb7c9bc",
        "checks": [
          {
            "severity": "MEDIUM",
            "title": "metrics-server The container is running with a low user ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "metrics-server The container running with a low group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "metrics-server-nanny The container is running with a low user ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "metrics-server-nanny The container running with a low group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "metrics-server-nanny CPU limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "metrics-server ImagePullPolicy is not set to Always",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want.",
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "metrics-server-nanny ImagePullPolicy is not set to Always",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want.",
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": " The pod does not have a matching NetworkPolicy",
            "description": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "remediation": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect.",
            "origin": "kube-score",
            "originId": "pod-networkpolicy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "metrics-server Ephemeral Storage limit is not set",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage",
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "metrics-server-nanny Ephemeral Storage limit is not set",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage",
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "CRITICAL",
            "title": " Pod Topology Spread Constraints",
            "description": "Pod Topology Spread Constraints",
            "remediation": "No Pod Topology Spread Constraints set, kube-scheduler defaults assumed",
            "origin": "kube-score",
            "originId": "pod-topology-spread-constraints",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "CRITICAL",
            "title": " Pod Topology Spread Constraints",
            "description": "Pod Topology Spread Constraints",
            "remediation": "No Pod Topology Spread Constraints set, kube-scheduler defaults assumed",
            "origin": "kube-score",
            "originId": "pod-topology-spread-constraints",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "metrics-server Ephemeral Storage limit is not set",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage",
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "metrics-server-nanny Ephemeral Storage limit is not set",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage",
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "metrics-server The container is running with a low user ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "metrics-server The container running with a low group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "metrics-server-nanny The container is running with a low user ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "metrics-server-nanny The container running with a low group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "metrics-server-nanny CPU limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "metrics-server ImagePullPolicy is not set to Always",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want.",
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "metrics-server-nanny ImagePullPolicy is not set to Always",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want.",
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": " The pod does not have a matching NetworkPolicy",
            "description": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "remediation": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect.",
            "origin": "kube-score",
            "originId": "pod-networkpolicy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          }
        ]
      },
      {
        "kind": "Role",
        "namespace": "kube-system",
        "name": "system:controller:bootstrap-signer",
        "checks": [
          {
            "severity": "MEDIUM",
            "title": "Manage namespace secrets",
            "description": "Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.",
            "remediation": "Manage namespace secrets are not allowed. Remove resource 'secrets' from role",
            "origin": "trivy",
            "originId": "KSV113",
            "passed": false,
            "skipped": false,
            "skipReason": null
          }
        ]
      },
      {
        "kind": "DaemonSet",
        "namespace": "kube-system",
        "name": "netd",
        "checks": [
          {
            "severity": "MEDIUM",
            "title": "Can elevate its own privileges",
            "description": "A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.",
            "remediation": "Set 'set containers[].securityContext.allowPrivilegeEscalation' to 'false'.",
            "origin": "trivy",
            "originId": "KSV001",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Can elevate its own privileges",
            "description": "A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.",
            "remediation": "Set 'set containers[].securityContext.allowPrivilegeEscalation' to 'false'.",
            "origin": "trivy",
            "originId": "KSV001",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "Access to host network",
            "description": "Sharing the host’s network namespace permits processes in the pod to communicate with processes bound to the host’s loopback adapter.",
            "remediation": "Do not set 'spec.template.spec.hostNetwork' to true.",
            "origin": "trivy",
            "originId": "KSV009",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Runs as root user",
            "description": "Force the running image to run as a non-root user to ensure least privileges.",
            "remediation": "Set 'containers[].securityContext.runAsNonRoot' to true.",
            "origin": "trivy",
            "originId": "KSV012",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Runs as root user",
            "description": "Force the running image to run as a non-root user to ensure least privileges.",
            "remediation": "Set 'containers[].securityContext.runAsNonRoot' to true.",
            "origin": "trivy",
            "originId": "KSV012",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "Privileged",
            "description": "Privileged containers share namespaces with the host system and do not offer any security. They should be used exclusively for system containers that require high privileges.",
            "remediation": "Change 'containers[].securityContext.privileged' to 'false'.",
            "origin": "trivy",
            "originId": "KSV017",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "Privileged",
            "description": "Privileged containers share namespaces with the host system and do not offer any security. They should be used exclusively for system containers that require high privileges.",
            "remediation": "Change 'containers[].securityContext.privileged' to 'false'.",
            "origin": "trivy",
            "originId": "KSV017",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Specific capabilities added",
            "description": "According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.",
            "remediation": "Do not set spec.containers[*].securityContext.capabilities.add and spec.initContainers[*].securityContext.capabilities.add.",
            "origin": "trivy",
            "originId": "KSV022",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Specific capabilities added",
            "description": "According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.",
            "remediation": "Do not set spec.containers[*].securityContext.capabilities.add and spec.initContainers[*].securityContext.capabilities.add.",
            "origin": "trivy",
            "originId": "KSV022",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "hostPath volumes mounted",
            "description": "According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.",
            "remediation": "Do not set 'spec.volumes[*].hostPath'.",
            "origin": "trivy",
            "originId": "KSV023",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Seccomp policies disabled",
            "description": "A program inside the container can bypass Seccomp protection policies.",
            "remediation": "Specify seccomp either by annotation or by seccomp profile type having allowed values as per pod security standards",
            "origin": "trivy",
            "originId": "KSV104",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Seccomp policies disabled",
            "description": "A program inside the container can bypass Seccomp protection policies.",
            "remediation": "Specify seccomp either by annotation or by seccomp profile type having allowed values as per pod security standards",
            "origin": "trivy",
            "originId": "KSV104",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "install-cni ImagePullPolicy is not set to Always",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want.",
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "netd ImagePullPolicy is not set to Always",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want.",
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": " The pod does not have a matching NetworkPolicy",
            "description": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "remediation": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect.",
            "origin": "kube-score",
            "originId": "pod-networkpolicy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "install-cni CPU limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "install-cni Memory limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.memory",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "install-cni CPU request is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource requests are recommended to make sure that the application can start and run without crashing. Set resources.requests.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "install-cni Memory request is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource requests are recommended to make sure that the application can start and run without crashing. Set resources.requests.memory",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "netd CPU limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "netd Memory limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.memory",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "install-cni Ephemeral Storage limit is not set",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage",
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "netd Ephemeral Storage limit is not set",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage",
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "CRITICAL",
            "title": " The pod is not targeted by a service, skipping probe checks.",
            "description": "Makes sure that all Pods have safe probe configurations",
            "remediation": "",
            "origin": "kube-score",
            "originId": "pod-probes",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "install-cni The container is privileged",
            "description": "Makes sure that all pods have a unprivileged security context set",
            "remediation": "Set securityContext.privileged to false. Privileged containers can access all devices on the host, and grants almost the same access as non-containerized processes on the host.",
            "origin": "kube-score",
            "originId": "container-security-context-privileged",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "netd The container is privileged",
            "description": "Makes sure that all pods have a unprivileged security context set",
            "remediation": "Set securityContext.privileged to false. Privileged containers can access all devices on the host, and grants almost the same access as non-containerized processes on the host.",
            "origin": "kube-score",
            "originId": "container-security-context-privileged",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "CRITICAL",
            "title": " Pod Topology Spread Constraints",
            "description": "Pod Topology Spread Constraints",
            "remediation": "No Pod Topology Spread Constraints set, kube-scheduler defaults assumed",
            "origin": "kube-score",
            "originId": "pod-topology-spread-constraints",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "install-cni The container is running with a low user ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "install-cni The container running with a low group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "netd The container is running with a low user ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "netd The container running with a low group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "install-cni The pod has a container with a writable root filesystem",
            "description": "Makes sure that all pods have a security context with read only filesystem set",
            "remediation": "Set securityContext.readOnlyRootFilesystem to true",
            "origin": "kube-score",
            "originId": "container-security-context-readonlyrootfilesystem",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "netd The pod has a container with a writable root filesystem",
            "description": "Makes sure that all pods have a security context with read only filesystem set",
            "remediation": "Set securityContext.readOnlyRootFilesystem to true",
            "origin": "kube-score",
            "originId": "container-security-context-readonlyrootfilesystem",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "install-cni CPU limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "install-cni Memory limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.memory",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "install-cni CPU request is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource requests are recommended to make sure that the application can start and run without crashing. Set resources.requests.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "install-cni Memory request is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource requests are recommended to make sure that the application can start and run without crashing. Set resources.requests.memory",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "netd CPU limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "netd Memory limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.memory",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "install-cni ImagePullPolicy is not set to Always",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want.",
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "netd ImagePullPolicy is not set to Always",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want.",
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": " The pod does not have a matching NetworkPolicy",
            "description": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "remediation": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect.",
            "origin": "kube-score",
            "originId": "pod-networkpolicy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "install-cni The container is privileged",
            "description": "Makes sure that all pods have a unprivileged security context set",
            "remediation": "Set securityContext.privileged to false. Privileged containers can access all devices on the host, and grants almost the same access as non-containerized processes on the host.",
            "origin": "kube-score",
            "originId": "container-security-context-privileged",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "netd The container is privileged",
            "description": "Makes sure that all pods have a unprivileged security context set",
            "remediation": "Set securityContext.privileged to false. Privileged containers can access all devices on the host, and grants almost the same access as non-containerized processes on the host.",
            "origin": "kube-score",
            "originId": "container-security-context-privileged",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "CRITICAL",
            "title": " Pod Topology Spread Constraints",
            "description": "Pod Topology Spread Constraints",
            "remediation": "No Pod Topology Spread Constraints set, kube-scheduler defaults assumed",
            "origin": "kube-score",
            "originId": "pod-topology-spread-constraints",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "install-cni Ephemeral Storage limit is not set",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage",
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "netd Ephemeral Storage limit is not set",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage",
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "CRITICAL",
            "title": " The pod is not targeted by a service, skipping probe checks.",
            "description": "Makes sure that all Pods have safe probe configurations",
            "remediation": "",
            "origin": "kube-score",
            "originId": "pod-probes",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "install-cni The container is running with a low user ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "install-cni The container running with a low group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "netd The container is running with a low user ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "netd The container running with a low group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "install-cni The pod has a container with a writable root filesystem",
            "description": "Makes sure that all pods have a security context with read only filesystem set",
            "remediation": "Set securityContext.readOnlyRootFilesystem to true",
            "origin": "kube-score",
            "originId": "container-security-context-readonlyrootfilesystem",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "netd The pod has a container with a writable root filesystem",
            "description": "Makes sure that all pods have a security context with read only filesystem set",
            "remediation": "Set securityContext.readOnlyRootFilesystem to true",
            "origin": "kube-score",
            "originId": "container-security-context-readonlyrootfilesystem",
            "passed": false,
            "skipped": false,
            "skipReason": null
          }
        ]
      },
      {
        "kind": "DaemonSet",
        "namespace": "kube-system",
        "name": "fluentbit-gke",
        "checks": [
          {
            "severity": "MEDIUM",
            "title": "Can elevate its own privileges",
            "description": "A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.",
            "remediation": "Set 'set containers[].securityContext.allowPrivilegeEscalation' to 'false'.",
            "origin": "trivy",
            "originId": "KSV001",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Can elevate its own privileges",
            "description": "A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.",
            "remediation": "Set 'set containers[].securityContext.allowPrivilegeEscalation' to 'false'.",
            "origin": "trivy",
            "originId": "KSV001",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Can elevate its own privileges",
            "description": "A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.",
            "remediation": "Set 'set containers[].securityContext.allowPrivilegeEscalation' to 'false'.",
            "origin": "trivy",
            "originId": "KSV001",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "Access to host network",
            "description": "Sharing the host’s network namespace permits processes in the pod to communicate with processes bound to the host’s loopback adapter.",
            "remediation": "Do not set 'spec.template.spec.hostNetwork' to true.",
            "origin": "trivy",
            "originId": "KSV009",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Runs as root user",
            "description": "Force the running image to run as a non-root user to ensure least privileges.",
            "remediation": "Set 'containers[].securityContext.runAsNonRoot' to true.",
            "origin": "trivy",
            "originId": "KSV012",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Runs as root user",
            "description": "Force the running image to run as a non-root user to ensure least privileges.",
            "remediation": "Set 'containers[].securityContext.runAsNonRoot' to true.",
            "origin": "trivy",
            "originId": "KSV012",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Runs as root user",
            "description": "Force the running image to run as a non-root user to ensure least privileges.",
            "remediation": "Set 'containers[].securityContext.runAsNonRoot' to true.",
            "origin": "trivy",
            "originId": "KSV012",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Specific capabilities added",
            "description": "According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.",
            "remediation": "Do not set spec.containers[*].securityContext.capabilities.add and spec.initContainers[*].securityContext.capabilities.add.",
            "origin": "trivy",
            "originId": "KSV022",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "hostPath volumes mounted",
            "description": "According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.",
            "remediation": "Do not set 'spec.volumes[*].hostPath'.",
            "origin": "trivy",
            "originId": "KSV023",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "Access to host ports",
            "description": "According to pod security standard 'Host Ports', hostPorts should be disallowed, or at minimum restricted to a known list.",
            "remediation": "Do not set spec.containers[*].ports[*].hostPort and spec.initContainers[*].ports[*].hostPort.",
            "origin": "trivy",
            "originId": "KSV024",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "Access to host ports",
            "description": "According to pod security standard 'Host Ports', hostPorts should be disallowed, or at minimum restricted to a known list.",
            "remediation": "Do not set spec.containers[*].ports[*].hostPort and spec.initContainers[*].ports[*].hostPort.",
            "origin": "trivy",
            "originId": "KSV024",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "Access to host ports",
            "description": "According to pod security standard 'Host Ports', hostPorts should be disallowed, or at minimum restricted to a known list.",
            "remediation": "Do not set spec.containers[*].ports[*].hostPort and spec.initContainers[*].ports[*].hostPort.",
            "origin": "trivy",
            "originId": "KSV024",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "Access to host ports",
            "description": "According to pod security standard 'Host Ports', hostPorts should be disallowed, or at minimum restricted to a known list.",
            "remediation": "Do not set spec.containers[*].ports[*].hostPort and spec.initContainers[*].ports[*].hostPort.",
            "origin": "trivy",
            "originId": "KSV024",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "Access to host ports",
            "description": "According to pod security standard 'Host Ports', hostPorts should be disallowed, or at minimum restricted to a known list.",
            "remediation": "Do not set spec.containers[*].ports[*].hostPort and spec.initContainers[*].ports[*].hostPort.",
            "origin": "trivy",
            "originId": "KSV024",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "Access to host ports",
            "description": "According to pod security standard 'Host Ports', hostPorts should be disallowed, or at minimum restricted to a known list.",
            "remediation": "Do not set spec.containers[*].ports[*].hostPort and spec.initContainers[*].ports[*].hostPort.",
            "origin": "trivy",
            "originId": "KSV024",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Seccomp policies disabled",
            "description": "A program inside the container can bypass Seccomp protection policies.",
            "remediation": "Specify seccomp either by annotation or by seccomp profile type having allowed values as per pod security standards",
            "origin": "trivy",
            "originId": "KSV104",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Seccomp policies disabled",
            "description": "A program inside the container can bypass Seccomp protection policies.",
            "remediation": "Specify seccomp either by annotation or by seccomp profile type having allowed values as per pod security standards",
            "origin": "trivy",
            "originId": "KSV104",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Seccomp policies disabled",
            "description": "A program inside the container can bypass Seccomp protection policies.",
            "remediation": "Specify seccomp either by annotation or by seccomp profile type having allowed values as per pod security standards",
            "origin": "trivy",
            "originId": "KSV104",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "fluentbit-gke-init Ephemeral Storage limit is not set",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage",
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "fluentbit Ephemeral Storage limit is not set",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage",
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "fluentbit-gke Ephemeral Storage limit is not set",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage",
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "CRITICAL",
            "title": " The pod is not targeted by a service, skipping probe checks.",
            "description": "Makes sure that all Pods have safe probe configurations",
            "remediation": "",
            "origin": "kube-score",
            "originId": "pod-probes",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "CRITICAL",
            "title": " Pod Topology Spread Constraints",
            "description": "Pod Topology Spread Constraints",
            "remediation": "No Pod Topology Spread Constraints set, kube-scheduler defaults assumed",
            "origin": "kube-score",
            "originId": "pod-topology-spread-constraints",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "fluentbit-gke-init The container is running with a low user ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "fluentbit-gke-init The container running with a low group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "fluentbit The container is running with a low user ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "fluentbit The container running with a low group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "fluentbit-gke The container is running with a low user ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "fluentbit-gke The container running with a low group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "fluentbit-gke-init Container has no configured security context",
            "description": "Makes sure that all pods have a security context with read only filesystem set",
            "remediation": "Set securityContext to run the container in a more secure context.",
            "origin": "kube-score",
            "originId": "container-security-context-readonlyrootfilesystem",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "fluentbit The pod has a container with a writable root filesystem",
            "description": "Makes sure that all pods have a security context with read only filesystem set",
            "remediation": "Set securityContext.readOnlyRootFilesystem to true",
            "origin": "kube-score",
            "originId": "container-security-context-readonlyrootfilesystem",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "fluentbit-gke The pod has a container with a writable root filesystem",
            "description": "Makes sure that all pods have a security context with read only filesystem set",
            "remediation": "Set securityContext.readOnlyRootFilesystem to true",
            "origin": "kube-score",
            "originId": "container-security-context-readonlyrootfilesystem",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "fluentbit-gke-init CPU limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "fluentbit-gke-init Memory limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.memory",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "fluentbit-gke-init CPU request is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource requests are recommended to make sure that the application can start and run without crashing. Set resources.requests.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "fluentbit-gke-init Memory request is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource requests are recommended to make sure that the application can start and run without crashing. Set resources.requests.memory",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "fluentbit CPU limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "fluentbit-gke CPU limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "fluentbit-gke-init ImagePullPolicy is not set to Always",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want.",
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "fluentbit ImagePullPolicy is not set to Always",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want.",
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "fluentbit-gke ImagePullPolicy is not set to Always",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want.",
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": " The pod does not have a matching NetworkPolicy",
            "description": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "remediation": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect.",
            "origin": "kube-score",
            "originId": "pod-networkpolicy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "CRITICAL",
            "title": " The pod is not targeted by a service, skipping probe checks.",
            "description": "Makes sure that all Pods have safe probe configurations",
            "remediation": "",
            "origin": "kube-score",
            "originId": "pod-probes",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "CRITICAL",
            "title": " Pod Topology Spread Constraints",
            "description": "Pod Topology Spread Constraints",
            "remediation": "No Pod Topology Spread Constraints set, kube-scheduler defaults assumed",
            "origin": "kube-score",
            "originId": "pod-topology-spread-constraints",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "fluentbit-gke-init Ephemeral Storage limit is not set",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage",
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "fluentbit Ephemeral Storage limit is not set",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage",
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "fluentbit-gke Ephemeral Storage limit is not set",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage",
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "fluentbit-gke-init The container is running with a low user ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "fluentbit-gke-init The container running with a low group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "fluentbit The container is running with a low user ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "fluentbit The container running with a low group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "fluentbit-gke The container is running with a low user ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "fluentbit-gke The container running with a low group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "fluentbit-gke-init Container has no configured security context",
            "description": "Makes sure that all pods have a security context with read only filesystem set",
            "remediation": "Set securityContext to run the container in a more secure context.",
            "origin": "kube-score",
            "originId": "container-security-context-readonlyrootfilesystem",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "fluentbit The pod has a container with a writable root filesystem",
            "description": "Makes sure that all pods have a security context with read only filesystem set",
            "remediation": "Set securityContext.readOnlyRootFilesystem to true",
            "origin": "kube-score",
            "originId": "container-security-context-readonlyrootfilesystem",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "fluentbit-gke The pod has a container with a writable root filesystem",
            "description": "Makes sure that all pods have a security context with read only filesystem set",
            "remediation": "Set securityContext.readOnlyRootFilesystem to true",
            "origin": "kube-score",
            "originId": "container-security-context-readonlyrootfilesystem",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": " The pod does not have a matching NetworkPolicy",
            "description": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "remediation": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect.",
            "origin": "kube-score",
            "originId": "pod-networkpolicy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "fluentbit-gke-init CPU limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "fluentbit-gke-init Memory limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.memory",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "fluentbit-gke-init CPU request is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource requests are recommended to make sure that the application can start and run without crashing. Set resources.requests.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "fluentbit-gke-init Memory request is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource requests are recommended to make sure that the application can start and run without crashing. Set resources.requests.memory",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "fluentbit CPU limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "fluentbit-gke CPU limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "fluentbit-gke-init ImagePullPolicy is not set to Always",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want.",
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "fluentbit ImagePullPolicy is not set to Always",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want.",
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "fluentbit-gke ImagePullPolicy is not set to Always",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want.",
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          }
        ]
      },
      {
        "kind": "Deployment",
        "namespace": "kube-system",
        "name": "antrea-controller-horizontal-autoscaler",
        "checks": [
          {
            "severity": "MEDIUM",
            "title": "Runs as root user",
            "description": "Force the running image to run as a non-root user to ensure least privileges.",
            "remediation": "Set 'containers[].securityContext.runAsNonRoot' to true.",
            "origin": "trivy",
            "originId": "KSV012",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Seccomp policies disabled",
            "description": "A program inside the container can bypass Seccomp protection policies.",
            "remediation": "Specify seccomp either by annotation or by seccomp profile type having allowed values as per pod security standards",
            "origin": "trivy",
            "originId": "KSV104",
            "passed": false,
            "skipped": false,
            "skipReason": null
          }
        ]
      },
      {
        "kind": "Role",
        "namespace": "kube-system",
        "name": "system::leader-locking-cloud-controller-manager",
        "checks": [
          {
            "severity": "MEDIUM",
            "title": "Manage configmaps",
            "description": "Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.",
            "remediation": "Remove write permission verbs for resource 'configmaps'",
            "origin": "trivy",
            "originId": "KSV049",
            "passed": false,
            "skipped": false,
            "skipReason": null
          }
        ]
      },
      {
        "kind": "ConfigMap",
        "namespace": "kube-system",
        "name": "gke-metrics-agent-conf",
        "checks": [
          {
            "severity": "MEDIUM",
            "title": "ConfigMap with sensitive content",
            "description": "Storing sensitive content such as usernames and email addresses in configMaps is unsafe",
            "remediation": "Remove sensitive content from configMap data value",
            "origin": "trivy",
            "originId": "AVD-KSV-01010",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "Cryptographic key management - misplaced secrets (CC6.1,CC6.6,CC6.7)",
            "description": "Encryption keys used to protect data at rest and in transit are stored and managed in accordance with the organization's cryptography policy. Access to encryption keys are restricted to authorized personnel.",
            "remediation": "Use Kubernetes secrets or Key Management Systems to store credentials.",
            "origin": "kubescape",
            "originId": "C-0012",
            "passed": false,
            "skipped": false,
            "skipReason": null
          }
        ]
      },
      {
        "kind": "DaemonSet",
        "namespace": "kube-system",
        "name": "nccl-fastsocket-installer",
        "checks": [
          {
            "severity": "MEDIUM",
            "title": "Can elevate its own privileges",
            "description": "A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.",
            "remediation": "Set 'set containers[].securityContext.allowPrivilegeEscalation' to 'false'.",
            "origin": "trivy",
            "originId": "KSV001",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Can elevate its own privileges",
            "description": "A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.",
            "remediation": "Set 'set containers[].securityContext.allowPrivilegeEscalation' to 'false'.",
            "origin": "trivy",
            "originId": "KSV001",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "Access to host network",
            "description": "Sharing the host’s network namespace permits processes in the pod to communicate with processes bound to the host’s loopback adapter.",
            "remediation": "Do not set 'spec.template.spec.hostNetwork' to true.",
            "origin": "trivy",
            "originId": "KSV009",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "Access to host PID",
            "description": "Sharing the host’s PID namespace allows visibility on host processes, potentially leaking information such as environment variables and configuration.",
            "remediation": "Do not set 'spec.template.spec.hostPID' to true.",
            "origin": "trivy",
            "originId": "KSV010",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Runs as root user",
            "description": "Force the running image to run as a non-root user to ensure least privileges.",
            "remediation": "Set 'containers[].securityContext.runAsNonRoot' to true.",
            "origin": "trivy",
            "originId": "KSV012",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Runs as root user",
            "description": "Force the running image to run as a non-root user to ensure least privileges.",
            "remediation": "Set 'containers[].securityContext.runAsNonRoot' to true.",
            "origin": "trivy",
            "originId": "KSV012",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "Privileged",
            "description": "Privileged containers share namespaces with the host system and do not offer any security. They should be used exclusively for system containers that require high privileges.",
            "remediation": "Change 'containers[].securityContext.privileged' to 'false'.",
            "origin": "trivy",
            "originId": "KSV017",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "hostPath volumes mounted",
            "description": "According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.",
            "remediation": "Do not set 'spec.volumes[*].hostPath'.",
            "origin": "trivy",
            "originId": "KSV023",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Seccomp policies disabled",
            "description": "A program inside the container can bypass Seccomp protection policies.",
            "remediation": "Specify seccomp either by annotation or by seccomp profile type having allowed values as per pod security standards",
            "origin": "trivy",
            "originId": "KSV104",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Seccomp policies disabled",
            "description": "A program inside the container can bypass Seccomp protection policies.",
            "remediation": "Specify seccomp either by annotation or by seccomp profile type having allowed values as per pod security standards",
            "origin": "trivy",
            "originId": "KSV104",
            "passed": false,
            "skipped": false,
            "skipReason": null
          }
        ]
      },
      {
        "kind": "DaemonSet",
        "namespace": "kube-system",
        "name": "runsc-metric-server",
        "checks": [
          {
            "severity": "MEDIUM",
            "title": "Can elevate its own privileges",
            "description": "A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.",
            "remediation": "Set 'set containers[].securityContext.allowPrivilegeEscalation' to 'false'.",
            "origin": "trivy",
            "originId": "KSV001",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "Access to host network",
            "description": "Sharing the host’s network namespace permits processes in the pod to communicate with processes bound to the host’s loopback adapter.",
            "remediation": "Do not set 'spec.template.spec.hostNetwork' to true.",
            "origin": "trivy",
            "originId": "KSV009",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "Access to host PID",
            "description": "Sharing the host’s PID namespace allows visibility on host processes, potentially leaking information such as environment variables and configuration.",
            "remediation": "Do not set 'spec.template.spec.hostPID' to true.",
            "origin": "trivy",
            "originId": "KSV010",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Runs as root user",
            "description": "Force the running image to run as a non-root user to ensure least privileges.",
            "remediation": "Set 'containers[].securityContext.runAsNonRoot' to true.",
            "origin": "trivy",
            "originId": "KSV012",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Image tag \":latest\" used",
            "description": "It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.",
            "remediation": "Use a specific container image tag that is not 'latest'.",
            "origin": "trivy",
            "originId": "KSV013",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "hostPath volumes mounted",
            "description": "According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.",
            "remediation": "Do not set 'spec.volumes[*].hostPath'.",
            "origin": "trivy",
            "originId": "KSV023",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Seccomp policies disabled",
            "description": "A program inside the container can bypass Seccomp protection policies.",
            "remediation": "Specify seccomp either by annotation or by seccomp profile type having allowed values as per pod security standards",
            "origin": "trivy",
            "originId": "KSV104",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "HostNetwork access",
            "description": "Potential attackers may gain access to a pod and inherit access to the entire host network. For example, in AWS case, they will have access to the entire VPC. This control identifies all the pods with host network access enabled.",
            "remediation": "Only connect pods to host network when it is necessary. If not, set the hostNetwork field of the pod spec to false, or completely remove it (false is the default). Whitelist only those pods that must have access to host network by design.",
            "origin": "kubescape",
            "originId": "C-0041",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Ingress and Egress blocked",
            "description": "Disable Ingress and Egress traffic on all pods wherever possible. It is recommended to define restrictive network policy on all new pods, and then enable sources/destinations that this pod must communicate with.",
            "remediation": "Define a network policy that restricts ingress and egress connections.",
            "origin": "kubescape",
            "originId": "C-0030",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Automatic mapping of service account",
            "description": "Potential attacker may gain access to a pod and steal its service account token. Therefore, it is recommended to disable automatic mapping of the service account tokens in service account configuration and enable it only for pods that need to use them.",
            "remediation": "Disable automatic mounting of service account tokens to pods either at the service account level or at the individual pod level, by specifying the automountServiceAccountToken: false. Note that pod level takes precedence.",
            "origin": "kubescape",
            "originId": "C-0034",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "Writable hostPath mount",
            "description": "Mounting host directory to the container can be used by attackers to get access to the underlying host and gain persistence.",
            "remediation": "Refrain from using the hostPath mount or use the exception mechanism to remove unnecessary notifications.",
            "origin": "kubescape",
            "originId": "C-0045",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "HostPath mount",
            "description": "Mounting host directory to the container can be used by attackers to get access to the underlying host. This control identifies all the pods using hostPath mount.",
            "remediation": "Remove hostPath mounts unless they are absolutely necessary and use exception mechanism to remove notifications.",
            "origin": "kubescape",
            "originId": "C-0048",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Allow privilege escalation",
            "description": "Attackers may gain access to a container and uplift its privilege to enable excessive capabilities.",
            "remediation": "If your application does not need it, make sure the allowPrivilegeEscalation field of the securityContext is set to false.",
            "origin": "kubescape",
            "originId": "C-0016",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Configured liveness probe",
            "description": "Liveness probe is intended to ensure that workload remains healthy during its entire execution lifecycle, or otherwise restrat the container. It is highly recommended to define liveness probe for every worker container. This control finds all the pods where the Liveness probe is not configured.",
            "remediation": "Ensure Liveness probes are configured wherever possible.",
            "origin": "kubescape",
            "originId": "C-0056",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Non-root containers",
            "description": "Potential attackers may gain access to a container and leverage its existing privileges to conduct an attack. Therefore, it is not recommended to deploy containers with root privileges unless it is absolutely necessary. This control identifies all the pods running as root or can escalate to root.",
            "remediation": "If your application does not need root privileges, make sure to define the runAsUser or runAsGroup under the PodSecurityContext and use user ID 1000 or higher. Do not turn on allowPrivlegeEscalation bit and make sure runAsNonRoot is true.",
            "origin": "kubescape",
            "originId": "C-0013",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "Host PID/IPC privileges",
            "description": "Containers should be isolated from the host machine as much as possible. The hostPID and hostIPC fields in deployment yaml may allow cross-container influence and may expose the host itself to potentially malicious or destructive actions. This control identifies all pods using hostPID or hostIPC privileges.",
            "remediation": "Remove hostPID and hostIPC from the yaml file(s) privileges unless they are absolutely necessary.",
            "origin": "kubescape",
            "originId": "C-0038",
            "passed": false,
            "skipped": false,
            "skipReason": null
          }
        ]
      },
      {
        "kind": "Deployment",
        "namespace": "kube-system",
        "name": "l7-default-backend",
        "checks": [
          {
            "severity": "MEDIUM",
            "title": "Runs as root user",
            "description": "Force the running image to run as a non-root user to ensure least privileges.",
            "remediation": "Set 'containers[].securityContext.runAsNonRoot' to true.",
            "origin": "trivy",
            "originId": "KSV012",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Seccomp policies disabled",
            "description": "A program inside the container can bypass Seccomp protection policies.",
            "remediation": "Specify seccomp either by annotation or by seccomp profile type having allowed values as per pod security standards",
            "origin": "trivy",
            "originId": "KSV104",
            "passed": false,
            "skipped": false,
            "skipReason": null
          }
        ]
      },
      {
        "kind": "DaemonSet",
        "namespace": "kube-system",
        "name": "nvidia-gpu-device-plugin-small-cos",
        "checks": [
          {
            "severity": "MEDIUM",
            "title": "Can elevate its own privileges",
            "description": "A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.",
            "remediation": "Set 'set containers[].securityContext.allowPrivilegeEscalation' to 'false'.",
            "origin": "trivy",
            "originId": "KSV001",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Can elevate its own privileges",
            "description": "A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.",
            "remediation": "Set 'set containers[].securityContext.allowPrivilegeEscalation' to 'false'.",
            "origin": "trivy",
            "originId": "KSV001",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Can elevate its own privileges",
            "description": "A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.",
            "remediation": "Set 'set containers[].securityContext.allowPrivilegeEscalation' to 'false'.",
            "origin": "trivy",
            "originId": "KSV001",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "Access to host network",
            "description": "Sharing the host’s network namespace permits processes in the pod to communicate with processes bound to the host’s loopback adapter.",
            "remediation": "Do not set 'spec.template.spec.hostNetwork' to true.",
            "origin": "trivy",
            "originId": "KSV009",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "Access to host PID",
            "description": "Sharing the host’s PID namespace allows visibility on host processes, potentially leaking information such as environment variables and configuration.",
            "remediation": "Do not set 'spec.template.spec.hostPID' to true.",
            "origin": "trivy",
            "originId": "KSV010",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Runs as root user",
            "description": "Force the running image to run as a non-root user to ensure least privileges.",
            "remediation": "Set 'containers[].securityContext.runAsNonRoot' to true.",
            "origin": "trivy",
            "originId": "KSV012",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Runs as root user",
            "description": "Force the running image to run as a non-root user to ensure least privileges.",
            "remediation": "Set 'containers[].securityContext.runAsNonRoot' to true.",
            "origin": "trivy",
            "originId": "KSV012",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Runs as root user",
            "description": "Force the running image to run as a non-root user to ensure least privileges.",
            "remediation": "Set 'containers[].securityContext.runAsNonRoot' to true.",
            "origin": "trivy",
            "originId": "KSV012",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "Privileged",
            "description": "Privileged containers share namespaces with the host system and do not offer any security. They should be used exclusively for system containers that require high privileges.",
            "remediation": "Change 'containers[].securityContext.privileged' to 'false'.",
            "origin": "trivy",
            "originId": "KSV017",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "Privileged",
            "description": "Privileged containers share namespaces with the host system and do not offer any security. They should be used exclusively for system containers that require high privileges.",
            "remediation": "Change 'containers[].securityContext.privileged' to 'false'.",
            "origin": "trivy",
            "originId": "KSV017",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "Privileged",
            "description": "Privileged containers share namespaces with the host system and do not offer any security. They should be used exclusively for system containers that require high privileges.",
            "remediation": "Change 'containers[].securityContext.privileged' to 'false'.",
            "origin": "trivy",
            "originId": "KSV017",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "hostPath volumes mounted",
            "description": "According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.",
            "remediation": "Do not set 'spec.volumes[*].hostPath'.",
            "origin": "trivy",
            "originId": "KSV023",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "Access to host ports",
            "description": "According to pod security standard 'Host Ports', hostPorts should be disallowed, or at minimum restricted to a known list.",
            "remediation": "Do not set spec.containers[*].ports[*].hostPort and spec.initContainers[*].ports[*].hostPort.",
            "origin": "trivy",
            "originId": "KSV024",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "Access to host ports",
            "description": "According to pod security standard 'Host Ports', hostPorts should be disallowed, or at minimum restricted to a known list.",
            "remediation": "Do not set spec.containers[*].ports[*].hostPort and spec.initContainers[*].ports[*].hostPort.",
            "origin": "trivy",
            "originId": "KSV024",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "Access to host ports",
            "description": "According to pod security standard 'Host Ports', hostPorts should be disallowed, or at minimum restricted to a known list.",
            "remediation": "Do not set spec.containers[*].ports[*].hostPort and spec.initContainers[*].ports[*].hostPort.",
            "origin": "trivy",
            "originId": "KSV024",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Seccomp policies disabled",
            "description": "A program inside the container can bypass Seccomp protection policies.",
            "remediation": "Specify seccomp either by annotation or by seccomp profile type having allowed values as per pod security standards",
            "origin": "trivy",
            "originId": "KSV104",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Seccomp policies disabled",
            "description": "A program inside the container can bypass Seccomp protection policies.",
            "remediation": "Specify seccomp either by annotation or by seccomp profile type having allowed values as per pod security standards",
            "origin": "trivy",
            "originId": "KSV104",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Seccomp policies disabled",
            "description": "A program inside the container can bypass Seccomp protection policies.",
            "remediation": "Specify seccomp either by annotation or by seccomp profile type having allowed values as per pod security standards",
            "origin": "trivy",
            "originId": "KSV104",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "Kubernetes resource with disallowed volumes mounted",
            "description": "HostPath present many security risks and as a security practice it is better to avoid critical host paths mounts.",
            "remediation": "Do not Set 'spec.volumes[*].hostPath.path' to any of the disallowed volumes.",
            "origin": "trivy",
            "originId": "KSV121",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Container hostPort",
            "description": "Configuring hostPort requires a particular port number. If two objects specify the same HostPort, they could not be deployed to the same node. It may prevent the second object from starting, even if Kubernetes will try reschedule it on another node, provided there are available nodes with sufficient amount of resources. Also, if the number of replicas of such workload is higher than the number of nodes, the deployment will consistently fail.",
            "remediation": "Avoid usage of hostPort unless it is absolutely necessary, in which case define appropriate exception. Use NodePort / ClusterIP instead.",
            "origin": "kubescape",
            "originId": "C-0044",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "HostNetwork access",
            "description": "Potential attackers may gain access to a pod and inherit access to the entire host network. For example, in AWS case, they will have access to the entire VPC. This control identifies all the pods with host network access enabled.",
            "remediation": "Only connect pods to host network when it is necessary. If not, set the hostNetwork field of the pod spec to false, or completely remove it (false is the default). Whitelist only those pods that must have access to host network by design.",
            "origin": "kubescape",
            "originId": "C-0041",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Ingress and Egress blocked",
            "description": "Disable Ingress and Egress traffic on all pods wherever possible. It is recommended to define restrictive network policy on all new pods, and then enable sources/destinations that this pod must communicate with.",
            "remediation": "Define a network policy that restricts ingress and egress connections.",
            "origin": "kubescape",
            "originId": "C-0030",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "Resources CPU limit and request",
            "description": "This control identifies all Pods for which the CPU limit is not set.",
            "remediation": "Set the CPU limit or use exception mechanism to avoid unnecessary notifications.",
            "origin": "kubescape",
            "originId": "C-0050",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "Resource limits",
            "description": "CPU and memory resources should have a limit set for every container or a namespace to prevent resource exhaustion. This control identifies all the pods without resource limit definitions by checking their yaml definition file as well as their namespace LimitRange objects. It is also recommended to use ResourceQuota object to restrict overall namespace resources, but this is not verified by this control.",
            "remediation": "Define LimitRange and Resource Limits in the namespace or in the deployment/pod manifests.",
            "origin": "kubescape",
            "originId": "C-0009",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Automatic mapping of service account",
            "description": "Potential attacker may gain access to a pod and steal its service account token. Therefore, it is recommended to disable automatic mapping of the service account tokens in service account configuration and enable it only for pods that need to use them.",
            "remediation": "Disable automatic mounting of service account tokens to pods either at the service account level or at the individual pod level, by specifying the automountServiceAccountToken: false. Note that pod level takes precedence.",
            "origin": "kubescape",
            "originId": "C-0034",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "Writable hostPath mount",
            "description": "Mounting host directory to the container can be used by attackers to get access to the underlying host and gain persistence.",
            "remediation": "Refrain from using the hostPath mount or use the exception mechanism to remove unnecessary notifications.",
            "origin": "kubescape",
            "originId": "C-0045",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "HostPath mount",
            "description": "Mounting host directory to the container can be used by attackers to get access to the underlying host. This control identifies all the pods using hostPath mount.",
            "remediation": "Remove hostPath mounts unless they are absolutely necessary and use exception mechanism to remove notifications.",
            "origin": "kubescape",
            "originId": "C-0048",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Allow privilege escalation",
            "description": "Attackers may gain access to a container and uplift its privilege to enable excessive capabilities.",
            "remediation": "If your application does not need it, make sure the allowPrivilegeEscalation field of the securityContext is set to false.",
            "origin": "kubescape",
            "originId": "C-0016",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Configured liveness probe",
            "description": "Liveness probe is intended to ensure that workload remains healthy during its entire execution lifecycle, or otherwise restrat the container. It is highly recommended to define liveness probe for every worker container. This control finds all the pods where the Liveness probe is not configured.",
            "remediation": "Ensure Liveness probes are configured wherever possible.",
            "origin": "kubescape",
            "originId": "C-0056",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Non-root containers",
            "description": "Potential attackers may gain access to a container and leverage its existing privileges to conduct an attack. Therefore, it is not recommended to deploy containers with root privileges unless it is absolutely necessary. This control identifies all the pods running as root or can escalate to root.",
            "remediation": "If your application does not need root privileges, make sure to define the runAsUser or runAsGroup under the PodSecurityContext and use user ID 1000 or higher. Do not turn on allowPrivlegeEscalation bit and make sure runAsNonRoot is true.",
            "origin": "kubescape",
            "originId": "C-0013",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "Host PID/IPC privileges",
            "description": "Containers should be isolated from the host machine as much as possible. The hostPID and hostIPC fields in deployment yaml may allow cross-container influence and may expose the host itself to potentially malicious or destructive actions. This control identifies all pods using hostPID or hostIPC privileges.",
            "remediation": "Remove hostPID and hostIPC from the yaml file(s) privileges unless they are absolutely necessary.",
            "origin": "kubescape",
            "originId": "C-0038",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "Privileged container",
            "description": "Potential attackers may gain access to privileged containers and inherit access to the host resources. Therefore, it is not recommended to deploy privileged containers unless it is absolutely necessary. This control identifies all the privileged Pods.",
            "remediation": "Remove privileged capabilities by setting the securityContext.privileged to false. If you must deploy a Pod as privileged, add other restriction to it, such as network policy, Seccomp etc and still remove all unnecessary capabilities. Use the exception mechanism to remove unnecessary notifications.",
            "origin": "kubescape",
            "originId": "C-0057",
            "passed": false,
            "skipped": false,
            "skipReason": null
          }
        ]
      },
      {
        "kind": "Service",
        "namespace": "kube-system",
        "name": "default-http-backend",
        "checks": [
          {
            "severity": "HIGH",
            "title": " The service is of type NodePort",
            "description": "Makes sure that the Service type is not NodePort",
            "remediation": "NodePort services should be avoided as they are insecure, and can not be used together with NetworkPolicies. LoadBalancers or use of an Ingress is recommended over NodePorts.",
            "origin": "kube-score",
            "originId": "service-type",
            "passed": false,
            "skipped": false,
            "skipReason": null
          }
        ]
      },
      {
        "kind": "ReplicaSet",
        "namespace": "kube-system",
        "name": "konnectivity-agent-autoscaler-76cd7f8498",
        "checks": [
          {
            "severity": "MEDIUM",
            "title": "autoscaler The container is running with a low user ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "autoscaler The container running with a low group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "autoscaler The pod has a container with a writable root filesystem",
            "description": "Makes sure that all pods have a security context with read only filesystem set",
            "remediation": "Set securityContext.readOnlyRootFilesystem to true",
            "origin": "kube-score",
            "originId": "container-security-context-readonlyrootfilesystem",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": " The pod does not have a matching NetworkPolicy",
            "description": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "remediation": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect.",
            "origin": "kube-score",
            "originId": "pod-networkpolicy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "autoscaler CPU limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "autoscaler Memory limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.memory",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "autoscaler ImagePullPolicy is not set to Always",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want.",
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "CRITICAL",
            "title": " The pod is not targeted by a service, skipping probe checks.",
            "description": "Makes sure that all Pods have safe probe configurations",
            "remediation": "",
            "origin": "kube-score",
            "originId": "pod-probes",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "CRITICAL",
            "title": " Pod Topology Spread Constraints",
            "description": "Pod Topology Spread Constraints",
            "remediation": "No Pod Topology Spread Constraints set, kube-scheduler defaults assumed",
            "origin": "kube-score",
            "originId": "pod-topology-spread-constraints",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "autoscaler Ephemeral Storage limit is not set",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage",
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "autoscaler Ephemeral Storage limit is not set",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage",
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "CRITICAL",
            "title": " The pod is not targeted by a service, skipping probe checks.",
            "description": "Makes sure that all Pods have safe probe configurations",
            "remediation": "",
            "origin": "kube-score",
            "originId": "pod-probes",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "CRITICAL",
            "title": " Pod Topology Spread Constraints",
            "description": "Pod Topology Spread Constraints",
            "remediation": "No Pod Topology Spread Constraints set, kube-scheduler defaults assumed",
            "origin": "kube-score",
            "originId": "pod-topology-spread-constraints",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "autoscaler The container is running with a low user ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "autoscaler The container running with a low group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "autoscaler The pod has a container with a writable root filesystem",
            "description": "Makes sure that all pods have a security context with read only filesystem set",
            "remediation": "Set securityContext.readOnlyRootFilesystem to true",
            "origin": "kube-score",
            "originId": "container-security-context-readonlyrootfilesystem",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "autoscaler CPU limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "autoscaler Memory limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.memory",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "autoscaler ImagePullPolicy is not set to Always",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want.",
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": " The pod does not have a matching NetworkPolicy",
            "description": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "remediation": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect.",
            "origin": "kube-score",
            "originId": "pod-networkpolicy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          }
        ]
      },
      {
        "kind": "ConfigMap",
        "namespace": "kube-system",
        "name": "fluentbit-gke-config-v1.4.0",
        "checks": [
          {
            "severity": "HIGH",
            "title": "ConfigMap with secrets",
            "description": "Storing secrets in configMaps is unsafe",
            "remediation": "Remove password/secret from configMap data value",
            "origin": "trivy",
            "originId": "AVD-KSV-0109",
            "passed": false,
            "skipped": false,
            "skipReason": null
          }
        ]
      },
      {
        "kind": "DaemonSet",
        "namespace": "kube-system",
        "name": "gke-metrics-agent-scaling-10",
        "checks": [
          {
            "severity": "HIGH",
            "title": "Access to host network",
            "description": "Sharing the host’s network namespace permits processes in the pod to communicate with processes bound to the host’s loopback adapter.",
            "remediation": "Do not set 'spec.template.spec.hostNetwork' to true.",
            "origin": "trivy",
            "originId": "KSV009",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Seccomp policies disabled",
            "description": "A program inside the container can bypass Seccomp protection policies.",
            "remediation": "Specify seccomp either by annotation or by seccomp profile type having allowed values as per pod security standards",
            "origin": "trivy",
            "originId": "KSV104",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Seccomp policies disabled",
            "description": "A program inside the container can bypass Seccomp protection policies.",
            "remediation": "Specify seccomp either by annotation or by seccomp profile type having allowed values as per pod security standards",
            "origin": "trivy",
            "originId": "KSV104",
            "passed": false,
            "skipped": false,
            "skipReason": null
          }
        ]
      },
      {
        "kind": "DaemonSet",
        "namespace": "kube-system",
        "name": "image-package-extractor",
        "checks": [
          {
            "severity": "MEDIUM",
            "title": "Runs as root user",
            "description": "Force the running image to run as a non-root user to ensure least privileges.",
            "remediation": "Set 'containers[].securityContext.runAsNonRoot' to true.",
            "origin": "trivy",
            "originId": "KSV012",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "hostPath volumes mounted",
            "description": "According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.",
            "remediation": "Do not set 'spec.volumes[*].hostPath'.",
            "origin": "trivy",
            "originId": "KSV023",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Seccomp policies disabled",
            "description": "A program inside the container can bypass Seccomp protection policies.",
            "remediation": "Specify seccomp either by annotation or by seccomp profile type having allowed values as per pod security standards",
            "origin": "trivy",
            "originId": "KSV104",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "image-package-extractor Ephemeral Storage limit is not set",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage",
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "CRITICAL",
            "title": " The pod is not targeted by a service, skipping probe checks.",
            "description": "Makes sure that all Pods have safe probe configurations",
            "remediation": "",
            "origin": "kube-score",
            "originId": "pod-probes",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "CRITICAL",
            "title": " Pod Topology Spread Constraints",
            "description": "Pod Topology Spread Constraints",
            "remediation": "No Pod Topology Spread Constraints set, kube-scheduler defaults assumed",
            "origin": "kube-score",
            "originId": "pod-topology-spread-constraints",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "image-package-extractor The container is running with a low user ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "image-package-extractor The container running with a low group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": " The pod does not have a matching NetworkPolicy",
            "description": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "remediation": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect.",
            "origin": "kube-score",
            "originId": "pod-networkpolicy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "image-package-extractor CPU limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "image-package-extractor The container is running with a low user ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "image-package-extractor The container running with a low group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "image-package-extractor CPU limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": " The pod does not have a matching NetworkPolicy",
            "description": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "remediation": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect.",
            "origin": "kube-score",
            "originId": "pod-networkpolicy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "image-package-extractor Ephemeral Storage limit is not set",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage",
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "CRITICAL",
            "title": " The pod is not targeted by a service, skipping probe checks.",
            "description": "Makes sure that all Pods have safe probe configurations",
            "remediation": "",
            "origin": "kube-score",
            "originId": "pod-probes",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "CRITICAL",
            "title": " Pod Topology Spread Constraints",
            "description": "Pod Topology Spread Constraints",
            "remediation": "No Pod Topology Spread Constraints set, kube-scheduler defaults assumed",
            "origin": "kube-score",
            "originId": "pod-topology-spread-constraints",
            "passed": false,
            "skipped": false,
            "skipReason": null
          }
        ]
      },
      {
        "kind": "Deployment",
        "namespace": "kube-system",
        "name": "konnectivity-agent",
        "checks": [
          {
            "severity": "MEDIUM",
            "title": "Runs as root user",
            "description": "Force the running image to run as a non-root user to ensure least privileges.",
            "remediation": "Set 'containers[].securityContext.runAsNonRoot' to true.",
            "origin": "trivy",
            "originId": "KSV012",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Seccomp policies disabled",
            "description": "A program inside the container can bypass Seccomp protection policies.",
            "remediation": "Specify seccomp either by annotation or by seccomp profile type having allowed values as per pod security standards",
            "origin": "trivy",
            "originId": "KSV104",
            "passed": false,
            "skipped": false,
            "skipReason": null
          }
        ]
      },
      {
        "kind": "DaemonSet",
        "namespace": "kube-system",
        "name": "anetd-win",
        "checks": [
          {
            "severity": "MEDIUM",
            "title": "Can elevate its own privileges",
            "description": "A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.",
            "remediation": "Set 'set containers[].securityContext.allowPrivilegeEscalation' to 'false'.",
            "origin": "trivy",
            "originId": "KSV001",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Runs as root user",
            "description": "Force the running image to run as a non-root user to ensure least privileges.",
            "remediation": "Set 'containers[].securityContext.runAsNonRoot' to true.",
            "origin": "trivy",
            "originId": "KSV012",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Seccomp policies disabled",
            "description": "A program inside the container can bypass Seccomp protection policies.",
            "remediation": "Specify seccomp either by annotation or by seccomp profile type having allowed values as per pod security standards",
            "origin": "trivy",
            "originId": "KSV104",
            "passed": false,
            "skipped": false,
            "skipReason": null
          }
        ]
      },
      {
        "kind": "ConfigMap",
        "namespace": "kube-system",
        "name": "extension-apiserver-authentication",
        "checks": [
          {
            "severity": "MEDIUM",
            "title": "ConfigMap with sensitive content",
            "description": "Storing sensitive content such as usernames and email addresses in configMaps is unsafe",
            "remediation": "Remove sensitive content from configMap data value",
            "origin": "trivy",
            "originId": "AVD-KSV-01010",
            "passed": false,
            "skipped": false,
            "skipReason": null
          }
        ]
      },
      {
        "kind": "Deployment",
        "namespace": "kube-system",
        "name": "metrics-server-v0.5.2",
        "checks": [
          {
            "severity": "MEDIUM",
            "title": "Runs as root user",
            "description": "Force the running image to run as a non-root user to ensure least privileges.",
            "remediation": "Set 'containers[].securityContext.runAsNonRoot' to true.",
            "origin": "trivy",
            "originId": "KSV012",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Runs as root user",
            "description": "Force the running image to run as a non-root user to ensure least privileges.",
            "remediation": "Set 'containers[].securityContext.runAsNonRoot' to true.",
            "origin": "trivy",
            "originId": "KSV012",
            "passed": false,
            "skipped": false,
            "skipReason": null
          }
        ]
      },
      {
        "kind": "Role",
        "namespace": "kube-system",
        "name": "system:controller:cloud-provider",
        "checks": [
          {
            "severity": "MEDIUM",
            "title": "Manage configmaps",
            "description": "Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.",
            "remediation": "Remove write permission verbs for resource 'configmaps'",
            "origin": "trivy",
            "originId": "KSV049",
            "passed": false,
            "skipped": false,
            "skipReason": null
          }
        ]
      },
      {
        "kind": "Deployment",
        "namespace": "kube-system",
        "name": "event-exporter-gke",
        "checks": [
          {
            "severity": "MEDIUM",
            "title": "Runs as root user",
            "description": "Force the running image to run as a non-root user to ensure least privileges.",
            "remediation": "Set 'containers[].securityContext.runAsNonRoot' to true.",
            "origin": "trivy",
            "originId": "KSV012",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Runs as root user",
            "description": "Force the running image to run as a non-root user to ensure least privileges.",
            "remediation": "Set 'containers[].securityContext.runAsNonRoot' to true.",
            "origin": "trivy",
            "originId": "KSV012",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "hostPath volumes mounted",
            "description": "According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.",
            "remediation": "Do not set 'spec.volumes[*].hostPath'.",
            "origin": "trivy",
            "originId": "KSV023",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Seccomp policies disabled",
            "description": "A program inside the container can bypass Seccomp protection policies.",
            "remediation": "Specify seccomp either by annotation or by seccomp profile type having allowed values as per pod security standards",
            "origin": "trivy",
            "originId": "KSV104",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Seccomp policies disabled",
            "description": "A program inside the container can bypass Seccomp protection policies.",
            "remediation": "Specify seccomp either by annotation or by seccomp profile type having allowed values as per pod security standards",
            "origin": "trivy",
            "originId": "KSV104",
            "passed": false,
            "skipped": false,
            "skipReason": null
          }
        ]
      },
      {
        "kind": "DaemonSet",
        "namespace": "kube-system",
        "name": "tpu-device-plugin",
        "checks": [
          {
            "severity": "MEDIUM",
            "title": "Can elevate its own privileges",
            "description": "A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.",
            "remediation": "Set 'set containers[].securityContext.allowPrivilegeEscalation' to 'false'.",
            "origin": "trivy",
            "originId": "KSV001",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "Access to host network",
            "description": "Sharing the host’s network namespace permits processes in the pod to communicate with processes bound to the host’s loopback adapter.",
            "remediation": "Do not set 'spec.template.spec.hostNetwork' to true.",
            "origin": "trivy",
            "originId": "KSV009",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Runs as root user",
            "description": "Force the running image to run as a non-root user to ensure least privileges.",
            "remediation": "Set 'containers[].securityContext.runAsNonRoot' to true.",
            "origin": "trivy",
            "originId": "KSV012",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "Privileged",
            "description": "Privileged containers share namespaces with the host system and do not offer any security. They should be used exclusively for system containers that require high privileges.",
            "remediation": "Change 'containers[].securityContext.privileged' to 'false'.",
            "origin": "trivy",
            "originId": "KSV017",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "hostPath volumes mounted",
            "description": "According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.",
            "remediation": "Do not set 'spec.volumes[*].hostPath'.",
            "origin": "trivy",
            "originId": "KSV023",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Seccomp policies disabled",
            "description": "A program inside the container can bypass Seccomp protection policies.",
            "remediation": "Specify seccomp either by annotation or by seccomp profile type having allowed values as per pod security standards",
            "origin": "trivy",
            "originId": "KSV104",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "Kubernetes resource with disallowed volumes mounted",
            "description": "HostPath present many security risks and as a security practice it is better to avoid critical host paths mounts.",
            "remediation": "Do not Set 'spec.volumes[*].hostPath.path' to any of the disallowed volumes.",
            "origin": "trivy",
            "originId": "KSV121",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "HostNetwork access",
            "description": "Potential attackers may gain access to a pod and inherit access to the entire host network. For example, in AWS case, they will have access to the entire VPC. This control identifies all the pods with host network access enabled.",
            "remediation": "Only connect pods to host network when it is necessary. If not, set the hostNetwork field of the pod spec to false, or completely remove it (false is the default). Whitelist only those pods that must have access to host network by design.",
            "origin": "kubescape",
            "originId": "C-0041",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Ingress and Egress blocked",
            "description": "Disable Ingress and Egress traffic on all pods wherever possible. It is recommended to define restrictive network policy on all new pods, and then enable sources/destinations that this pod must communicate with.",
            "remediation": "Define a network policy that restricts ingress and egress connections.",
            "origin": "kubescape",
            "originId": "C-0030",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "Resources CPU limit and request",
            "description": "This control identifies all Pods for which the CPU limit is not set.",
            "remediation": "Set the CPU limit or use exception mechanism to avoid unnecessary notifications.",
            "origin": "kubescape",
            "originId": "C-0050",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Linux hardening",
            "description": "Containers may be given more privileges than they actually need. This can increase the potential impact of a container compromise.",
            "remediation": "You can use AppArmor, Seccomp, SELinux and Linux Capabilities mechanisms to restrict containers abilities to utilize unwanted privileges.",
            "origin": "kubescape",
            "originId": "C-0055",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "Resource limits",
            "description": "CPU and memory resources should have a limit set for every container or a namespace to prevent resource exhaustion. This control identifies all the pods without resource limit definitions by checking their yaml definition file as well as their namespace LimitRange objects. It is also recommended to use ResourceQuota object to restrict overall namespace resources, but this is not verified by this control.",
            "remediation": "Define LimitRange and Resource Limits in the namespace or in the deployment/pod manifests.",
            "origin": "kubescape",
            "originId": "C-0009",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Automatic mapping of service account",
            "description": "Potential attacker may gain access to a pod and steal its service account token. Therefore, it is recommended to disable automatic mapping of the service account tokens in service account configuration and enable it only for pods that need to use them.",
            "remediation": "Disable automatic mounting of service account tokens to pods either at the service account level or at the individual pod level, by specifying the automountServiceAccountToken: false. Note that pod level takes precedence.",
            "origin": "kubescape",
            "originId": "C-0034",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "Writable hostPath mount",
            "description": "Mounting host directory to the container can be used by attackers to get access to the underlying host and gain persistence.",
            "remediation": "Refrain from using the hostPath mount or use the exception mechanism to remove unnecessary notifications.",
            "origin": "kubescape",
            "originId": "C-0045",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "HostPath mount",
            "description": "Mounting host directory to the container can be used by attackers to get access to the underlying host. This control identifies all the pods using hostPath mount.",
            "remediation": "Remove hostPath mounts unless they are absolutely necessary and use exception mechanism to remove notifications.",
            "origin": "kubescape",
            "originId": "C-0048",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Allow privilege escalation",
            "description": "Attackers may gain access to a container and uplift its privilege to enable excessive capabilities.",
            "remediation": "If your application does not need it, make sure the allowPrivilegeEscalation field of the securityContext is set to false.",
            "origin": "kubescape",
            "originId": "C-0016",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Configured liveness probe",
            "description": "Liveness probe is intended to ensure that workload remains healthy during its entire execution lifecycle, or otherwise restrat the container. It is highly recommended to define liveness probe for every worker container. This control finds all the pods where the Liveness probe is not configured.",
            "remediation": "Ensure Liveness probes are configured wherever possible.",
            "origin": "kubescape",
            "originId": "C-0056",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Non-root containers",
            "description": "Potential attackers may gain access to a container and leverage its existing privileges to conduct an attack. Therefore, it is not recommended to deploy containers with root privileges unless it is absolutely necessary. This control identifies all the pods running as root or can escalate to root.",
            "remediation": "If your application does not need root privileges, make sure to define the runAsUser or runAsGroup under the PodSecurityContext and use user ID 1000 or higher. Do not turn on allowPrivlegeEscalation bit and make sure runAsNonRoot is true.",
            "origin": "kubescape",
            "originId": "C-0013",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "Privileged container",
            "description": "Potential attackers may gain access to privileged containers and inherit access to the host resources. Therefore, it is not recommended to deploy privileged containers unless it is absolutely necessary. This control identifies all the privileged Pods.",
            "remediation": "Remove privileged capabilities by setting the securityContext.privileged to false. If you must deploy a Pod as privileged, add other restriction to it, such as network policy, Seccomp etc and still remove all unnecessary capabilities. Use the exception mechanism to remove unnecessary notifications.",
            "origin": "kubescape",
            "originId": "C-0057",
            "passed": false,
            "skipped": false,
            "skipReason": null
          }
        ]
      },
      {
        "kind": "ServiceAccount",
        "namespace": "kube-system",
        "name": "pkgextract-service",
        "checks": [
          {
            "severity": "MEDIUM",
            "title": "Access container service account",
            "description": "Attackers who obtain access to a pod can use its SA token to communicate with KubeAPI server. All pods with SA token mounted (if such token has a Role or a ClusterRole binding) are considerred potentially dangerous.",
            "remediation": "Verify that RBAC is enabled. Follow the least privilege principle and ensure that only necessary pods have SA token mounted into them.",
            "origin": "kubescape",
            "originId": "C-0053",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Automatic mapping of service account",
            "description": "Potential attacker may gain access to a pod and steal its service account token. Therefore, it is recommended to disable automatic mapping of the service account tokens in service account configuration and enable it only for pods that need to use them.",
            "remediation": "Disable automatic mounting of service account tokens to pods either at the service account level or at the individual pod level, by specifying the automountServiceAccountToken: false. Note that pod level takes precedence.",
            "origin": "kubescape",
            "originId": "C-0034",
            "passed": false,
            "skipped": false,
            "skipReason": null
          }
        ]
      },
      {
        "kind": "ServiceAccount",
        "namespace": "kube-system",
        "name": "pkgextract-cleanup-service",
        "checks": [
          {
            "severity": "MEDIUM",
            "title": "Automatic mapping of service account",
            "description": "Potential attacker may gain access to a pod and steal its service account token. Therefore, it is recommended to disable automatic mapping of the service account tokens in service account configuration and enable it only for pods that need to use them.",
            "remediation": "Disable automatic mounting of service account tokens to pods either at the service account level or at the individual pod level, by specifying the automountServiceAccountToken: false. Note that pod level takes precedence.",
            "origin": "kubescape",
            "originId": "C-0034",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Access container service account",
            "description": "Attackers who obtain access to a pod can use its SA token to communicate with KubeAPI server. All pods with SA token mounted (if such token has a Role or a ClusterRole binding) are considerred potentially dangerous.",
            "remediation": "Verify that RBAC is enabled. Follow the least privilege principle and ensure that only necessary pods have SA token mounted into them.",
            "origin": "kubescape",
            "originId": "C-0053",
            "passed": false,
            "skipped": false,
            "skipReason": null
          }
        ]
      },
      {
        "kind": "DaemonSet",
        "namespace": "kube-system",
        "name": "fluentbit-gke-256pd",
        "checks": [
          {
            "severity": "MEDIUM",
            "title": "Can elevate its own privileges",
            "description": "A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.",
            "remediation": "Set 'set containers[].securityContext.allowPrivilegeEscalation' to 'false'.",
            "origin": "trivy",
            "originId": "KSV001",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Can elevate its own privileges",
            "description": "A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.",
            "remediation": "Set 'set containers[].securityContext.allowPrivilegeEscalation' to 'false'.",
            "origin": "trivy",
            "originId": "KSV001",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Can elevate its own privileges",
            "description": "A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.",
            "remediation": "Set 'set containers[].securityContext.allowPrivilegeEscalation' to 'false'.",
            "origin": "trivy",
            "originId": "KSV001",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "Access to host network",
            "description": "Sharing the host’s network namespace permits processes in the pod to communicate with processes bound to the host’s loopback adapter.",
            "remediation": "Do not set 'spec.template.spec.hostNetwork' to true.",
            "origin": "trivy",
            "originId": "KSV009",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Runs as root user",
            "description": "Force the running image to run as a non-root user to ensure least privileges.",
            "remediation": "Set 'containers[].securityContext.runAsNonRoot' to true.",
            "origin": "trivy",
            "originId": "KSV012",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Runs as root user",
            "description": "Force the running image to run as a non-root user to ensure least privileges.",
            "remediation": "Set 'containers[].securityContext.runAsNonRoot' to true.",
            "origin": "trivy",
            "originId": "KSV012",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Runs as root user",
            "description": "Force the running image to run as a non-root user to ensure least privileges.",
            "remediation": "Set 'containers[].securityContext.runAsNonRoot' to true.",
            "origin": "trivy",
            "originId": "KSV012",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Specific capabilities added",
            "description": "According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.",
            "remediation": "Do not set spec.containers[*].securityContext.capabilities.add and spec.initContainers[*].securityContext.capabilities.add.",
            "origin": "trivy",
            "originId": "KSV022",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "hostPath volumes mounted",
            "description": "According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.",
            "remediation": "Do not set 'spec.volumes[*].hostPath'.",
            "origin": "trivy",
            "originId": "KSV023",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "Access to host ports",
            "description": "According to pod security standard 'Host Ports', hostPorts should be disallowed, or at minimum restricted to a known list.",
            "remediation": "Do not set spec.containers[*].ports[*].hostPort and spec.initContainers[*].ports[*].hostPort.",
            "origin": "trivy",
            "originId": "KSV024",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "Access to host ports",
            "description": "According to pod security standard 'Host Ports', hostPorts should be disallowed, or at minimum restricted to a known list.",
            "remediation": "Do not set spec.containers[*].ports[*].hostPort and spec.initContainers[*].ports[*].hostPort.",
            "origin": "trivy",
            "originId": "KSV024",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "Access to host ports",
            "description": "According to pod security standard 'Host Ports', hostPorts should be disallowed, or at minimum restricted to a known list.",
            "remediation": "Do not set spec.containers[*].ports[*].hostPort and spec.initContainers[*].ports[*].hostPort.",
            "origin": "trivy",
            "originId": "KSV024",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "Access to host ports",
            "description": "According to pod security standard 'Host Ports', hostPorts should be disallowed, or at minimum restricted to a known list.",
            "remediation": "Do not set spec.containers[*].ports[*].hostPort and spec.initContainers[*].ports[*].hostPort.",
            "origin": "trivy",
            "originId": "KSV024",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "Access to host ports",
            "description": "According to pod security standard 'Host Ports', hostPorts should be disallowed, or at minimum restricted to a known list.",
            "remediation": "Do not set spec.containers[*].ports[*].hostPort and spec.initContainers[*].ports[*].hostPort.",
            "origin": "trivy",
            "originId": "KSV024",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "Access to host ports",
            "description": "According to pod security standard 'Host Ports', hostPorts should be disallowed, or at minimum restricted to a known list.",
            "remediation": "Do not set spec.containers[*].ports[*].hostPort and spec.initContainers[*].ports[*].hostPort.",
            "origin": "trivy",
            "originId": "KSV024",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Seccomp policies disabled",
            "description": "A program inside the container can bypass Seccomp protection policies.",
            "remediation": "Specify seccomp either by annotation or by seccomp profile type having allowed values as per pod security standards",
            "origin": "trivy",
            "originId": "KSV104",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Seccomp policies disabled",
            "description": "A program inside the container can bypass Seccomp protection policies.",
            "remediation": "Specify seccomp either by annotation or by seccomp profile type having allowed values as per pod security standards",
            "origin": "trivy",
            "originId": "KSV104",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Seccomp policies disabled",
            "description": "A program inside the container can bypass Seccomp protection policies.",
            "remediation": "Specify seccomp either by annotation or by seccomp profile type having allowed values as per pod security standards",
            "origin": "trivy",
            "originId": "KSV104",
            "passed": false,
            "skipped": false,
            "skipReason": null
          }
        ]
      },
      {
        "kind": "ReplicaSet",
        "namespace": "kube-system",
        "name": "event-exporter-gke-788d9f95d6",
        "checks": [
          {
            "severity": "CRITICAL",
            "title": " The pod is not targeted by a service, skipping probe checks.",
            "description": "Makes sure that all Pods have safe probe configurations",
            "remediation": "",
            "origin": "kube-score",
            "originId": "pod-probes",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "CRITICAL",
            "title": " Pod Topology Spread Constraints",
            "description": "Pod Topology Spread Constraints",
            "remediation": "No Pod Topology Spread Constraints set, kube-scheduler defaults assumed",
            "origin": "kube-score",
            "originId": "pod-topology-spread-constraints",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "event-exporter Ephemeral Storage limit is not set",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage",
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "prometheus-to-sd-exporter Ephemeral Storage limit is not set",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage",
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "event-exporter The container is running with a low user ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "event-exporter The container running with a low group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "prometheus-to-sd-exporter The container is running with a low user ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "prometheus-to-sd-exporter The container running with a low group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "event-exporter The pod has a container with a writable root filesystem",
            "description": "Makes sure that all pods have a security context with read only filesystem set",
            "remediation": "Set securityContext.readOnlyRootFilesystem to true",
            "origin": "kube-score",
            "originId": "container-security-context-readonlyrootfilesystem",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "prometheus-to-sd-exporter The pod has a container with a writable root filesystem",
            "description": "Makes sure that all pods have a security context with read only filesystem set",
            "remediation": "Set securityContext.readOnlyRootFilesystem to true",
            "origin": "kube-score",
            "originId": "container-security-context-readonlyrootfilesystem",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": " The pod does not have a matching NetworkPolicy",
            "description": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "remediation": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect.",
            "origin": "kube-score",
            "originId": "pod-networkpolicy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "event-exporter CPU limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "event-exporter Memory limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.memory",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "prometheus-to-sd-exporter CPU limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "prometheus-to-sd-exporter Memory limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.memory",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "prometheus-to-sd-exporter CPU request is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource requests are recommended to make sure that the application can start and run without crashing. Set resources.requests.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "prometheus-to-sd-exporter Memory request is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource requests are recommended to make sure that the application can start and run without crashing. Set resources.requests.memory",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "event-exporter ImagePullPolicy is not set to Always",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want.",
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "prometheus-to-sd-exporter ImagePullPolicy is not set to Always",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want.",
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "event-exporter Ephemeral Storage limit is not set",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage",
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "prometheus-to-sd-exporter Ephemeral Storage limit is not set",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage",
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "CRITICAL",
            "title": " The pod is not targeted by a service, skipping probe checks.",
            "description": "Makes sure that all Pods have safe probe configurations",
            "remediation": "",
            "origin": "kube-score",
            "originId": "pod-probes",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "CRITICAL",
            "title": " Pod Topology Spread Constraints",
            "description": "Pod Topology Spread Constraints",
            "remediation": "No Pod Topology Spread Constraints set, kube-scheduler defaults assumed",
            "origin": "kube-score",
            "originId": "pod-topology-spread-constraints",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "event-exporter The container is running with a low user ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "event-exporter The container running with a low group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "prometheus-to-sd-exporter The container is running with a low user ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "prometheus-to-sd-exporter The container running with a low group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "event-exporter The pod has a container with a writable root filesystem",
            "description": "Makes sure that all pods have a security context with read only filesystem set",
            "remediation": "Set securityContext.readOnlyRootFilesystem to true",
            "origin": "kube-score",
            "originId": "container-security-context-readonlyrootfilesystem",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "prometheus-to-sd-exporter The pod has a container with a writable root filesystem",
            "description": "Makes sure that all pods have a security context with read only filesystem set",
            "remediation": "Set securityContext.readOnlyRootFilesystem to true",
            "origin": "kube-score",
            "originId": "container-security-context-readonlyrootfilesystem",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "event-exporter CPU limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "event-exporter Memory limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.memory",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "prometheus-to-sd-exporter CPU limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "prometheus-to-sd-exporter Memory limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.memory",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "prometheus-to-sd-exporter CPU request is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource requests are recommended to make sure that the application can start and run without crashing. Set resources.requests.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "prometheus-to-sd-exporter Memory request is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource requests are recommended to make sure that the application can start and run without crashing. Set resources.requests.memory",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "event-exporter ImagePullPolicy is not set to Always",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want.",
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "prometheus-to-sd-exporter ImagePullPolicy is not set to Always",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want.",
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": " The pod does not have a matching NetworkPolicy",
            "description": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "remediation": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect.",
            "origin": "kube-score",
            "originId": "pod-networkpolicy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          }
        ]
      },
      {
        "kind": "DaemonSet",
        "namespace": "kube-system",
        "name": "fluentbit-gke-max",
        "checks": [
          {
            "severity": "MEDIUM",
            "title": "Can elevate its own privileges",
            "description": "A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.",
            "remediation": "Set 'set containers[].securityContext.allowPrivilegeEscalation' to 'false'.",
            "origin": "trivy",
            "originId": "KSV001",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Can elevate its own privileges",
            "description": "A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.",
            "remediation": "Set 'set containers[].securityContext.allowPrivilegeEscalation' to 'false'.",
            "origin": "trivy",
            "originId": "KSV001",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Can elevate its own privileges",
            "description": "A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.",
            "remediation": "Set 'set containers[].securityContext.allowPrivilegeEscalation' to 'false'.",
            "origin": "trivy",
            "originId": "KSV001",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "Access to host network",
            "description": "Sharing the host’s network namespace permits processes in the pod to communicate with processes bound to the host’s loopback adapter.",
            "remediation": "Do not set 'spec.template.spec.hostNetwork' to true.",
            "origin": "trivy",
            "originId": "KSV009",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Runs as root user",
            "description": "Force the running image to run as a non-root user to ensure least privileges.",
            "remediation": "Set 'containers[].securityContext.runAsNonRoot' to true.",
            "origin": "trivy",
            "originId": "KSV012",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Runs as root user",
            "description": "Force the running image to run as a non-root user to ensure least privileges.",
            "remediation": "Set 'containers[].securityContext.runAsNonRoot' to true.",
            "origin": "trivy",
            "originId": "KSV012",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Runs as root user",
            "description": "Force the running image to run as a non-root user to ensure least privileges.",
            "remediation": "Set 'containers[].securityContext.runAsNonRoot' to true.",
            "origin": "trivy",
            "originId": "KSV012",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Specific capabilities added",
            "description": "According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.",
            "remediation": "Do not set spec.containers[*].securityContext.capabilities.add and spec.initContainers[*].securityContext.capabilities.add.",
            "origin": "trivy",
            "originId": "KSV022",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "hostPath volumes mounted",
            "description": "According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.",
            "remediation": "Do not set 'spec.volumes[*].hostPath'.",
            "origin": "trivy",
            "originId": "KSV023",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "Access to host ports",
            "description": "According to pod security standard 'Host Ports', hostPorts should be disallowed, or at minimum restricted to a known list.",
            "remediation": "Do not set spec.containers[*].ports[*].hostPort and spec.initContainers[*].ports[*].hostPort.",
            "origin": "trivy",
            "originId": "KSV024",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "Access to host ports",
            "description": "According to pod security standard 'Host Ports', hostPorts should be disallowed, or at minimum restricted to a known list.",
            "remediation": "Do not set spec.containers[*].ports[*].hostPort and spec.initContainers[*].ports[*].hostPort.",
            "origin": "trivy",
            "originId": "KSV024",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "Access to host ports",
            "description": "According to pod security standard 'Host Ports', hostPorts should be disallowed, or at minimum restricted to a known list.",
            "remediation": "Do not set spec.containers[*].ports[*].hostPort and spec.initContainers[*].ports[*].hostPort.",
            "origin": "trivy",
            "originId": "KSV024",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "Access to host ports",
            "description": "According to pod security standard 'Host Ports', hostPorts should be disallowed, or at minimum restricted to a known list.",
            "remediation": "Do not set spec.containers[*].ports[*].hostPort and spec.initContainers[*].ports[*].hostPort.",
            "origin": "trivy",
            "originId": "KSV024",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "Access to host ports",
            "description": "According to pod security standard 'Host Ports', hostPorts should be disallowed, or at minimum restricted to a known list.",
            "remediation": "Do not set spec.containers[*].ports[*].hostPort and spec.initContainers[*].ports[*].hostPort.",
            "origin": "trivy",
            "originId": "KSV024",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "Access to host ports",
            "description": "According to pod security standard 'Host Ports', hostPorts should be disallowed, or at minimum restricted to a known list.",
            "remediation": "Do not set spec.containers[*].ports[*].hostPort and spec.initContainers[*].ports[*].hostPort.",
            "origin": "trivy",
            "originId": "KSV024",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Seccomp policies disabled",
            "description": "A program inside the container can bypass Seccomp protection policies.",
            "remediation": "Specify seccomp either by annotation or by seccomp profile type having allowed values as per pod security standards",
            "origin": "trivy",
            "originId": "KSV104",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Seccomp policies disabled",
            "description": "A program inside the container can bypass Seccomp protection policies.",
            "remediation": "Specify seccomp either by annotation or by seccomp profile type having allowed values as per pod security standards",
            "origin": "trivy",
            "originId": "KSV104",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Seccomp policies disabled",
            "description": "A program inside the container can bypass Seccomp protection policies.",
            "remediation": "Specify seccomp either by annotation or by seccomp profile type having allowed values as per pod security standards",
            "origin": "trivy",
            "originId": "KSV104",
            "passed": false,
            "skipped": false,
            "skipReason": null
          }
        ]
      },
      {
        "kind": "ReplicaSet",
        "namespace": "kube-system",
        "name": "kube-dns-649bbf755c",
        "checks": [
          {
            "severity": "MEDIUM",
            "title": "kubedns The container is running with a low user ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kubedns The container running with a low group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "dnsmasq The container is running with a low user ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "dnsmasq The container running with a low group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "sidecar The container is running with a low user ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "sidecar The container running with a low group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "prometheus-to-sd The container is running with a low user ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "prometheus-to-sd The container running with a low group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "dnsmasq The pod has a container with a writable root filesystem",
            "description": "Makes sure that all pods have a security context with read only filesystem set",
            "remediation": "Set securityContext.readOnlyRootFilesystem to true",
            "origin": "kube-score",
            "originId": "container-security-context-readonlyrootfilesystem",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kubedns CPU limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "dnsmasq CPU limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "dnsmasq Memory limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.memory",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "sidecar CPU limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "sidecar Memory limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.memory",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "prometheus-to-sd CPU limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "prometheus-to-sd Memory limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.memory",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "prometheus-to-sd CPU request is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource requests are recommended to make sure that the application can start and run without crashing. Set resources.requests.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "prometheus-to-sd Memory request is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource requests are recommended to make sure that the application can start and run without crashing. Set resources.requests.memory",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kubedns ImagePullPolicy is not set to Always",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want.",
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "dnsmasq ImagePullPolicy is not set to Always",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want.",
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "sidecar ImagePullPolicy is not set to Always",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want.",
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "prometheus-to-sd ImagePullPolicy is not set to Always",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want.",
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": " The pod does not have a matching NetworkPolicy",
            "description": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "remediation": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect.",
            "origin": "kube-score",
            "originId": "pod-networkpolicy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kubedns Ephemeral Storage limit is not set",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage",
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "dnsmasq Ephemeral Storage limit is not set",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage",
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "sidecar Ephemeral Storage limit is not set",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage",
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "prometheus-to-sd Ephemeral Storage limit is not set",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage",
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "CRITICAL",
            "title": " Pod Topology Spread Constraints",
            "description": "Pod Topology Spread Constraints",
            "remediation": "No Pod Topology Spread Constraints set, kube-scheduler defaults assumed",
            "origin": "kube-score",
            "originId": "pod-topology-spread-constraints",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "CRITICAL",
            "title": " Pod Topology Spread Constraints",
            "description": "Pod Topology Spread Constraints",
            "remediation": "No Pod Topology Spread Constraints set, kube-scheduler defaults assumed",
            "origin": "kube-score",
            "originId": "pod-topology-spread-constraints",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kubedns Ephemeral Storage limit is not set",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage",
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "dnsmasq Ephemeral Storage limit is not set",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage",
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "sidecar Ephemeral Storage limit is not set",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage",
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "prometheus-to-sd Ephemeral Storage limit is not set",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage",
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kubedns The container is running with a low user ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kubedns The container running with a low group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "dnsmasq The container is running with a low user ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "dnsmasq The container running with a low group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "sidecar The container is running with a low user ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "sidecar The container running with a low group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "prometheus-to-sd The container is running with a low user ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "prometheus-to-sd The container running with a low group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "dnsmasq The pod has a container with a writable root filesystem",
            "description": "Makes sure that all pods have a security context with read only filesystem set",
            "remediation": "Set securityContext.readOnlyRootFilesystem to true",
            "origin": "kube-score",
            "originId": "container-security-context-readonlyrootfilesystem",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kubedns CPU limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "dnsmasq CPU limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "dnsmasq Memory limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.memory",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "sidecar CPU limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "sidecar Memory limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.memory",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "prometheus-to-sd CPU limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "prometheus-to-sd Memory limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.memory",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "prometheus-to-sd CPU request is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource requests are recommended to make sure that the application can start and run without crashing. Set resources.requests.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "prometheus-to-sd Memory request is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource requests are recommended to make sure that the application can start and run without crashing. Set resources.requests.memory",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "kubedns ImagePullPolicy is not set to Always",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want.",
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "dnsmasq ImagePullPolicy is not set to Always",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want.",
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "sidecar ImagePullPolicy is not set to Always",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want.",
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "prometheus-to-sd ImagePullPolicy is not set to Always",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want.",
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": " The pod does not have a matching NetworkPolicy",
            "description": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "remediation": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect.",
            "origin": "kube-score",
            "originId": "pod-networkpolicy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          }
        ]
      },
      {
        "kind": "DaemonSet",
        "namespace": "kube-system",
        "name": "gke-metrics-agent-scaling-50",
        "checks": [
          {
            "severity": "HIGH",
            "title": "Access to host network",
            "description": "Sharing the host’s network namespace permits processes in the pod to communicate with processes bound to the host’s loopback adapter.",
            "remediation": "Do not set 'spec.template.spec.hostNetwork' to true.",
            "origin": "trivy",
            "originId": "KSV009",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Seccomp policies disabled",
            "description": "A program inside the container can bypass Seccomp protection policies.",
            "remediation": "Specify seccomp either by annotation or by seccomp profile type having allowed values as per pod security standards",
            "origin": "trivy",
            "originId": "KSV104",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Seccomp policies disabled",
            "description": "A program inside the container can bypass Seccomp protection policies.",
            "remediation": "Specify seccomp either by annotation or by seccomp profile type having allowed values as per pod security standards",
            "origin": "trivy",
            "originId": "KSV104",
            "passed": false,
            "skipped": false,
            "skipReason": null
          }
        ]
      },
      {
        "kind": "DaemonSet",
        "namespace": "kube-system",
        "name": "gke-metrics-agent-scaling-200",
        "checks": [
          {
            "severity": "HIGH",
            "title": "Access to host network",
            "description": "Sharing the host’s network namespace permits processes in the pod to communicate with processes bound to the host’s loopback adapter.",
            "remediation": "Do not set 'spec.template.spec.hostNetwork' to true.",
            "origin": "trivy",
            "originId": "KSV009",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Seccomp policies disabled",
            "description": "A program inside the container can bypass Seccomp protection policies.",
            "remediation": "Specify seccomp either by annotation or by seccomp profile type having allowed values as per pod security standards",
            "origin": "trivy",
            "originId": "KSV104",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Seccomp policies disabled",
            "description": "A program inside the container can bypass Seccomp protection policies.",
            "remediation": "Specify seccomp either by annotation or by seccomp profile type having allowed values as per pod security standards",
            "origin": "trivy",
            "originId": "KSV104",
            "passed": false,
            "skipped": false,
            "skipReason": null
          }
        ]
      },
      {
        "kind": "DaemonSet",
        "namespace": "kube-system",
        "name": "metadata-proxy-v0.1",
        "checks": [
          {
            "severity": "MEDIUM",
            "title": "Can elevate its own privileges",
            "description": "A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.",
            "remediation": "Set 'set containers[].securityContext.allowPrivilegeEscalation' to 'false'.",
            "origin": "trivy",
            "originId": "KSV001",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Can elevate its own privileges",
            "description": "A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.",
            "remediation": "Set 'set containers[].securityContext.allowPrivilegeEscalation' to 'false'.",
            "origin": "trivy",
            "originId": "KSV001",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "Access to host network",
            "description": "Sharing the host’s network namespace permits processes in the pod to communicate with processes bound to the host’s loopback adapter.",
            "remediation": "Do not set 'spec.template.spec.hostNetwork' to true.",
            "origin": "trivy",
            "originId": "KSV009",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Runs as root user",
            "description": "Force the running image to run as a non-root user to ensure least privileges.",
            "remediation": "Set 'containers[].securityContext.runAsNonRoot' to true.",
            "origin": "trivy",
            "originId": "KSV012",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Runs as root user",
            "description": "Force the running image to run as a non-root user to ensure least privileges.",
            "remediation": "Set 'containers[].securityContext.runAsNonRoot' to true.",
            "origin": "trivy",
            "originId": "KSV012",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "Privileged",
            "description": "Privileged containers share namespaces with the host system and do not offer any security. They should be used exclusively for system containers that require high privileges.",
            "remediation": "Change 'containers[].securityContext.privileged' to 'false'.",
            "origin": "trivy",
            "originId": "KSV017",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Seccomp policies disabled",
            "description": "A program inside the container can bypass Seccomp protection policies.",
            "remediation": "Specify seccomp either by annotation or by seccomp profile type having allowed values as per pod security standards",
            "origin": "trivy",
            "originId": "KSV104",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Seccomp policies disabled",
            "description": "A program inside the container can bypass Seccomp protection policies.",
            "remediation": "Specify seccomp either by annotation or by seccomp profile type having allowed values as per pod security standards",
            "origin": "trivy",
            "originId": "KSV104",
            "passed": false,
            "skipped": false,
            "skipReason": null
          }
        ]
      },
      {
        "kind": "Deployment",
        "namespace": "kube-system",
        "name": "kube-dns",
        "checks": [
          {
            "severity": "MEDIUM",
            "title": "Can elevate its own privileges",
            "description": "A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.",
            "remediation": "Set 'set containers[].securityContext.allowPrivilegeEscalation' to 'false'.",
            "origin": "trivy",
            "originId": "KSV001",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Can elevate its own privileges",
            "description": "A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.",
            "remediation": "Set 'set containers[].securityContext.allowPrivilegeEscalation' to 'false'.",
            "origin": "trivy",
            "originId": "KSV001",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Can elevate its own privileges",
            "description": "A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.",
            "remediation": "Set 'set containers[].securityContext.allowPrivilegeEscalation' to 'false'.",
            "origin": "trivy",
            "originId": "KSV001",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Can elevate its own privileges",
            "description": "A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.",
            "remediation": "Set 'set containers[].securityContext.allowPrivilegeEscalation' to 'false'.",
            "origin": "trivy",
            "originId": "KSV001",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Runs as root user",
            "description": "Force the running image to run as a non-root user to ensure least privileges.",
            "remediation": "Set 'containers[].securityContext.runAsNonRoot' to true.",
            "origin": "trivy",
            "originId": "KSV012",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Runs as root user",
            "description": "Force the running image to run as a non-root user to ensure least privileges.",
            "remediation": "Set 'containers[].securityContext.runAsNonRoot' to true.",
            "origin": "trivy",
            "originId": "KSV012",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Runs as root user",
            "description": "Force the running image to run as a non-root user to ensure least privileges.",
            "remediation": "Set 'containers[].securityContext.runAsNonRoot' to true.",
            "origin": "trivy",
            "originId": "KSV012",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Runs as root user",
            "description": "Force the running image to run as a non-root user to ensure least privileges.",
            "remediation": "Set 'containers[].securityContext.runAsNonRoot' to true.",
            "origin": "trivy",
            "originId": "KSV012",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Specific capabilities added",
            "description": "According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.",
            "remediation": "Do not set spec.containers[*].securityContext.capabilities.add and spec.initContainers[*].securityContext.capabilities.add.",
            "origin": "trivy",
            "originId": "KSV022",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Seccomp policies disabled",
            "description": "A program inside the container can bypass Seccomp protection policies.",
            "remediation": "Specify seccomp either by annotation or by seccomp profile type having allowed values as per pod security standards",
            "origin": "trivy",
            "originId": "KSV104",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Seccomp policies disabled",
            "description": "A program inside the container can bypass Seccomp protection policies.",
            "remediation": "Specify seccomp either by annotation or by seccomp profile type having allowed values as per pod security standards",
            "origin": "trivy",
            "originId": "KSV104",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Seccomp policies disabled",
            "description": "A program inside the container can bypass Seccomp protection policies.",
            "remediation": "Specify seccomp either by annotation or by seccomp profile type having allowed values as per pod security standards",
            "origin": "trivy",
            "originId": "KSV104",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Seccomp policies disabled",
            "description": "A program inside the container can bypass Seccomp protection policies.",
            "remediation": "Specify seccomp either by annotation or by seccomp profile type having allowed values as per pod security standards",
            "origin": "trivy",
            "originId": "KSV104",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "Prevent binding to privileged ports",
            "description": "The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.",
            "remediation": "Do not map the container ports to privileged host ports when starting a container.",
            "origin": "trivy",
            "originId": "KSV117",
            "passed": false,
            "skipped": false,
            "skipReason": null
          }
        ]
      },
      {
        "kind": "DaemonSet",
        "namespace": "kube-system",
        "name": "anetd",
        "checks": [
          {
            "severity": "MEDIUM",
            "title": "Can elevate its own privileges",
            "description": "A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.",
            "remediation": "Set 'set containers[].securityContext.allowPrivilegeEscalation' to 'false'.",
            "origin": "trivy",
            "originId": "KSV001",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Can elevate its own privileges",
            "description": "A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.",
            "remediation": "Set 'set containers[].securityContext.allowPrivilegeEscalation' to 'false'.",
            "origin": "trivy",
            "originId": "KSV001",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Can elevate its own privileges",
            "description": "A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.",
            "remediation": "Set 'set containers[].securityContext.allowPrivilegeEscalation' to 'false'.",
            "origin": "trivy",
            "originId": "KSV001",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Can elevate its own privileges",
            "description": "A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.",
            "remediation": "Set 'set containers[].securityContext.allowPrivilegeEscalation' to 'false'.",
            "origin": "trivy",
            "originId": "KSV001",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Can elevate its own privileges",
            "description": "A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.",
            "remediation": "Set 'set containers[].securityContext.allowPrivilegeEscalation' to 'false'.",
            "origin": "trivy",
            "originId": "KSV001",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "Access to host network",
            "description": "Sharing the host’s network namespace permits processes in the pod to communicate with processes bound to the host’s loopback adapter.",
            "remediation": "Do not set 'spec.template.spec.hostNetwork' to true.",
            "origin": "trivy",
            "originId": "KSV009",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Runs as root user",
            "description": "Force the running image to run as a non-root user to ensure least privileges.",
            "remediation": "Set 'containers[].securityContext.runAsNonRoot' to true.",
            "origin": "trivy",
            "originId": "KSV012",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Runs as root user",
            "description": "Force the running image to run as a non-root user to ensure least privileges.",
            "remediation": "Set 'containers[].securityContext.runAsNonRoot' to true.",
            "origin": "trivy",
            "originId": "KSV012",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Runs as root user",
            "description": "Force the running image to run as a non-root user to ensure least privileges.",
            "remediation": "Set 'containers[].securityContext.runAsNonRoot' to true.",
            "origin": "trivy",
            "originId": "KSV012",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Runs as root user",
            "description": "Force the running image to run as a non-root user to ensure least privileges.",
            "remediation": "Set 'containers[].securityContext.runAsNonRoot' to true.",
            "origin": "trivy",
            "originId": "KSV012",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "Privileged",
            "description": "Privileged containers share namespaces with the host system and do not offer any security. They should be used exclusively for system containers that require high privileges.",
            "remediation": "Change 'containers[].securityContext.privileged' to 'false'.",
            "origin": "trivy",
            "originId": "KSV017",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "Privileged",
            "description": "Privileged containers share namespaces with the host system and do not offer any security. They should be used exclusively for system containers that require high privileges.",
            "remediation": "Change 'containers[].securityContext.privileged' to 'false'.",
            "origin": "trivy",
            "originId": "KSV017",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "Privileged",
            "description": "Privileged containers share namespaces with the host system and do not offer any security. They should be used exclusively for system containers that require high privileges.",
            "remediation": "Change 'containers[].securityContext.privileged' to 'false'.",
            "origin": "trivy",
            "originId": "KSV017",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Specific capabilities added",
            "description": "According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.",
            "remediation": "Do not set spec.containers[*].securityContext.capabilities.add and spec.initContainers[*].securityContext.capabilities.add.",
            "origin": "trivy",
            "originId": "KSV022",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Specific capabilities added",
            "description": "According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.",
            "remediation": "Do not set spec.containers[*].securityContext.capabilities.add and spec.initContainers[*].securityContext.capabilities.add.",
            "origin": "trivy",
            "originId": "KSV022",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "hostPath volumes mounted",
            "description": "According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.",
            "remediation": "Do not set 'spec.volumes[*].hostPath'.",
            "origin": "trivy",
            "originId": "KSV023",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "Access to host ports",
            "description": "According to pod security standard 'Host Ports', hostPorts should be disallowed, or at minimum restricted to a known list.",
            "remediation": "Do not set spec.containers[*].ports[*].hostPort and spec.initContainers[*].ports[*].hostPort.",
            "origin": "trivy",
            "originId": "KSV024",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "Access to host ports",
            "description": "According to pod security standard 'Host Ports', hostPorts should be disallowed, or at minimum restricted to a known list.",
            "remediation": "Do not set spec.containers[*].ports[*].hostPort and spec.initContainers[*].ports[*].hostPort.",
            "origin": "trivy",
            "originId": "KSV024",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "Access to host ports",
            "description": "According to pod security standard 'Host Ports', hostPorts should be disallowed, or at minimum restricted to a known list.",
            "remediation": "Do not set spec.containers[*].ports[*].hostPort and spec.initContainers[*].ports[*].hostPort.",
            "origin": "trivy",
            "originId": "KSV024",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "Access to host ports",
            "description": "According to pod security standard 'Host Ports', hostPorts should be disallowed, or at minimum restricted to a known list.",
            "remediation": "Do not set spec.containers[*].ports[*].hostPort and spec.initContainers[*].ports[*].hostPort.",
            "origin": "trivy",
            "originId": "KSV024",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "Access to host ports",
            "description": "According to pod security standard 'Host Ports', hostPorts should be disallowed, or at minimum restricted to a known list.",
            "remediation": "Do not set spec.containers[*].ports[*].hostPort and spec.initContainers[*].ports[*].hostPort.",
            "origin": "trivy",
            "originId": "KSV024",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Seccomp policies disabled",
            "description": "A program inside the container can bypass Seccomp protection policies.",
            "remediation": "Specify seccomp either by annotation or by seccomp profile type having allowed values as per pod security standards",
            "origin": "trivy",
            "originId": "KSV104",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Seccomp policies disabled",
            "description": "A program inside the container can bypass Seccomp protection policies.",
            "remediation": "Specify seccomp either by annotation or by seccomp profile type having allowed values as per pod security standards",
            "origin": "trivy",
            "originId": "KSV104",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Seccomp policies disabled",
            "description": "A program inside the container can bypass Seccomp protection policies.",
            "remediation": "Specify seccomp either by annotation or by seccomp profile type having allowed values as per pod security standards",
            "origin": "trivy",
            "originId": "KSV104",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Seccomp policies disabled",
            "description": "A program inside the container can bypass Seccomp protection policies.",
            "remediation": "Specify seccomp either by annotation or by seccomp profile type having allowed values as per pod security standards",
            "origin": "trivy",
            "originId": "KSV104",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Seccomp policies disabled",
            "description": "A program inside the container can bypass Seccomp protection policies.",
            "remediation": "Specify seccomp either by annotation or by seccomp profile type having allowed values as per pod security standards",
            "origin": "trivy",
            "originId": "KSV104",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "SYS_MODULE capability added",
            "description": "The SYS_MODULE capability grants attackers the ability to install and remove kernel modules, posing serious security risks.",
            "remediation": "To mitigate potential security risks, it is strongly recommended to remove the SYS_MODULE capability from 'containers[].securityContext.capabilities.add'. It is advisable to follow the practice of dropping all capabilities and only adding the necessary ones.",
            "origin": "trivy",
            "originId": "KSV120",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "Kubernetes resource with disallowed volumes mounted",
            "description": "HostPath present many security risks and as a security practice it is better to avoid critical host paths mounts.",
            "remediation": "Do not Set 'spec.volumes[*].hostPath.path' to any of the disallowed volumes.",
            "origin": "trivy",
            "originId": "KSV121",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "clean-cilium-state Ephemeral Storage limit is not set",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage",
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "apply-sysctl-overwrites Ephemeral Storage limit is not set",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage",
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "install-cni-binaries Ephemeral Storage limit is not set",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage",
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "cilium-agent Ephemeral Storage limit is not set",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage",
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "cilium-agent-metrics-collector Ephemeral Storage limit is not set",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage",
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": " Container has the same readiness and liveness probe",
            "description": "Makes sure that all Pods have safe probe configurations",
            "remediation": "Using the same probe for liveness and readiness is very likely dangerous. Generally it's better to avoid the livenessProbe than re-using the readinessProbe.",
            "origin": "kube-score",
            "originId": "pod-probes",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "clean-cilium-state The container is privileged",
            "description": "Makes sure that all pods have a unprivileged security context set",
            "remediation": "Set securityContext.privileged to false. Privileged containers can access all devices on the host, and grants almost the same access as non-containerized processes on the host.",
            "origin": "kube-score",
            "originId": "container-security-context-privileged",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "apply-sysctl-overwrites The container is privileged",
            "description": "Makes sure that all pods have a unprivileged security context set",
            "remediation": "Set securityContext.privileged to false. Privileged containers can access all devices on the host, and grants almost the same access as non-containerized processes on the host.",
            "origin": "kube-score",
            "originId": "container-security-context-privileged",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "cilium-agent The container is privileged",
            "description": "Makes sure that all pods have a unprivileged security context set",
            "remediation": "Set securityContext.privileged to false. Privileged containers can access all devices on the host, and grants almost the same access as non-containerized processes on the host.",
            "origin": "kube-score",
            "originId": "container-security-context-privileged",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "CRITICAL",
            "title": " Pod Topology Spread Constraints",
            "description": "Pod Topology Spread Constraints",
            "remediation": "No Pod Topology Spread Constraints set, kube-scheduler defaults assumed",
            "origin": "kube-score",
            "originId": "pod-topology-spread-constraints",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "clean-cilium-state The container is running with a low user ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "clean-cilium-state The container running with a low group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "apply-sysctl-overwrites The container is running with a low user ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "apply-sysctl-overwrites The container running with a low group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "install-cni-binaries The container is running with a low user ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "install-cni-binaries The container running with a low group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "cilium-agent The container is running with a low user ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "cilium-agent The container running with a low group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "cilium-agent-metrics-collector The container is running with a low user ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "cilium-agent-metrics-collector The container running with a low group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "clean-cilium-state The pod has a container with a writable root filesystem",
            "description": "Makes sure that all pods have a security context with read only filesystem set",
            "remediation": "Set securityContext.readOnlyRootFilesystem to true",
            "origin": "kube-score",
            "originId": "container-security-context-readonlyrootfilesystem",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "apply-sysctl-overwrites The pod has a container with a writable root filesystem",
            "description": "Makes sure that all pods have a security context with read only filesystem set",
            "remediation": "Set securityContext.readOnlyRootFilesystem to true",
            "origin": "kube-score",
            "originId": "container-security-context-readonlyrootfilesystem",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "install-cni-binaries The pod has a container with a writable root filesystem",
            "description": "Makes sure that all pods have a security context with read only filesystem set",
            "remediation": "Set securityContext.readOnlyRootFilesystem to true",
            "origin": "kube-score",
            "originId": "container-security-context-readonlyrootfilesystem",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "cilium-agent The pod has a container with a writable root filesystem",
            "description": "Makes sure that all pods have a security context with read only filesystem set",
            "remediation": "Set securityContext.readOnlyRootFilesystem to true",
            "origin": "kube-score",
            "originId": "container-security-context-readonlyrootfilesystem",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "clean-cilium-state ImagePullPolicy is not set to Always",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want.",
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "apply-sysctl-overwrites ImagePullPolicy is not set to Always",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want.",
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "install-cni-binaries ImagePullPolicy is not set to Always",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want.",
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "cilium-agent ImagePullPolicy is not set to Always",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want.",
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "cilium-agent-metrics-collector ImagePullPolicy is not set to Always",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want.",
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": " The pod does not have a matching NetworkPolicy",
            "description": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "remediation": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect.",
            "origin": "kube-score",
            "originId": "pod-networkpolicy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "clean-cilium-state CPU limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "clean-cilium-state Memory limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.memory",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "clean-cilium-state CPU request is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource requests are recommended to make sure that the application can start and run without crashing. Set resources.requests.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "clean-cilium-state Memory request is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource requests are recommended to make sure that the application can start and run without crashing. Set resources.requests.memory",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "apply-sysctl-overwrites CPU limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "apply-sysctl-overwrites Memory limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.memory",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "install-cni-binaries CPU limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "install-cni-binaries Memory limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.memory",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "cilium-agent CPU limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "cilium-agent Memory limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.memory",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "cilium-agent CPU request is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource requests are recommended to make sure that the application can start and run without crashing. Set resources.requests.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "cilium-agent Memory request is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource requests are recommended to make sure that the application can start and run without crashing. Set resources.requests.memory",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "cilium-agent-metrics-collector CPU limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": " Container has the same readiness and liveness probe",
            "description": "Makes sure that all Pods have safe probe configurations",
            "remediation": "Using the same probe for liveness and readiness is very likely dangerous. Generally it's better to avoid the livenessProbe than re-using the readinessProbe.",
            "origin": "kube-score",
            "originId": "pod-probes",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "clean-cilium-state The container is privileged",
            "description": "Makes sure that all pods have a unprivileged security context set",
            "remediation": "Set securityContext.privileged to false. Privileged containers can access all devices on the host, and grants almost the same access as non-containerized processes on the host.",
            "origin": "kube-score",
            "originId": "container-security-context-privileged",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "apply-sysctl-overwrites The container is privileged",
            "description": "Makes sure that all pods have a unprivileged security context set",
            "remediation": "Set securityContext.privileged to false. Privileged containers can access all devices on the host, and grants almost the same access as non-containerized processes on the host.",
            "origin": "kube-score",
            "originId": "container-security-context-privileged",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "cilium-agent The container is privileged",
            "description": "Makes sure that all pods have a unprivileged security context set",
            "remediation": "Set securityContext.privileged to false. Privileged containers can access all devices on the host, and grants almost the same access as non-containerized processes on the host.",
            "origin": "kube-score",
            "originId": "container-security-context-privileged",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "CRITICAL",
            "title": " Pod Topology Spread Constraints",
            "description": "Pod Topology Spread Constraints",
            "remediation": "No Pod Topology Spread Constraints set, kube-scheduler defaults assumed",
            "origin": "kube-score",
            "originId": "pod-topology-spread-constraints",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "clean-cilium-state Ephemeral Storage limit is not set",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage",
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "apply-sysctl-overwrites Ephemeral Storage limit is not set",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage",
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "install-cni-binaries Ephemeral Storage limit is not set",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage",
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "cilium-agent Ephemeral Storage limit is not set",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage",
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "cilium-agent-metrics-collector Ephemeral Storage limit is not set",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage",
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "clean-cilium-state The container is running with a low user ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "clean-cilium-state The container running with a low group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "apply-sysctl-overwrites The container is running with a low user ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "apply-sysctl-overwrites The container running with a low group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "install-cni-binaries The container is running with a low user ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "install-cni-binaries The container running with a low group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "cilium-agent The container is running with a low user ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "cilium-agent The container running with a low group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "cilium-agent-metrics-collector The container is running with a low user ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "cilium-agent-metrics-collector The container running with a low group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "clean-cilium-state The pod has a container with a writable root filesystem",
            "description": "Makes sure that all pods have a security context with read only filesystem set",
            "remediation": "Set securityContext.readOnlyRootFilesystem to true",
            "origin": "kube-score",
            "originId": "container-security-context-readonlyrootfilesystem",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "apply-sysctl-overwrites The pod has a container with a writable root filesystem",
            "description": "Makes sure that all pods have a security context with read only filesystem set",
            "remediation": "Set securityContext.readOnlyRootFilesystem to true",
            "origin": "kube-score",
            "originId": "container-security-context-readonlyrootfilesystem",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "install-cni-binaries The pod has a container with a writable root filesystem",
            "description": "Makes sure that all pods have a security context with read only filesystem set",
            "remediation": "Set securityContext.readOnlyRootFilesystem to true",
            "origin": "kube-score",
            "originId": "container-security-context-readonlyrootfilesystem",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "cilium-agent The pod has a container with a writable root filesystem",
            "description": "Makes sure that all pods have a security context with read only filesystem set",
            "remediation": "Set securityContext.readOnlyRootFilesystem to true",
            "origin": "kube-score",
            "originId": "container-security-context-readonlyrootfilesystem",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": " The pod does not have a matching NetworkPolicy",
            "description": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "remediation": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect.",
            "origin": "kube-score",
            "originId": "pod-networkpolicy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "clean-cilium-state CPU limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "clean-cilium-state Memory limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.memory",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "clean-cilium-state CPU request is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource requests are recommended to make sure that the application can start and run without crashing. Set resources.requests.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "clean-cilium-state Memory request is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource requests are recommended to make sure that the application can start and run without crashing. Set resources.requests.memory",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "apply-sysctl-overwrites CPU limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "apply-sysctl-overwrites Memory limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.memory",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "install-cni-binaries CPU limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "install-cni-binaries Memory limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.memory",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "cilium-agent CPU limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "cilium-agent Memory limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.memory",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "cilium-agent CPU request is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource requests are recommended to make sure that the application can start and run without crashing. Set resources.requests.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "cilium-agent Memory request is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource requests are recommended to make sure that the application can start and run without crashing. Set resources.requests.memory",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "cilium-agent-metrics-collector CPU limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "clean-cilium-state ImagePullPolicy is not set to Always",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want.",
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "apply-sysctl-overwrites ImagePullPolicy is not set to Always",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want.",
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "install-cni-binaries ImagePullPolicy is not set to Always",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want.",
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "cilium-agent ImagePullPolicy is not set to Always",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want.",
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "cilium-agent-metrics-collector ImagePullPolicy is not set to Always",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want.",
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          }
        ]
      },
      {
        "kind": "DaemonSet",
        "namespace": "kube-system",
        "name": "gke-metrics-agent-scaling-20",
        "checks": [
          {
            "severity": "HIGH",
            "title": "Access to host network",
            "description": "Sharing the host’s network namespace permits processes in the pod to communicate with processes bound to the host’s loopback adapter.",
            "remediation": "Do not set 'spec.template.spec.hostNetwork' to true.",
            "origin": "trivy",
            "originId": "KSV009",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Seccomp policies disabled",
            "description": "A program inside the container can bypass Seccomp protection policies.",
            "remediation": "Specify seccomp either by annotation or by seccomp profile type having allowed values as per pod security standards",
            "origin": "trivy",
            "originId": "KSV104",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Seccomp policies disabled",
            "description": "A program inside the container can bypass Seccomp protection policies.",
            "remediation": "Specify seccomp either by annotation or by seccomp profile type having allowed values as per pod security standards",
            "origin": "trivy",
            "originId": "KSV104",
            "passed": false,
            "skipped": false,
            "skipReason": null
          }
        ]
      },
      {
        "kind": "ReplicaSet",
        "namespace": "kube-system",
        "name": "antrea-controller-horizontal-autoscaler-7b8c498fc7",
        "checks": [
          {
            "severity": "MEDIUM",
            "title": "autoscaler Ephemeral Storage limit is not set",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage",
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "CRITICAL",
            "title": " The pod is not targeted by a service, skipping probe checks.",
            "description": "Makes sure that all Pods have safe probe configurations",
            "remediation": "",
            "origin": "kube-score",
            "originId": "pod-probes",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "CRITICAL",
            "title": " Pod Topology Spread Constraints",
            "description": "Pod Topology Spread Constraints",
            "remediation": "No Pod Topology Spread Constraints set, kube-scheduler defaults assumed",
            "origin": "kube-score",
            "originId": "pod-topology-spread-constraints",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "autoscaler The container is running with a low user ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "autoscaler The container running with a low group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "autoscaler The pod has a container with a writable root filesystem",
            "description": "Makes sure that all pods have a security context with read only filesystem set",
            "remediation": "Set securityContext.readOnlyRootFilesystem to true",
            "origin": "kube-score",
            "originId": "container-security-context-readonlyrootfilesystem",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "autoscaler CPU limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "autoscaler Memory limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.memory",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "autoscaler Memory request is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource requests are recommended to make sure that the application can start and run without crashing. Set resources.requests.memory",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "autoscaler ImagePullPolicy is not set to Always",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want.",
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": " The pod does not have a matching NetworkPolicy",
            "description": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "remediation": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect.",
            "origin": "kube-score",
            "originId": "pod-networkpolicy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "CRITICAL",
            "title": " Pod Topology Spread Constraints",
            "description": "Pod Topology Spread Constraints",
            "remediation": "No Pod Topology Spread Constraints set, kube-scheduler defaults assumed",
            "origin": "kube-score",
            "originId": "pod-topology-spread-constraints",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "autoscaler Ephemeral Storage limit is not set",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage",
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "CRITICAL",
            "title": " The pod is not targeted by a service, skipping probe checks.",
            "description": "Makes sure that all Pods have safe probe configurations",
            "remediation": "",
            "origin": "kube-score",
            "originId": "pod-probes",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "autoscaler The container is running with a low user ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "autoscaler The container running with a low group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "autoscaler The pod has a container with a writable root filesystem",
            "description": "Makes sure that all pods have a security context with read only filesystem set",
            "remediation": "Set securityContext.readOnlyRootFilesystem to true",
            "origin": "kube-score",
            "originId": "container-security-context-readonlyrootfilesystem",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "autoscaler CPU limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "autoscaler Memory limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.memory",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "autoscaler Memory request is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource requests are recommended to make sure that the application can start and run without crashing. Set resources.requests.memory",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "autoscaler ImagePullPolicy is not set to Always",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want.",
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": " The pod does not have a matching NetworkPolicy",
            "description": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "remediation": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect.",
            "origin": "kube-score",
            "originId": "pod-networkpolicy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          }
        ]
      },
      {
        "kind": "Deployment",
        "namespace": "kube-system",
        "name": "kube-dns-autoscaler",
        "checks": [
          {
            "severity": "MEDIUM",
            "title": "Can elevate its own privileges",
            "description": "A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.",
            "remediation": "Set 'set containers[].securityContext.allowPrivilegeEscalation' to 'false'.",
            "origin": "trivy",
            "originId": "KSV001",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Runs as root user",
            "description": "Force the running image to run as a non-root user to ensure least privileges.",
            "remediation": "Set 'containers[].securityContext.runAsNonRoot' to true.",
            "origin": "trivy",
            "originId": "KSV012",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Seccomp policies disabled",
            "description": "A program inside the container can bypass Seccomp protection policies.",
            "remediation": "Specify seccomp either by annotation or by seccomp profile type having allowed values as per pod security standards",
            "origin": "trivy",
            "originId": "KSV104",
            "passed": false,
            "skipped": false,
            "skipReason": null
          }
        ]
      },
      {
        "kind": "Role",
        "namespace": "kube-system",
        "name": "system:clustermetrics",
        "checks": [
          {
            "severity": "MEDIUM",
            "title": "Manage configmaps",
            "description": "Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.",
            "remediation": "Remove write permission verbs for resource 'configmaps'",
            "origin": "trivy",
            "originId": "KSV049",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Manage configmaps",
            "description": "Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.",
            "remediation": "Remove write permission verbs for resource 'configmaps'",
            "origin": "trivy",
            "originId": "KSV049",
            "passed": false,
            "skipped": false,
            "skipReason": null
          }
        ]
      },
      {
        "kind": "DaemonSet",
        "namespace": "kube-system",
        "name": "nvidia-gpu-device-plugin-medium-ubuntu",
        "checks": [
          {
            "severity": "MEDIUM",
            "title": "Can elevate its own privileges",
            "description": "A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.",
            "remediation": "Set 'set containers[].securityContext.allowPrivilegeEscalation' to 'false'.",
            "origin": "trivy",
            "originId": "KSV001",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Can elevate its own privileges",
            "description": "A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.",
            "remediation": "Set 'set containers[].securityContext.allowPrivilegeEscalation' to 'false'.",
            "origin": "trivy",
            "originId": "KSV001",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Can elevate its own privileges",
            "description": "A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.",
            "remediation": "Set 'set containers[].securityContext.allowPrivilegeEscalation' to 'false'.",
            "origin": "trivy",
            "originId": "KSV001",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "Access to host network",
            "description": "Sharing the host’s network namespace permits processes in the pod to communicate with processes bound to the host’s loopback adapter.",
            "remediation": "Do not set 'spec.template.spec.hostNetwork' to true.",
            "origin": "trivy",
            "originId": "KSV009",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "Access to host PID",
            "description": "Sharing the host’s PID namespace allows visibility on host processes, potentially leaking information such as environment variables and configuration.",
            "remediation": "Do not set 'spec.template.spec.hostPID' to true.",
            "origin": "trivy",
            "originId": "KSV010",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Runs as root user",
            "description": "Force the running image to run as a non-root user to ensure least privileges.",
            "remediation": "Set 'containers[].securityContext.runAsNonRoot' to true.",
            "origin": "trivy",
            "originId": "KSV012",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Runs as root user",
            "description": "Force the running image to run as a non-root user to ensure least privileges.",
            "remediation": "Set 'containers[].securityContext.runAsNonRoot' to true.",
            "origin": "trivy",
            "originId": "KSV012",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Runs as root user",
            "description": "Force the running image to run as a non-root user to ensure least privileges.",
            "remediation": "Set 'containers[].securityContext.runAsNonRoot' to true.",
            "origin": "trivy",
            "originId": "KSV012",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "Privileged",
            "description": "Privileged containers share namespaces with the host system and do not offer any security. They should be used exclusively for system containers that require high privileges.",
            "remediation": "Change 'containers[].securityContext.privileged' to 'false'.",
            "origin": "trivy",
            "originId": "KSV017",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "Privileged",
            "description": "Privileged containers share namespaces with the host system and do not offer any security. They should be used exclusively for system containers that require high privileges.",
            "remediation": "Change 'containers[].securityContext.privileged' to 'false'.",
            "origin": "trivy",
            "originId": "KSV017",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "Privileged",
            "description": "Privileged containers share namespaces with the host system and do not offer any security. They should be used exclusively for system containers that require high privileges.",
            "remediation": "Change 'containers[].securityContext.privileged' to 'false'.",
            "origin": "trivy",
            "originId": "KSV017",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "hostPath volumes mounted",
            "description": "According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.",
            "remediation": "Do not set 'spec.volumes[*].hostPath'.",
            "origin": "trivy",
            "originId": "KSV023",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "Access to host ports",
            "description": "According to pod security standard 'Host Ports', hostPorts should be disallowed, or at minimum restricted to a known list.",
            "remediation": "Do not set spec.containers[*].ports[*].hostPort and spec.initContainers[*].ports[*].hostPort.",
            "origin": "trivy",
            "originId": "KSV024",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "Access to host ports",
            "description": "According to pod security standard 'Host Ports', hostPorts should be disallowed, or at minimum restricted to a known list.",
            "remediation": "Do not set spec.containers[*].ports[*].hostPort and spec.initContainers[*].ports[*].hostPort.",
            "origin": "trivy",
            "originId": "KSV024",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "Access to host ports",
            "description": "According to pod security standard 'Host Ports', hostPorts should be disallowed, or at minimum restricted to a known list.",
            "remediation": "Do not set spec.containers[*].ports[*].hostPort and spec.initContainers[*].ports[*].hostPort.",
            "origin": "trivy",
            "originId": "KSV024",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Seccomp policies disabled",
            "description": "A program inside the container can bypass Seccomp protection policies.",
            "remediation": "Specify seccomp either by annotation or by seccomp profile type having allowed values as per pod security standards",
            "origin": "trivy",
            "originId": "KSV104",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Seccomp policies disabled",
            "description": "A program inside the container can bypass Seccomp protection policies.",
            "remediation": "Specify seccomp either by annotation or by seccomp profile type having allowed values as per pod security standards",
            "origin": "trivy",
            "originId": "KSV104",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Seccomp policies disabled",
            "description": "A program inside the container can bypass Seccomp protection policies.",
            "remediation": "Specify seccomp either by annotation or by seccomp profile type having allowed values as per pod security standards",
            "origin": "trivy",
            "originId": "KSV104",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "Kubernetes resource with disallowed volumes mounted",
            "description": "HostPath present many security risks and as a security practice it is better to avoid critical host paths mounts.",
            "remediation": "Do not Set 'spec.volumes[*].hostPath.path' to any of the disallowed volumes.",
            "origin": "trivy",
            "originId": "KSV121",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Container hostPort",
            "description": "Configuring hostPort requires a particular port number. If two objects specify the same HostPort, they could not be deployed to the same node. It may prevent the second object from starting, even if Kubernetes will try reschedule it on another node, provided there are available nodes with sufficient amount of resources. Also, if the number of replicas of such workload is higher than the number of nodes, the deployment will consistently fail.",
            "remediation": "Avoid usage of hostPort unless it is absolutely necessary, in which case define appropriate exception. Use NodePort / ClusterIP instead.",
            "origin": "kubescape",
            "originId": "C-0044",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "HostNetwork access",
            "description": "Potential attackers may gain access to a pod and inherit access to the entire host network. For example, in AWS case, they will have access to the entire VPC. This control identifies all the pods with host network access enabled.",
            "remediation": "Only connect pods to host network when it is necessary. If not, set the hostNetwork field of the pod spec to false, or completely remove it (false is the default). Whitelist only those pods that must have access to host network by design.",
            "origin": "kubescape",
            "originId": "C-0041",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Ingress and Egress blocked",
            "description": "Disable Ingress and Egress traffic on all pods wherever possible. It is recommended to define restrictive network policy on all new pods, and then enable sources/destinations that this pod must communicate with.",
            "remediation": "Define a network policy that restricts ingress and egress connections.",
            "origin": "kubescape",
            "originId": "C-0030",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "Resources CPU limit and request",
            "description": "This control identifies all Pods for which the CPU limit is not set.",
            "remediation": "Set the CPU limit or use exception mechanism to avoid unnecessary notifications.",
            "origin": "kubescape",
            "originId": "C-0050",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "Resource limits",
            "description": "CPU and memory resources should have a limit set for every container or a namespace to prevent resource exhaustion. This control identifies all the pods without resource limit definitions by checking their yaml definition file as well as their namespace LimitRange objects. It is also recommended to use ResourceQuota object to restrict overall namespace resources, but this is not verified by this control.",
            "remediation": "Define LimitRange and Resource Limits in the namespace or in the deployment/pod manifests.",
            "origin": "kubescape",
            "originId": "C-0009",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Automatic mapping of service account",
            "description": "Potential attacker may gain access to a pod and steal its service account token. Therefore, it is recommended to disable automatic mapping of the service account tokens in service account configuration and enable it only for pods that need to use them.",
            "remediation": "Disable automatic mounting of service account tokens to pods either at the service account level or at the individual pod level, by specifying the automountServiceAccountToken: false. Note that pod level takes precedence.",
            "origin": "kubescape",
            "originId": "C-0034",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "Writable hostPath mount",
            "description": "Mounting host directory to the container can be used by attackers to get access to the underlying host and gain persistence.",
            "remediation": "Refrain from using the hostPath mount or use the exception mechanism to remove unnecessary notifications.",
            "origin": "kubescape",
            "originId": "C-0045",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "HostPath mount",
            "description": "Mounting host directory to the container can be used by attackers to get access to the underlying host. This control identifies all the pods using hostPath mount.",
            "remediation": "Remove hostPath mounts unless they are absolutely necessary and use exception mechanism to remove notifications.",
            "origin": "kubescape",
            "originId": "C-0048",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Allow privilege escalation",
            "description": "Attackers may gain access to a container and uplift its privilege to enable excessive capabilities.",
            "remediation": "If your application does not need it, make sure the allowPrivilegeEscalation field of the securityContext is set to false.",
            "origin": "kubescape",
            "originId": "C-0016",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Configured liveness probe",
            "description": "Liveness probe is intended to ensure that workload remains healthy during its entire execution lifecycle, or otherwise restrat the container. It is highly recommended to define liveness probe for every worker container. This control finds all the pods where the Liveness probe is not configured.",
            "remediation": "Ensure Liveness probes are configured wherever possible.",
            "origin": "kubescape",
            "originId": "C-0056",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Non-root containers",
            "description": "Potential attackers may gain access to a container and leverage its existing privileges to conduct an attack. Therefore, it is not recommended to deploy containers with root privileges unless it is absolutely necessary. This control identifies all the pods running as root or can escalate to root.",
            "remediation": "If your application does not need root privileges, make sure to define the runAsUser or runAsGroup under the PodSecurityContext and use user ID 1000 or higher. Do not turn on allowPrivlegeEscalation bit and make sure runAsNonRoot is true.",
            "origin": "kubescape",
            "originId": "C-0013",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "Host PID/IPC privileges",
            "description": "Containers should be isolated from the host machine as much as possible. The hostPID and hostIPC fields in deployment yaml may allow cross-container influence and may expose the host itself to potentially malicious or destructive actions. This control identifies all pods using hostPID or hostIPC privileges.",
            "remediation": "Remove hostPID and hostIPC from the yaml file(s) privileges unless they are absolutely necessary.",
            "origin": "kubescape",
            "originId": "C-0038",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "Privileged container",
            "description": "Potential attackers may gain access to privileged containers and inherit access to the host resources. Therefore, it is not recommended to deploy privileged containers unless it is absolutely necessary. This control identifies all the privileged Pods.",
            "remediation": "Remove privileged capabilities by setting the securityContext.privileged to false. If you must deploy a Pod as privileged, add other restriction to it, such as network policy, Seccomp etc and still remove all unnecessary capabilities. Use the exception mechanism to remove unnecessary notifications.",
            "origin": "kubescape",
            "originId": "C-0057",
            "passed": false,
            "skipped": false,
            "skipReason": null
          }
        ]
      },
      {
        "kind": "ReplicaSet",
        "namespace": "kube-system",
        "name": "kube-dns-autoscaler-755c7dfdf5",
        "checks": [
          {
            "severity": "MEDIUM",
            "title": "autoscaler CPU limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "autoscaler Memory limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.memory",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "autoscaler ImagePullPolicy is not set to Always",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want.",
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": " The pod does not have a matching NetworkPolicy",
            "description": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "remediation": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect.",
            "origin": "kube-score",
            "originId": "pod-networkpolicy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "autoscaler Ephemeral Storage limit is not set",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage",
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "CRITICAL",
            "title": " The pod is not targeted by a service, skipping probe checks.",
            "description": "Makes sure that all Pods have safe probe configurations",
            "remediation": "",
            "origin": "kube-score",
            "originId": "pod-probes",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "CRITICAL",
            "title": " Pod Topology Spread Constraints",
            "description": "Pod Topology Spread Constraints",
            "remediation": "No Pod Topology Spread Constraints set, kube-scheduler defaults assumed",
            "origin": "kube-score",
            "originId": "pod-topology-spread-constraints",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "autoscaler The container is running with a low user ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "autoscaler The container running with a low group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "autoscaler Container has no configured security context",
            "description": "Makes sure that all pods have a security context with read only filesystem set",
            "remediation": "Set securityContext to run the container in a more secure context.",
            "origin": "kube-score",
            "originId": "container-security-context-readonlyrootfilesystem",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "autoscaler Ephemeral Storage limit is not set",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage",
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "CRITICAL",
            "title": " The pod is not targeted by a service, skipping probe checks.",
            "description": "Makes sure that all Pods have safe probe configurations",
            "remediation": "",
            "origin": "kube-score",
            "originId": "pod-probes",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "CRITICAL",
            "title": " Pod Topology Spread Constraints",
            "description": "Pod Topology Spread Constraints",
            "remediation": "No Pod Topology Spread Constraints set, kube-scheduler defaults assumed",
            "origin": "kube-score",
            "originId": "pod-topology-spread-constraints",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "autoscaler The container is running with a low user ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "autoscaler The container running with a low group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "autoscaler Container has no configured security context",
            "description": "Makes sure that all pods have a security context with read only filesystem set",
            "remediation": "Set securityContext to run the container in a more secure context.",
            "origin": "kube-score",
            "originId": "container-security-context-readonlyrootfilesystem",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "autoscaler CPU limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "autoscaler Memory limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.memory",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "autoscaler ImagePullPolicy is not set to Always",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want.",
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": " The pod does not have a matching NetworkPolicy",
            "description": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "remediation": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect.",
            "origin": "kube-score",
            "originId": "pod-networkpolicy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          }
        ]
      },
      {
        "kind": "Role",
        "namespace": "kube-system",
        "name": "system::leader-locking-kube-scheduler",
        "checks": [
          {
            "severity": "MEDIUM",
            "title": "Manage configmaps",
            "description": "Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.",
            "remediation": "Remove write permission verbs for resource 'configmaps'",
            "origin": "trivy",
            "originId": "KSV049",
            "passed": false,
            "skipped": false,
            "skipReason": null
          }
        ]
      },
      {
        "kind": "DaemonSet",
        "namespace": "kube-system",
        "name": "gke-metrics-agent-windows",
        "checks": [
          {
            "severity": "MEDIUM",
            "title": "Can elevate its own privileges",
            "description": "A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.",
            "remediation": "Set 'set containers[].securityContext.allowPrivilegeEscalation' to 'false'.",
            "origin": "trivy",
            "originId": "KSV001",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Can elevate its own privileges",
            "description": "A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.",
            "remediation": "Set 'set containers[].securityContext.allowPrivilegeEscalation' to 'false'.",
            "origin": "trivy",
            "originId": "KSV001",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Runs as root user",
            "description": "Force the running image to run as a non-root user to ensure least privileges.",
            "remediation": "Set 'containers[].securityContext.runAsNonRoot' to true.",
            "origin": "trivy",
            "originId": "KSV012",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Runs as root user",
            "description": "Force the running image to run as a non-root user to ensure least privileges.",
            "remediation": "Set 'containers[].securityContext.runAsNonRoot' to true.",
            "origin": "trivy",
            "originId": "KSV012",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Seccomp policies disabled",
            "description": "A program inside the container can bypass Seccomp protection policies.",
            "remediation": "Specify seccomp either by annotation or by seccomp profile type having allowed values as per pod security standards",
            "origin": "trivy",
            "originId": "KSV104",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Seccomp policies disabled",
            "description": "A program inside the container can bypass Seccomp protection policies.",
            "remediation": "Specify seccomp either by annotation or by seccomp profile type having allowed values as per pod security standards",
            "origin": "trivy",
            "originId": "KSV104",
            "passed": false,
            "skipped": false,
            "skipReason": null
          }
        ]
      },
      {
        "kind": "ServiceAccount",
        "namespace": "kube-system",
        "name": "cilium-win",
        "checks": [
          {
            "severity": "MEDIUM",
            "title": "Automatic mapping of service account",
            "description": "Potential attacker may gain access to a pod and steal its service account token. Therefore, it is recommended to disable automatic mapping of the service account tokens in service account configuration and enable it only for pods that need to use them.",
            "remediation": "Disable automatic mounting of service account tokens to pods either at the service account level or at the individual pod level, by specifying the automountServiceAccountToken: false. Note that pod level takes precedence.",
            "origin": "kubescape",
            "originId": "C-0034",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Access container service account",
            "description": "Attackers who obtain access to a pod can use its SA token to communicate with KubeAPI server. All pods with SA token mounted (if such token has a Role or a ClusterRole binding) are considerred potentially dangerous.",
            "remediation": "Verify that RBAC is enabled. Follow the least privilege principle and ensure that only necessary pods have SA token mounted into them.",
            "origin": "kubescape",
            "originId": "C-0053",
            "passed": false,
            "skipped": false,
            "skipReason": null
          }
        ]
      },
      {
        "kind": "DaemonSet",
        "namespace": "kube-system",
        "name": "nvidia-gpu-device-plugin-large-ubuntu",
        "checks": [
          {
            "severity": "MEDIUM",
            "title": "Can elevate its own privileges",
            "description": "A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.",
            "remediation": "Set 'set containers[].securityContext.allowPrivilegeEscalation' to 'false'.",
            "origin": "trivy",
            "originId": "KSV001",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Can elevate its own privileges",
            "description": "A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.",
            "remediation": "Set 'set containers[].securityContext.allowPrivilegeEscalation' to 'false'.",
            "origin": "trivy",
            "originId": "KSV001",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Can elevate its own privileges",
            "description": "A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.",
            "remediation": "Set 'set containers[].securityContext.allowPrivilegeEscalation' to 'false'.",
            "origin": "trivy",
            "originId": "KSV001",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "Access to host network",
            "description": "Sharing the host’s network namespace permits processes in the pod to communicate with processes bound to the host’s loopback adapter.",
            "remediation": "Do not set 'spec.template.spec.hostNetwork' to true.",
            "origin": "trivy",
            "originId": "KSV009",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "Access to host PID",
            "description": "Sharing the host’s PID namespace allows visibility on host processes, potentially leaking information such as environment variables and configuration.",
            "remediation": "Do not set 'spec.template.spec.hostPID' to true.",
            "origin": "trivy",
            "originId": "KSV010",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Runs as root user",
            "description": "Force the running image to run as a non-root user to ensure least privileges.",
            "remediation": "Set 'containers[].securityContext.runAsNonRoot' to true.",
            "origin": "trivy",
            "originId": "KSV012",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Runs as root user",
            "description": "Force the running image to run as a non-root user to ensure least privileges.",
            "remediation": "Set 'containers[].securityContext.runAsNonRoot' to true.",
            "origin": "trivy",
            "originId": "KSV012",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Runs as root user",
            "description": "Force the running image to run as a non-root user to ensure least privileges.",
            "remediation": "Set 'containers[].securityContext.runAsNonRoot' to true.",
            "origin": "trivy",
            "originId": "KSV012",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "Privileged",
            "description": "Privileged containers share namespaces with the host system and do not offer any security. They should be used exclusively for system containers that require high privileges.",
            "remediation": "Change 'containers[].securityContext.privileged' to 'false'.",
            "origin": "trivy",
            "originId": "KSV017",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "Privileged",
            "description": "Privileged containers share namespaces with the host system and do not offer any security. They should be used exclusively for system containers that require high privileges.",
            "remediation": "Change 'containers[].securityContext.privileged' to 'false'.",
            "origin": "trivy",
            "originId": "KSV017",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "Privileged",
            "description": "Privileged containers share namespaces with the host system and do not offer any security. They should be used exclusively for system containers that require high privileges.",
            "remediation": "Change 'containers[].securityContext.privileged' to 'false'.",
            "origin": "trivy",
            "originId": "KSV017",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "hostPath volumes mounted",
            "description": "According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.",
            "remediation": "Do not set 'spec.volumes[*].hostPath'.",
            "origin": "trivy",
            "originId": "KSV023",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "Access to host ports",
            "description": "According to pod security standard 'Host Ports', hostPorts should be disallowed, or at minimum restricted to a known list.",
            "remediation": "Do not set spec.containers[*].ports[*].hostPort and spec.initContainers[*].ports[*].hostPort.",
            "origin": "trivy",
            "originId": "KSV024",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "Access to host ports",
            "description": "According to pod security standard 'Host Ports', hostPorts should be disallowed, or at minimum restricted to a known list.",
            "remediation": "Do not set spec.containers[*].ports[*].hostPort and spec.initContainers[*].ports[*].hostPort.",
            "origin": "trivy",
            "originId": "KSV024",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "Access to host ports",
            "description": "According to pod security standard 'Host Ports', hostPorts should be disallowed, or at minimum restricted to a known list.",
            "remediation": "Do not set spec.containers[*].ports[*].hostPort and spec.initContainers[*].ports[*].hostPort.",
            "origin": "trivy",
            "originId": "KSV024",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Seccomp policies disabled",
            "description": "A program inside the container can bypass Seccomp protection policies.",
            "remediation": "Specify seccomp either by annotation or by seccomp profile type having allowed values as per pod security standards",
            "origin": "trivy",
            "originId": "KSV104",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Seccomp policies disabled",
            "description": "A program inside the container can bypass Seccomp protection policies.",
            "remediation": "Specify seccomp either by annotation or by seccomp profile type having allowed values as per pod security standards",
            "origin": "trivy",
            "originId": "KSV104",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Seccomp policies disabled",
            "description": "A program inside the container can bypass Seccomp protection policies.",
            "remediation": "Specify seccomp either by annotation or by seccomp profile type having allowed values as per pod security standards",
            "origin": "trivy",
            "originId": "KSV104",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "Kubernetes resource with disallowed volumes mounted",
            "description": "HostPath present many security risks and as a security practice it is better to avoid critical host paths mounts.",
            "remediation": "Do not Set 'spec.volumes[*].hostPath.path' to any of the disallowed volumes.",
            "origin": "trivy",
            "originId": "KSV121",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Container hostPort",
            "description": "Configuring hostPort requires a particular port number. If two objects specify the same HostPort, they could not be deployed to the same node. It may prevent the second object from starting, even if Kubernetes will try reschedule it on another node, provided there are available nodes with sufficient amount of resources. Also, if the number of replicas of such workload is higher than the number of nodes, the deployment will consistently fail.",
            "remediation": "Avoid usage of hostPort unless it is absolutely necessary, in which case define appropriate exception. Use NodePort / ClusterIP instead.",
            "origin": "kubescape",
            "originId": "C-0044",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "HostNetwork access",
            "description": "Potential attackers may gain access to a pod and inherit access to the entire host network. For example, in AWS case, they will have access to the entire VPC. This control identifies all the pods with host network access enabled.",
            "remediation": "Only connect pods to host network when it is necessary. If not, set the hostNetwork field of the pod spec to false, or completely remove it (false is the default). Whitelist only those pods that must have access to host network by design.",
            "origin": "kubescape",
            "originId": "C-0041",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Ingress and Egress blocked",
            "description": "Disable Ingress and Egress traffic on all pods wherever possible. It is recommended to define restrictive network policy on all new pods, and then enable sources/destinations that this pod must communicate with.",
            "remediation": "Define a network policy that restricts ingress and egress connections.",
            "origin": "kubescape",
            "originId": "C-0030",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "Resources CPU limit and request",
            "description": "This control identifies all Pods for which the CPU limit is not set.",
            "remediation": "Set the CPU limit or use exception mechanism to avoid unnecessary notifications.",
            "origin": "kubescape",
            "originId": "C-0050",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "Resource limits",
            "description": "CPU and memory resources should have a limit set for every container or a namespace to prevent resource exhaustion. This control identifies all the pods without resource limit definitions by checking their yaml definition file as well as their namespace LimitRange objects. It is also recommended to use ResourceQuota object to restrict overall namespace resources, but this is not verified by this control.",
            "remediation": "Define LimitRange and Resource Limits in the namespace or in the deployment/pod manifests.",
            "origin": "kubescape",
            "originId": "C-0009",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Automatic mapping of service account",
            "description": "Potential attacker may gain access to a pod and steal its service account token. Therefore, it is recommended to disable automatic mapping of the service account tokens in service account configuration and enable it only for pods that need to use them.",
            "remediation": "Disable automatic mounting of service account tokens to pods either at the service account level or at the individual pod level, by specifying the automountServiceAccountToken: false. Note that pod level takes precedence.",
            "origin": "kubescape",
            "originId": "C-0034",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "Writable hostPath mount",
            "description": "Mounting host directory to the container can be used by attackers to get access to the underlying host and gain persistence.",
            "remediation": "Refrain from using the hostPath mount or use the exception mechanism to remove unnecessary notifications.",
            "origin": "kubescape",
            "originId": "C-0045",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "HostPath mount",
            "description": "Mounting host directory to the container can be used by attackers to get access to the underlying host. This control identifies all the pods using hostPath mount.",
            "remediation": "Remove hostPath mounts unless they are absolutely necessary and use exception mechanism to remove notifications.",
            "origin": "kubescape",
            "originId": "C-0048",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Allow privilege escalation",
            "description": "Attackers may gain access to a container and uplift its privilege to enable excessive capabilities.",
            "remediation": "If your application does not need it, make sure the allowPrivilegeEscalation field of the securityContext is set to false.",
            "origin": "kubescape",
            "originId": "C-0016",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Configured liveness probe",
            "description": "Liveness probe is intended to ensure that workload remains healthy during its entire execution lifecycle, or otherwise restrat the container. It is highly recommended to define liveness probe for every worker container. This control finds all the pods where the Liveness probe is not configured.",
            "remediation": "Ensure Liveness probes are configured wherever possible.",
            "origin": "kubescape",
            "originId": "C-0056",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Non-root containers",
            "description": "Potential attackers may gain access to a container and leverage its existing privileges to conduct an attack. Therefore, it is not recommended to deploy containers with root privileges unless it is absolutely necessary. This control identifies all the pods running as root or can escalate to root.",
            "remediation": "If your application does not need root privileges, make sure to define the runAsUser or runAsGroup under the PodSecurityContext and use user ID 1000 or higher. Do not turn on allowPrivlegeEscalation bit and make sure runAsNonRoot is true.",
            "origin": "kubescape",
            "originId": "C-0013",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "Host PID/IPC privileges",
            "description": "Containers should be isolated from the host machine as much as possible. The hostPID and hostIPC fields in deployment yaml may allow cross-container influence and may expose the host itself to potentially malicious or destructive actions. This control identifies all pods using hostPID or hostIPC privileges.",
            "remediation": "Remove hostPID and hostIPC from the yaml file(s) privileges unless they are absolutely necessary.",
            "origin": "kubescape",
            "originId": "C-0038",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "Privileged container",
            "description": "Potential attackers may gain access to privileged containers and inherit access to the host resources. Therefore, it is not recommended to deploy privileged containers unless it is absolutely necessary. This control identifies all the privileged Pods.",
            "remediation": "Remove privileged capabilities by setting the securityContext.privileged to false. If you must deploy a Pod as privileged, add other restriction to it, such as network policy, Seccomp etc and still remove all unnecessary capabilities. Use the exception mechanism to remove unnecessary notifications.",
            "origin": "kubescape",
            "originId": "C-0057",
            "passed": false,
            "skipped": false,
            "skipReason": null
          }
        ]
      }
    ],
    "gmp-system": [
      {
        "kind": "Role",
        "namespace": "gmp-system",
        "name": "operator",
        "checks": [
          {
            "severity": "MEDIUM",
            "title": "Manage Kubernetes workloads and pods",
            "description": "Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.",
            "remediation": "Kubernetes workloads resources are only allowed for verbs 'list', 'watch', 'get'",
            "origin": "trivy",
            "originId": "KSV048",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Manage Kubernetes workloads and pods",
            "description": "Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.",
            "remediation": "Kubernetes workloads resources are only allowed for verbs 'list', 'watch', 'get'",
            "origin": "trivy",
            "originId": "KSV048",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Manage configmaps",
            "description": "Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.",
            "remediation": "Remove write permission verbs for resource 'configmaps'",
            "origin": "trivy",
            "originId": "KSV049",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Manage configmaps",
            "description": "Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.",
            "remediation": "Remove write permission verbs for resource 'configmaps'",
            "origin": "trivy",
            "originId": "KSV049",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Manage namespace secrets",
            "description": "Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.",
            "remediation": "Manage namespace secrets are not allowed. Remove resource 'secrets' from role",
            "origin": "trivy",
            "originId": "KSV113",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Manage namespace secrets",
            "description": "Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.",
            "remediation": "Manage namespace secrets are not allowed. Remove resource 'secrets' from role",
            "origin": "trivy",
            "originId": "KSV113",
            "passed": false,
            "skipped": false,
            "skipReason": null
          }
        ]
      },
      {
        "kind": "StatefulSet",
        "namespace": "gmp-system",
        "name": "alertmanager",
        "checks": [
          {
            "severity": "MEDIUM",
            "title": "Seccomp policies disabled",
            "description": "A program inside the container can bypass Seccomp protection policies.",
            "remediation": "Specify seccomp either by annotation or by seccomp profile type having allowed values as per pod security standards",
            "origin": "trivy",
            "originId": "KSV104",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Seccomp policies disabled",
            "description": "A program inside the container can bypass Seccomp protection policies.",
            "remediation": "Specify seccomp either by annotation or by seccomp profile type having allowed values as per pod security standards",
            "origin": "trivy",
            "originId": "KSV104",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Seccomp policies disabled",
            "description": "A program inside the container can bypass Seccomp protection policies.",
            "remediation": "Specify seccomp either by annotation or by seccomp profile type having allowed values as per pod security standards",
            "origin": "trivy",
            "originId": "KSV104",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "config-init The container is running with a low user ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "config-init The container running with a low group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "alertmanager The container is running with a low user ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "alertmanager The container running with a low group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "config-reloader The container is running with a low user ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "config-reloader The container running with a low group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "config-init The pod has a container with a writable root filesystem",
            "description": "Makes sure that all pods have a security context with read only filesystem set",
            "remediation": "Set securityContext.readOnlyRootFilesystem to true",
            "origin": "kube-score",
            "originId": "container-security-context-readonlyrootfilesystem",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "alertmanager The pod has a container with a writable root filesystem",
            "description": "Makes sure that all pods have a security context with read only filesystem set",
            "remediation": "Set securityContext.readOnlyRootFilesystem to true",
            "origin": "kube-score",
            "originId": "container-security-context-readonlyrootfilesystem",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "config-reloader The pod has a container with a writable root filesystem",
            "description": "Makes sure that all pods have a security context with read only filesystem set",
            "remediation": "Set securityContext.readOnlyRootFilesystem to true",
            "origin": "kube-score",
            "originId": "container-security-context-readonlyrootfilesystem",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": " The pod does not have a matching NetworkPolicy",
            "description": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "remediation": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect.",
            "origin": "kube-score",
            "originId": "pod-networkpolicy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "config-init CPU limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "config-init Memory limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.memory",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "config-init CPU request is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource requests are recommended to make sure that the application can start and run without crashing. Set resources.requests.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "config-init Memory request is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource requests are recommended to make sure that the application can start and run without crashing. Set resources.requests.memory",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "alertmanager CPU limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "config-reloader CPU limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "config-init ImagePullPolicy is not set to Always",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want.",
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "alertmanager ImagePullPolicy is not set to Always",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want.",
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "config-reloader ImagePullPolicy is not set to Always",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want.",
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": " Container is missing a readinessProbe",
            "description": "Makes sure that all Pods have safe probe configurations",
            "remediation": "A readinessProbe should be used to indicate when the service is ready to receive traffic. Without it, the Pod is risking to receive traffic before it has booted. It's also used during rollouts, and can prevent downtime if a new version of the application is failing.",
            "origin": "kube-score",
            "originId": "pod-probes",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "CRITICAL",
            "title": " Pod Topology Spread Constraints",
            "description": "Pod Topology Spread Constraints",
            "remediation": "No Pod Topology Spread Constraints set, kube-scheduler defaults assumed",
            "origin": "kube-score",
            "originId": "pod-topology-spread-constraints",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "config-init Ephemeral Storage limit is not set",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage",
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "alertmanager Ephemeral Storage limit is not set",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage",
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "config-reloader Ephemeral Storage limit is not set",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage",
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "config-init The container is running with a low user ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "config-init The container running with a low group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "alertmanager The container is running with a low user ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "alertmanager The container running with a low group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "config-reloader The container is running with a low user ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "config-reloader The container running with a low group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "config-init The pod has a container with a writable root filesystem",
            "description": "Makes sure that all pods have a security context with read only filesystem set",
            "remediation": "Set securityContext.readOnlyRootFilesystem to true",
            "origin": "kube-score",
            "originId": "container-security-context-readonlyrootfilesystem",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "alertmanager The pod has a container with a writable root filesystem",
            "description": "Makes sure that all pods have a security context with read only filesystem set",
            "remediation": "Set securityContext.readOnlyRootFilesystem to true",
            "origin": "kube-score",
            "originId": "container-security-context-readonlyrootfilesystem",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "config-reloader The pod has a container with a writable root filesystem",
            "description": "Makes sure that all pods have a security context with read only filesystem set",
            "remediation": "Set securityContext.readOnlyRootFilesystem to true",
            "origin": "kube-score",
            "originId": "container-security-context-readonlyrootfilesystem",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": " The pod does not have a matching NetworkPolicy",
            "description": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "remediation": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect.",
            "origin": "kube-score",
            "originId": "pod-networkpolicy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "config-init CPU limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "config-init Memory limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.memory",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "config-init CPU request is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource requests are recommended to make sure that the application can start and run without crashing. Set resources.requests.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "config-init Memory request is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource requests are recommended to make sure that the application can start and run without crashing. Set resources.requests.memory",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "alertmanager CPU limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "config-reloader CPU limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "config-init ImagePullPolicy is not set to Always",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want.",
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "alertmanager ImagePullPolicy is not set to Always",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want.",
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "config-reloader ImagePullPolicy is not set to Always",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want.",
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": " Container is missing a readinessProbe",
            "description": "Makes sure that all Pods have safe probe configurations",
            "remediation": "A readinessProbe should be used to indicate when the service is ready to receive traffic. Without it, the Pod is risking to receive traffic before it has booted. It's also used during rollouts, and can prevent downtime if a new version of the application is failing.",
            "origin": "kube-score",
            "originId": "pod-probes",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "CRITICAL",
            "title": " Pod Topology Spread Constraints",
            "description": "Pod Topology Spread Constraints",
            "remediation": "No Pod Topology Spread Constraints set, kube-scheduler defaults assumed",
            "origin": "kube-score",
            "originId": "pod-topology-spread-constraints",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "config-init Ephemeral Storage limit is not set",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage",
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "alertmanager Ephemeral Storage limit is not set",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage",
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "config-reloader Ephemeral Storage limit is not set",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage",
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Ingress and Egress blocked",
            "description": "Disable Ingress and Egress traffic on all pods wherever possible. It is recommended to define restrictive network policy on all new pods, and then enable sources/destinations that this pod must communicate with.",
            "remediation": "Define a network policy that restricts ingress and egress connections.",
            "origin": "kubescape",
            "originId": "C-0030",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "Resources CPU limit and request",
            "description": "This control identifies all Pods for which the CPU limit is not set.",
            "remediation": "Set the CPU limit or use exception mechanism to avoid unnecessary notifications.",
            "origin": "kubescape",
            "originId": "C-0050",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "Resource limits",
            "description": "CPU and memory resources should have a limit set for every container or a namespace to prevent resource exhaustion. This control identifies all the pods without resource limit definitions by checking their yaml definition file as well as their namespace LimitRange objects. It is also recommended to use ResourceQuota object to restrict overall namespace resources, but this is not verified by this control.",
            "remediation": "Define LimitRange and Resource Limits in the namespace or in the deployment/pod manifests.",
            "origin": "kubescape",
            "originId": "C-0009",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Automatic mapping of service account",
            "description": "Potential attacker may gain access to a pod and steal its service account token. Therefore, it is recommended to disable automatic mapping of the service account tokens in service account configuration and enable it only for pods that need to use them.",
            "remediation": "Disable automatic mounting of service account tokens to pods either at the service account level or at the individual pod level, by specifying the automountServiceAccountToken: false. Note that pod level takes precedence.",
            "origin": "kubescape",
            "originId": "C-0034",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Configured liveness probe",
            "description": "Liveness probe is intended to ensure that workload remains healthy during its entire execution lifecycle, or otherwise restrat the container. It is highly recommended to define liveness probe for every worker container. This control finds all the pods where the Liveness probe is not configured.",
            "remediation": "Ensure Liveness probes are configured wherever possible.",
            "origin": "kubescape",
            "originId": "C-0056",
            "passed": false,
            "skipped": false,
            "skipReason": null
          }
        ]
      },
      {
        "kind": "ReplicaSet",
        "namespace": "gmp-system",
        "name": "gmp-operator-5689b4b8fd",
        "checks": [
          {
            "severity": "MEDIUM",
            "title": "operator Ephemeral Storage limit is not set",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage",
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": " Container is missing a readinessProbe",
            "description": "Makes sure that all Pods have safe probe configurations",
            "remediation": "A readinessProbe should be used to indicate when the service is ready to receive traffic. Without it, the Pod is risking to receive traffic before it has booted. It's also used during rollouts, and can prevent downtime if a new version of the application is failing.",
            "origin": "kube-score",
            "originId": "pod-probes",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "CRITICAL",
            "title": " Pod Topology Spread Constraints",
            "description": "Pod Topology Spread Constraints",
            "remediation": "No Pod Topology Spread Constraints set, kube-scheduler defaults assumed",
            "origin": "kube-score",
            "originId": "pod-topology-spread-constraints",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "operator The container is running with a low user ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "operator The container running with a low group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "operator The pod has a container with a writable root filesystem",
            "description": "Makes sure that all pods have a security context with read only filesystem set",
            "remediation": "Set securityContext.readOnlyRootFilesystem to true",
            "origin": "kube-score",
            "originId": "container-security-context-readonlyrootfilesystem",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "operator CPU limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "operator ImagePullPolicy is not set to Always",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want.",
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": " The pod does not have a matching NetworkPolicy",
            "description": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "remediation": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect.",
            "origin": "kube-score",
            "originId": "pod-networkpolicy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "operator CPU limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "operator ImagePullPolicy is not set to Always",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want.",
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": " The pod does not have a matching NetworkPolicy",
            "description": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "remediation": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect.",
            "origin": "kube-score",
            "originId": "pod-networkpolicy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "operator Ephemeral Storage limit is not set",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage",
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": " Container is missing a readinessProbe",
            "description": "Makes sure that all Pods have safe probe configurations",
            "remediation": "A readinessProbe should be used to indicate when the service is ready to receive traffic. Without it, the Pod is risking to receive traffic before it has booted. It's also used during rollouts, and can prevent downtime if a new version of the application is failing.",
            "origin": "kube-score",
            "originId": "pod-probes",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "CRITICAL",
            "title": " Pod Topology Spread Constraints",
            "description": "Pod Topology Spread Constraints",
            "remediation": "No Pod Topology Spread Constraints set, kube-scheduler defaults assumed",
            "origin": "kube-score",
            "originId": "pod-topology-spread-constraints",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "operator The container is running with a low user ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "operator The container running with a low group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "operator The pod has a container with a writable root filesystem",
            "description": "Makes sure that all pods have a security context with read only filesystem set",
            "remediation": "Set securityContext.readOnlyRootFilesystem to true",
            "origin": "kube-score",
            "originId": "container-security-context-readonlyrootfilesystem",
            "passed": false,
            "skipped": false,
            "skipReason": null
          }
        ]
      },
      {
        "kind": "Deployment",
        "namespace": "gmp-system",
        "name": "gmp-operator",
        "checks": [
          {
            "severity": "MEDIUM",
            "title": "Seccomp policies disabled",
            "description": "A program inside the container can bypass Seccomp protection policies.",
            "remediation": "Specify seccomp either by annotation or by seccomp profile type having allowed values as per pod security standards",
            "origin": "trivy",
            "originId": "KSV104",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Ingress and Egress blocked",
            "description": "Disable Ingress and Egress traffic on all pods wherever possible. It is recommended to define restrictive network policy on all new pods, and then enable sources/destinations that this pod must communicate with.",
            "remediation": "Define a network policy that restricts ingress and egress connections.",
            "origin": "kubescape",
            "originId": "C-0030",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "Resources CPU limit and request",
            "description": "This control identifies all Pods for which the CPU limit is not set.",
            "remediation": "Set the CPU limit or use exception mechanism to avoid unnecessary notifications.",
            "origin": "kubescape",
            "originId": "C-0050",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "Resource limits",
            "description": "CPU and memory resources should have a limit set for every container or a namespace to prevent resource exhaustion. This control identifies all the pods without resource limit definitions by checking their yaml definition file as well as their namespace LimitRange objects. It is also recommended to use ResourceQuota object to restrict overall namespace resources, but this is not verified by this control.",
            "remediation": "Define LimitRange and Resource Limits in the namespace or in the deployment/pod manifests.",
            "origin": "kubescape",
            "originId": "C-0009",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Configured liveness probe",
            "description": "Liveness probe is intended to ensure that workload remains healthy during its entire execution lifecycle, or otherwise restrat the container. It is highly recommended to define liveness probe for every worker container. This control finds all the pods where the Liveness probe is not configured.",
            "remediation": "Ensure Liveness probes are configured wherever possible.",
            "origin": "kubescape",
            "originId": "C-0056",
            "passed": false,
            "skipped": false,
            "skipReason": null
          }
        ]
      },
      {
        "kind": "DaemonSet",
        "namespace": "gmp-system",
        "name": "collector",
        "checks": [
          {
            "severity": "MEDIUM",
            "title": "Seccomp policies disabled",
            "description": "A program inside the container can bypass Seccomp protection policies.",
            "remediation": "Specify seccomp either by annotation or by seccomp profile type having allowed values as per pod security standards",
            "origin": "trivy",
            "originId": "KSV104",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Seccomp policies disabled",
            "description": "A program inside the container can bypass Seccomp protection policies.",
            "remediation": "Specify seccomp either by annotation or by seccomp profile type having allowed values as per pod security standards",
            "origin": "trivy",
            "originId": "KSV104",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Seccomp policies disabled",
            "description": "A program inside the container can bypass Seccomp protection policies.",
            "remediation": "Specify seccomp either by annotation or by seccomp profile type having allowed values as per pod security standards",
            "origin": "trivy",
            "originId": "KSV104",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "config-init CPU limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "config-init Memory limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.memory",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "config-init CPU request is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource requests are recommended to make sure that the application can start and run without crashing. Set resources.requests.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "config-init Memory request is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource requests are recommended to make sure that the application can start and run without crashing. Set resources.requests.memory",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "prometheus CPU limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "config-reloader CPU limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "config-init ImagePullPolicy is not set to Always",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want.",
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "prometheus ImagePullPolicy is not set to Always",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want.",
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "config-reloader ImagePullPolicy is not set to Always",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want.",
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": " The pod does not have a matching NetworkPolicy",
            "description": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "remediation": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect.",
            "origin": "kube-score",
            "originId": "pod-networkpolicy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "config-init Ephemeral Storage limit is not set",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage",
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "prometheus Ephemeral Storage limit is not set",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage",
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "config-reloader Ephemeral Storage limit is not set",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage",
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "CRITICAL",
            "title": " The pod is not targeted by a service, skipping probe checks.",
            "description": "Makes sure that all Pods have safe probe configurations",
            "remediation": "",
            "origin": "kube-score",
            "originId": "pod-probes",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "CRITICAL",
            "title": " Pod Topology Spread Constraints",
            "description": "Pod Topology Spread Constraints",
            "remediation": "No Pod Topology Spread Constraints set, kube-scheduler defaults assumed",
            "origin": "kube-score",
            "originId": "pod-topology-spread-constraints",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "config-init The container is running with a low user ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "config-init The container running with a low group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "prometheus The container is running with a low user ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "prometheus The container running with a low group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "config-reloader The container is running with a low user ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "config-reloader The container running with a low group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "config-init The pod has a container with a writable root filesystem",
            "description": "Makes sure that all pods have a security context with read only filesystem set",
            "remediation": "Set securityContext.readOnlyRootFilesystem to true",
            "origin": "kube-score",
            "originId": "container-security-context-readonlyrootfilesystem",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "prometheus The pod has a container with a writable root filesystem",
            "description": "Makes sure that all pods have a security context with read only filesystem set",
            "remediation": "Set securityContext.readOnlyRootFilesystem to true",
            "origin": "kube-score",
            "originId": "container-security-context-readonlyrootfilesystem",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "config-reloader The pod has a container with a writable root filesystem",
            "description": "Makes sure that all pods have a security context with read only filesystem set",
            "remediation": "Set securityContext.readOnlyRootFilesystem to true",
            "origin": "kube-score",
            "originId": "container-security-context-readonlyrootfilesystem",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "CRITICAL",
            "title": " Pod Topology Spread Constraints",
            "description": "Pod Topology Spread Constraints",
            "remediation": "No Pod Topology Spread Constraints set, kube-scheduler defaults assumed",
            "origin": "kube-score",
            "originId": "pod-topology-spread-constraints",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "config-init Ephemeral Storage limit is not set",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage",
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "prometheus Ephemeral Storage limit is not set",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage",
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "config-reloader Ephemeral Storage limit is not set",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage",
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "CRITICAL",
            "title": " The pod is not targeted by a service, skipping probe checks.",
            "description": "Makes sure that all Pods have safe probe configurations",
            "remediation": "",
            "origin": "kube-score",
            "originId": "pod-probes",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "config-init The pod has a container with a writable root filesystem",
            "description": "Makes sure that all pods have a security context with read only filesystem set",
            "remediation": "Set securityContext.readOnlyRootFilesystem to true",
            "origin": "kube-score",
            "originId": "container-security-context-readonlyrootfilesystem",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "prometheus The pod has a container with a writable root filesystem",
            "description": "Makes sure that all pods have a security context with read only filesystem set",
            "remediation": "Set securityContext.readOnlyRootFilesystem to true",
            "origin": "kube-score",
            "originId": "container-security-context-readonlyrootfilesystem",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "config-reloader The pod has a container with a writable root filesystem",
            "description": "Makes sure that all pods have a security context with read only filesystem set",
            "remediation": "Set securityContext.readOnlyRootFilesystem to true",
            "origin": "kube-score",
            "originId": "container-security-context-readonlyrootfilesystem",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "config-init The container is running with a low user ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "config-init The container running with a low group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "prometheus The container is running with a low user ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "prometheus The container running with a low group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "config-reloader The container is running with a low user ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "config-reloader The container running with a low group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "config-init CPU limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "config-init Memory limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.memory",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "config-init CPU request is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource requests are recommended to make sure that the application can start and run without crashing. Set resources.requests.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "config-init Memory request is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource requests are recommended to make sure that the application can start and run without crashing. Set resources.requests.memory",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "prometheus CPU limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "config-reloader CPU limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "config-init ImagePullPolicy is not set to Always",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want.",
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "prometheus ImagePullPolicy is not set to Always",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want.",
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "config-reloader ImagePullPolicy is not set to Always",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want.",
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": " The pod does not have a matching NetworkPolicy",
            "description": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "remediation": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect.",
            "origin": "kube-score",
            "originId": "pod-networkpolicy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Ingress and Egress blocked",
            "description": "Disable Ingress and Egress traffic on all pods wherever possible. It is recommended to define restrictive network policy on all new pods, and then enable sources/destinations that this pod must communicate with.",
            "remediation": "Define a network policy that restricts ingress and egress connections.",
            "origin": "kubescape",
            "originId": "C-0030",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "Resources CPU limit and request",
            "description": "This control identifies all Pods for which the CPU limit is not set.",
            "remediation": "Set the CPU limit or use exception mechanism to avoid unnecessary notifications.",
            "origin": "kubescape",
            "originId": "C-0050",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "Resource limits",
            "description": "CPU and memory resources should have a limit set for every container or a namespace to prevent resource exhaustion. This control identifies all the pods without resource limit definitions by checking their yaml definition file as well as their namespace LimitRange objects. It is also recommended to use ResourceQuota object to restrict overall namespace resources, but this is not verified by this control.",
            "remediation": "Define LimitRange and Resource Limits in the namespace or in the deployment/pod manifests.",
            "origin": "kubescape",
            "originId": "C-0009",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Configured liveness probe",
            "description": "Liveness probe is intended to ensure that workload remains healthy during its entire execution lifecycle, or otherwise restrat the container. It is highly recommended to define liveness probe for every worker container. This control finds all the pods where the Liveness probe is not configured.",
            "remediation": "Ensure Liveness probes are configured wherever possible.",
            "origin": "kubescape",
            "originId": "C-0056",
            "passed": false,
            "skipped": false,
            "skipReason": null
          }
        ]
      },
      {
        "kind": "ServiceAccount",
        "namespace": "gmp-system",
        "name": "operator",
        "checks": [
          {
            "severity": "HIGH",
            "title": "List Kubernetes secrets",
            "description": "Attackers who have permissions to access secrets can access sensitive information that might include credentials to various services. This control determines which user, group or service account can list/get secrets.",
            "remediation": "Monitor and approve list of users, groups and service accounts that can access secrets. Use exception mechanism to prevent repetitive the notifications.",
            "origin": "kubescape",
            "originId": "C-0015",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Access container service account",
            "description": "Attackers who obtain access to a pod can use its SA token to communicate with KubeAPI server. All pods with SA token mounted (if such token has a Role or a ClusterRole binding) are considerred potentially dangerous.",
            "remediation": "Verify that RBAC is enabled. Follow the least privilege principle and ensure that only necessary pods have SA token mounted into them.",
            "origin": "kubescape",
            "originId": "C-0053",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Automatic mapping of service account",
            "description": "Potential attacker may gain access to a pod and steal its service account token. Therefore, it is recommended to disable automatic mapping of the service account tokens in service account configuration and enable it only for pods that need to use them.",
            "remediation": "Disable automatic mounting of service account tokens to pods either at the service account level or at the individual pod level, by specifying the automountServiceAccountToken: false. Note that pod level takes precedence.",
            "origin": "kubescape",
            "originId": "C-0034",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Access container service account",
            "description": "Attackers who obtain access to a pod can use its SA token to communicate with KubeAPI server. All pods with SA token mounted (if such token has a Role or a ClusterRole binding) are considerred potentially dangerous.",
            "remediation": "Verify that RBAC is enabled. Follow the least privilege principle and ensure that only necessary pods have SA token mounted into them.",
            "origin": "kubescape",
            "originId": "C-0053",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Data Destruction",
            "description": "Attackers may attempt to destroy data and resources in the cluster. This includes deleting deployments, configurations, storage, and compute resources. This control identifies all subjects that can delete resources.",
            "remediation": "You should follow the least privilege principle and minimize the number of subjects that can delete resources.",
            "origin": "kubescape",
            "originId": "C-0007",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "List Kubernetes secrets",
            "description": "Attackers who have permissions to access secrets can access sensitive information that might include credentials to various services. This control determines which user, group or service account can list/get secrets.",
            "remediation": "Monitor and approve list of users, groups and service accounts that can access secrets. Use exception mechanism to prevent repetitive the notifications.",
            "origin": "kubescape",
            "originId": "C-0015",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Access container service account",
            "description": "Attackers who obtain access to a pod can use its SA token to communicate with KubeAPI server. All pods with SA token mounted (if such token has a Role or a ClusterRole binding) are considerred potentially dangerous.",
            "remediation": "Verify that RBAC is enabled. Follow the least privilege principle and ensure that only necessary pods have SA token mounted into them.",
            "origin": "kubescape",
            "originId": "C-0053",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "List Kubernetes secrets",
            "description": "Attackers who have permissions to access secrets can access sensitive information that might include credentials to various services. This control determines which user, group or service account can list/get secrets.",
            "remediation": "Monitor and approve list of users, groups and service accounts that can access secrets. Use exception mechanism to prevent repetitive the notifications.",
            "origin": "kubescape",
            "originId": "C-0015",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Access container service account",
            "description": "Attackers who obtain access to a pod can use its SA token to communicate with KubeAPI server. All pods with SA token mounted (if such token has a Role or a ClusterRole binding) are considerred potentially dangerous.",
            "remediation": "Verify that RBAC is enabled. Follow the least privilege principle and ensure that only necessary pods have SA token mounted into them.",
            "origin": "kubescape",
            "originId": "C-0053",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Data Destruction",
            "description": "Attackers may attempt to destroy data and resources in the cluster. This includes deleting deployments, configurations, storage, and compute resources. This control identifies all subjects that can delete resources.",
            "remediation": "You should follow the least privilege principle and minimize the number of subjects that can delete resources.",
            "origin": "kubescape",
            "originId": "C-0007",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "List Kubernetes secrets",
            "description": "Attackers who have permissions to access secrets can access sensitive information that might include credentials to various services. This control determines which user, group or service account can list/get secrets.",
            "remediation": "Monitor and approve list of users, groups and service accounts that can access secrets. Use exception mechanism to prevent repetitive the notifications.",
            "origin": "kubescape",
            "originId": "C-0015",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Access container service account",
            "description": "Attackers who obtain access to a pod can use its SA token to communicate with KubeAPI server. All pods with SA token mounted (if such token has a Role or a ClusterRole binding) are considerred potentially dangerous.",
            "remediation": "Verify that RBAC is enabled. Follow the least privilege principle and ensure that only necessary pods have SA token mounted into them.",
            "origin": "kubescape",
            "originId": "C-0053",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Automatic mapping of service account",
            "description": "Potential attacker may gain access to a pod and steal its service account token. Therefore, it is recommended to disable automatic mapping of the service account tokens in service account configuration and enable it only for pods that need to use them.",
            "remediation": "Disable automatic mounting of service account tokens to pods either at the service account level or at the individual pod level, by specifying the automountServiceAccountToken: false. Note that pod level takes precedence.",
            "origin": "kubescape",
            "originId": "C-0034",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Access container service account",
            "description": "Attackers who obtain access to a pod can use its SA token to communicate with KubeAPI server. All pods with SA token mounted (if such token has a Role or a ClusterRole binding) are considerred potentially dangerous.",
            "remediation": "Verify that RBAC is enabled. Follow the least privilege principle and ensure that only necessary pods have SA token mounted into them.",
            "origin": "kubescape",
            "originId": "C-0053",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Data Destruction",
            "description": "Attackers may attempt to destroy data and resources in the cluster. This includes deleting deployments, configurations, storage, and compute resources. This control identifies all subjects that can delete resources.",
            "remediation": "You should follow the least privilege principle and minimize the number of subjects that can delete resources.",
            "origin": "kubescape",
            "originId": "C-0007",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "List Kubernetes secrets",
            "description": "Attackers who have permissions to access secrets can access sensitive information that might include credentials to various services. This control determines which user, group or service account can list/get secrets.",
            "remediation": "Monitor and approve list of users, groups and service accounts that can access secrets. Use exception mechanism to prevent repetitive the notifications.",
            "origin": "kubescape",
            "originId": "C-0015",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Access container service account",
            "description": "Attackers who obtain access to a pod can use its SA token to communicate with KubeAPI server. All pods with SA token mounted (if such token has a Role or a ClusterRole binding) are considerred potentially dangerous.",
            "remediation": "Verify that RBAC is enabled. Follow the least privilege principle and ensure that only necessary pods have SA token mounted into them.",
            "origin": "kubescape",
            "originId": "C-0053",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "List Kubernetes secrets",
            "description": "Attackers who have permissions to access secrets can access sensitive information that might include credentials to various services. This control determines which user, group or service account can list/get secrets.",
            "remediation": "Monitor and approve list of users, groups and service accounts that can access secrets. Use exception mechanism to prevent repetitive the notifications.",
            "origin": "kubescape",
            "originId": "C-0015",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Access container service account",
            "description": "Attackers who obtain access to a pod can use its SA token to communicate with KubeAPI server. All pods with SA token mounted (if such token has a Role or a ClusterRole binding) are considerred potentially dangerous.",
            "remediation": "Verify that RBAC is enabled. Follow the least privilege principle and ensure that only necessary pods have SA token mounted into them.",
            "origin": "kubescape",
            "originId": "C-0053",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Data Destruction",
            "description": "Attackers may attempt to destroy data and resources in the cluster. This includes deleting deployments, configurations, storage, and compute resources. This control identifies all subjects that can delete resources.",
            "remediation": "You should follow the least privilege principle and minimize the number of subjects that can delete resources.",
            "origin": "kubescape",
            "originId": "C-0007",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "List Kubernetes secrets",
            "description": "Attackers who have permissions to access secrets can access sensitive information that might include credentials to various services. This control determines which user, group or service account can list/get secrets.",
            "remediation": "Monitor and approve list of users, groups and service accounts that can access secrets. Use exception mechanism to prevent repetitive the notifications.",
            "origin": "kubescape",
            "originId": "C-0015",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Access container service account",
            "description": "Attackers who obtain access to a pod can use its SA token to communicate with KubeAPI server. All pods with SA token mounted (if such token has a Role or a ClusterRole binding) are considerred potentially dangerous.",
            "remediation": "Verify that RBAC is enabled. Follow the least privilege principle and ensure that only necessary pods have SA token mounted into them.",
            "origin": "kubescape",
            "originId": "C-0053",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Automatic mapping of service account",
            "description": "Potential attacker may gain access to a pod and steal its service account token. Therefore, it is recommended to disable automatic mapping of the service account tokens in service account configuration and enable it only for pods that need to use them.",
            "remediation": "Disable automatic mounting of service account tokens to pods either at the service account level or at the individual pod level, by specifying the automountServiceAccountToken: false. Note that pod level takes precedence.",
            "origin": "kubescape",
            "originId": "C-0034",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Access container service account",
            "description": "Attackers who obtain access to a pod can use its SA token to communicate with KubeAPI server. All pods with SA token mounted (if such token has a Role or a ClusterRole binding) are considerred potentially dangerous.",
            "remediation": "Verify that RBAC is enabled. Follow the least privilege principle and ensure that only necessary pods have SA token mounted into them.",
            "origin": "kubescape",
            "originId": "C-0053",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Data Destruction",
            "description": "Attackers may attempt to destroy data and resources in the cluster. This includes deleting deployments, configurations, storage, and compute resources. This control identifies all subjects that can delete resources.",
            "remediation": "You should follow the least privilege principle and minimize the number of subjects that can delete resources.",
            "origin": "kubescape",
            "originId": "C-0007",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "List Kubernetes secrets",
            "description": "Attackers who have permissions to access secrets can access sensitive information that might include credentials to various services. This control determines which user, group or service account can list/get secrets.",
            "remediation": "Monitor and approve list of users, groups and service accounts that can access secrets. Use exception mechanism to prevent repetitive the notifications.",
            "origin": "kubescape",
            "originId": "C-0015",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Access container service account",
            "description": "Attackers who obtain access to a pod can use its SA token to communicate with KubeAPI server. All pods with SA token mounted (if such token has a Role or a ClusterRole binding) are considerred potentially dangerous.",
            "remediation": "Verify that RBAC is enabled. Follow the least privilege principle and ensure that only necessary pods have SA token mounted into them.",
            "origin": "kubescape",
            "originId": "C-0053",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "List Kubernetes secrets",
            "description": "Attackers who have permissions to access secrets can access sensitive information that might include credentials to various services. This control determines which user, group or service account can list/get secrets.",
            "remediation": "Monitor and approve list of users, groups and service accounts that can access secrets. Use exception mechanism to prevent repetitive the notifications.",
            "origin": "kubescape",
            "originId": "C-0015",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Access container service account",
            "description": "Attackers who obtain access to a pod can use its SA token to communicate with KubeAPI server. All pods with SA token mounted (if such token has a Role or a ClusterRole binding) are considerred potentially dangerous.",
            "remediation": "Verify that RBAC is enabled. Follow the least privilege principle and ensure that only necessary pods have SA token mounted into them.",
            "origin": "kubescape",
            "originId": "C-0053",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Data Destruction",
            "description": "Attackers may attempt to destroy data and resources in the cluster. This includes deleting deployments, configurations, storage, and compute resources. This control identifies all subjects that can delete resources.",
            "remediation": "You should follow the least privilege principle and minimize the number of subjects that can delete resources.",
            "origin": "kubescape",
            "originId": "C-0007",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "List Kubernetes secrets",
            "description": "Attackers who have permissions to access secrets can access sensitive information that might include credentials to various services. This control determines which user, group or service account can list/get secrets.",
            "remediation": "Monitor and approve list of users, groups and service accounts that can access secrets. Use exception mechanism to prevent repetitive the notifications.",
            "origin": "kubescape",
            "originId": "C-0015",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Access container service account",
            "description": "Attackers who obtain access to a pod can use its SA token to communicate with KubeAPI server. All pods with SA token mounted (if such token has a Role or a ClusterRole binding) are considerred potentially dangerous.",
            "remediation": "Verify that RBAC is enabled. Follow the least privilege principle and ensure that only necessary pods have SA token mounted into them.",
            "origin": "kubescape",
            "originId": "C-0053",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Automatic mapping of service account",
            "description": "Potential attacker may gain access to a pod and steal its service account token. Therefore, it is recommended to disable automatic mapping of the service account tokens in service account configuration and enable it only for pods that need to use them.",
            "remediation": "Disable automatic mounting of service account tokens to pods either at the service account level or at the individual pod level, by specifying the automountServiceAccountToken: false. Note that pod level takes precedence.",
            "origin": "kubescape",
            "originId": "C-0034",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Access container service account",
            "description": "Attackers who obtain access to a pod can use its SA token to communicate with KubeAPI server. All pods with SA token mounted (if such token has a Role or a ClusterRole binding) are considerred potentially dangerous.",
            "remediation": "Verify that RBAC is enabled. Follow the least privilege principle and ensure that only necessary pods have SA token mounted into them.",
            "origin": "kubescape",
            "originId": "C-0053",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Data Destruction",
            "description": "Attackers may attempt to destroy data and resources in the cluster. This includes deleting deployments, configurations, storage, and compute resources. This control identifies all subjects that can delete resources.",
            "remediation": "You should follow the least privilege principle and minimize the number of subjects that can delete resources.",
            "origin": "kubescape",
            "originId": "C-0007",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "List Kubernetes secrets",
            "description": "Attackers who have permissions to access secrets can access sensitive information that might include credentials to various services. This control determines which user, group or service account can list/get secrets.",
            "remediation": "Monitor and approve list of users, groups and service accounts that can access secrets. Use exception mechanism to prevent repetitive the notifications.",
            "origin": "kubescape",
            "originId": "C-0015",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Access container service account",
            "description": "Attackers who obtain access to a pod can use its SA token to communicate with KubeAPI server. All pods with SA token mounted (if such token has a Role or a ClusterRole binding) are considerred potentially dangerous.",
            "remediation": "Verify that RBAC is enabled. Follow the least privilege principle and ensure that only necessary pods have SA token mounted into them.",
            "origin": "kubescape",
            "originId": "C-0053",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "List Kubernetes secrets",
            "description": "Attackers who have permissions to access secrets can access sensitive information that might include credentials to various services. This control determines which user, group or service account can list/get secrets.",
            "remediation": "Monitor and approve list of users, groups and service accounts that can access secrets. Use exception mechanism to prevent repetitive the notifications.",
            "origin": "kubescape",
            "originId": "C-0015",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Access container service account",
            "description": "Attackers who obtain access to a pod can use its SA token to communicate with KubeAPI server. All pods with SA token mounted (if such token has a Role or a ClusterRole binding) are considerred potentially dangerous.",
            "remediation": "Verify that RBAC is enabled. Follow the least privilege principle and ensure that only necessary pods have SA token mounted into them.",
            "origin": "kubescape",
            "originId": "C-0053",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Data Destruction",
            "description": "Attackers may attempt to destroy data and resources in the cluster. This includes deleting deployments, configurations, storage, and compute resources. This control identifies all subjects that can delete resources.",
            "remediation": "You should follow the least privilege principle and minimize the number of subjects that can delete resources.",
            "origin": "kubescape",
            "originId": "C-0007",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "List Kubernetes secrets",
            "description": "Attackers who have permissions to access secrets can access sensitive information that might include credentials to various services. This control determines which user, group or service account can list/get secrets.",
            "remediation": "Monitor and approve list of users, groups and service accounts that can access secrets. Use exception mechanism to prevent repetitive the notifications.",
            "origin": "kubescape",
            "originId": "C-0015",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Access container service account",
            "description": "Attackers who obtain access to a pod can use its SA token to communicate with KubeAPI server. All pods with SA token mounted (if such token has a Role or a ClusterRole binding) are considerred potentially dangerous.",
            "remediation": "Verify that RBAC is enabled. Follow the least privilege principle and ensure that only necessary pods have SA token mounted into them.",
            "origin": "kubescape",
            "originId": "C-0053",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Automatic mapping of service account",
            "description": "Potential attacker may gain access to a pod and steal its service account token. Therefore, it is recommended to disable automatic mapping of the service account tokens in service account configuration and enable it only for pods that need to use them.",
            "remediation": "Disable automatic mounting of service account tokens to pods either at the service account level or at the individual pod level, by specifying the automountServiceAccountToken: false. Note that pod level takes precedence.",
            "origin": "kubescape",
            "originId": "C-0034",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Access container service account",
            "description": "Attackers who obtain access to a pod can use its SA token to communicate with KubeAPI server. All pods with SA token mounted (if such token has a Role or a ClusterRole binding) are considerred potentially dangerous.",
            "remediation": "Verify that RBAC is enabled. Follow the least privilege principle and ensure that only necessary pods have SA token mounted into them.",
            "origin": "kubescape",
            "originId": "C-0053",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Data Destruction",
            "description": "Attackers may attempt to destroy data and resources in the cluster. This includes deleting deployments, configurations, storage, and compute resources. This control identifies all subjects that can delete resources.",
            "remediation": "You should follow the least privilege principle and minimize the number of subjects that can delete resources.",
            "origin": "kubescape",
            "originId": "C-0007",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "List Kubernetes secrets",
            "description": "Attackers who have permissions to access secrets can access sensitive information that might include credentials to various services. This control determines which user, group or service account can list/get secrets.",
            "remediation": "Monitor and approve list of users, groups and service accounts that can access secrets. Use exception mechanism to prevent repetitive the notifications.",
            "origin": "kubescape",
            "originId": "C-0015",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Access container service account",
            "description": "Attackers who obtain access to a pod can use its SA token to communicate with KubeAPI server. All pods with SA token mounted (if such token has a Role or a ClusterRole binding) are considerred potentially dangerous.",
            "remediation": "Verify that RBAC is enabled. Follow the least privilege principle and ensure that only necessary pods have SA token mounted into them.",
            "origin": "kubescape",
            "originId": "C-0053",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "List Kubernetes secrets",
            "description": "Attackers who have permissions to access secrets can access sensitive information that might include credentials to various services. This control determines which user, group or service account can list/get secrets.",
            "remediation": "Monitor and approve list of users, groups and service accounts that can access secrets. Use exception mechanism to prevent repetitive the notifications.",
            "origin": "kubescape",
            "originId": "C-0015",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Access container service account",
            "description": "Attackers who obtain access to a pod can use its SA token to communicate with KubeAPI server. All pods with SA token mounted (if such token has a Role or a ClusterRole binding) are considerred potentially dangerous.",
            "remediation": "Verify that RBAC is enabled. Follow the least privilege principle and ensure that only necessary pods have SA token mounted into them.",
            "origin": "kubescape",
            "originId": "C-0053",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Data Destruction",
            "description": "Attackers may attempt to destroy data and resources in the cluster. This includes deleting deployments, configurations, storage, and compute resources. This control identifies all subjects that can delete resources.",
            "remediation": "You should follow the least privilege principle and minimize the number of subjects that can delete resources.",
            "origin": "kubescape",
            "originId": "C-0007",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "List Kubernetes secrets",
            "description": "Attackers who have permissions to access secrets can access sensitive information that might include credentials to various services. This control determines which user, group or service account can list/get secrets.",
            "remediation": "Monitor and approve list of users, groups and service accounts that can access secrets. Use exception mechanism to prevent repetitive the notifications.",
            "origin": "kubescape",
            "originId": "C-0015",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Access container service account",
            "description": "Attackers who obtain access to a pod can use its SA token to communicate with KubeAPI server. All pods with SA token mounted (if such token has a Role or a ClusterRole binding) are considerred potentially dangerous.",
            "remediation": "Verify that RBAC is enabled. Follow the least privilege principle and ensure that only necessary pods have SA token mounted into them.",
            "origin": "kubescape",
            "originId": "C-0053",
            "passed": false,
            "skipped": false,
            "skipReason": null
          }
        ]
      },
      {
        "kind": "ServiceAccount",
        "namespace": "gmp-system",
        "name": "default",
        "checks": [
          {
            "severity": "MEDIUM",
            "title": "Automatic mapping of service account",
            "description": "Potential attacker may gain access to a pod and steal its service account token. Therefore, it is recommended to disable automatic mapping of the service account tokens in service account configuration and enable it only for pods that need to use them.",
            "remediation": "Disable automatic mounting of service account tokens to pods either at the service account level or at the individual pod level, by specifying the automountServiceAccountToken: false. Note that pod level takes precedence.",
            "origin": "kubescape",
            "originId": "C-0034",
            "passed": false,
            "skipped": false,
            "skipReason": null
          }
        ]
      },
      {
        "kind": "ServiceAccount",
        "namespace": "gmp-system",
        "name": "collector",
        "checks": [
          {
            "severity": "MEDIUM",
            "title": "Access container service account",
            "description": "Attackers who obtain access to a pod can use its SA token to communicate with KubeAPI server. All pods with SA token mounted (if such token has a Role or a ClusterRole binding) are considerred potentially dangerous.",
            "remediation": "Verify that RBAC is enabled. Follow the least privilege principle and ensure that only necessary pods have SA token mounted into them.",
            "origin": "kubescape",
            "originId": "C-0053",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Automatic mapping of service account",
            "description": "Potential attacker may gain access to a pod and steal its service account token. Therefore, it is recommended to disable automatic mapping of the service account tokens in service account configuration and enable it only for pods that need to use them.",
            "remediation": "Disable automatic mounting of service account tokens to pods either at the service account level or at the individual pod level, by specifying the automountServiceAccountToken: false. Note that pod level takes precedence.",
            "origin": "kubescape",
            "originId": "C-0034",
            "passed": false,
            "skipped": false,
            "skipReason": null
          }
        ]
      },
      {
        "kind": "Deployment",
        "namespace": "gmp-system",
        "name": "rule-evaluator",
        "checks": [
          {
            "severity": "MEDIUM",
            "title": "Seccomp policies disabled",
            "description": "A program inside the container can bypass Seccomp protection policies.",
            "remediation": "Specify seccomp either by annotation or by seccomp profile type having allowed values as per pod security standards",
            "origin": "trivy",
            "originId": "KSV104",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Seccomp policies disabled",
            "description": "A program inside the container can bypass Seccomp protection policies.",
            "remediation": "Specify seccomp either by annotation or by seccomp profile type having allowed values as per pod security standards",
            "origin": "trivy",
            "originId": "KSV104",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Seccomp policies disabled",
            "description": "A program inside the container can bypass Seccomp protection policies.",
            "remediation": "Specify seccomp either by annotation or by seccomp profile type having allowed values as per pod security standards",
            "origin": "trivy",
            "originId": "KSV104",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Ingress and Egress blocked",
            "description": "Disable Ingress and Egress traffic on all pods wherever possible. It is recommended to define restrictive network policy on all new pods, and then enable sources/destinations that this pod must communicate with.",
            "remediation": "Define a network policy that restricts ingress and egress connections.",
            "origin": "kubescape",
            "originId": "C-0030",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "Resources CPU limit and request",
            "description": "This control identifies all Pods for which the CPU limit is not set.",
            "remediation": "Set the CPU limit or use exception mechanism to avoid unnecessary notifications.",
            "origin": "kubescape",
            "originId": "C-0050",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "HIGH",
            "title": "Resource limits",
            "description": "CPU and memory resources should have a limit set for every container or a namespace to prevent resource exhaustion. This control identifies all the pods without resource limit definitions by checking their yaml definition file as well as their namespace LimitRange objects. It is also recommended to use ResourceQuota object to restrict overall namespace resources, but this is not verified by this control.",
            "remediation": "Define LimitRange and Resource Limits in the namespace or in the deployment/pod manifests.",
            "origin": "kubescape",
            "originId": "C-0009",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "Configured liveness probe",
            "description": "Liveness probe is intended to ensure that workload remains healthy during its entire execution lifecycle, or otherwise restrat the container. It is highly recommended to define liveness probe for every worker container. This control finds all the pods where the Liveness probe is not configured.",
            "remediation": "Ensure Liveness probes are configured wherever possible.",
            "origin": "kubescape",
            "originId": "C-0056",
            "passed": false,
            "skipped": false,
            "skipReason": null
          }
        ]
      },
      {
        "kind": "ReplicaSet",
        "namespace": "gmp-system",
        "name": "rule-evaluator-6674dc785f",
        "checks": [
          {
            "severity": "MEDIUM",
            "title": "config-init CPU limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "config-init Memory limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.memory",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "config-init CPU request is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource requests are recommended to make sure that the application can start and run without crashing. Set resources.requests.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "config-init Memory request is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource requests are recommended to make sure that the application can start and run without crashing. Set resources.requests.memory",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "config-reloader CPU limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "evaluator CPU limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "config-init ImagePullPolicy is not set to Always",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want.",
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "config-reloader ImagePullPolicy is not set to Always",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want.",
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "evaluator ImagePullPolicy is not set to Always",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want.",
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": " The pod does not have a matching NetworkPolicy",
            "description": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "remediation": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect.",
            "origin": "kube-score",
            "originId": "pod-networkpolicy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "config-init Ephemeral Storage limit is not set",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage",
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "config-reloader Ephemeral Storage limit is not set",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage",
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "evaluator Ephemeral Storage limit is not set",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage",
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "CRITICAL",
            "title": " The pod is not targeted by a service, skipping probe checks.",
            "description": "Makes sure that all Pods have safe probe configurations",
            "remediation": "",
            "origin": "kube-score",
            "originId": "pod-probes",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "CRITICAL",
            "title": " Pod Topology Spread Constraints",
            "description": "Pod Topology Spread Constraints",
            "remediation": "No Pod Topology Spread Constraints set, kube-scheduler defaults assumed",
            "origin": "kube-score",
            "originId": "pod-topology-spread-constraints",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "config-init The container is running with a low user ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "config-init The container running with a low group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "config-reloader The container is running with a low user ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "config-reloader The container running with a low group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "evaluator The container is running with a low user ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "evaluator The container running with a low group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "config-init The pod has a container with a writable root filesystem",
            "description": "Makes sure that all pods have a security context with read only filesystem set",
            "remediation": "Set securityContext.readOnlyRootFilesystem to true",
            "origin": "kube-score",
            "originId": "container-security-context-readonlyrootfilesystem",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "config-reloader The pod has a container with a writable root filesystem",
            "description": "Makes sure that all pods have a security context with read only filesystem set",
            "remediation": "Set securityContext.readOnlyRootFilesystem to true",
            "origin": "kube-score",
            "originId": "container-security-context-readonlyrootfilesystem",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "evaluator The pod has a container with a writable root filesystem",
            "description": "Makes sure that all pods have a security context with read only filesystem set",
            "remediation": "Set securityContext.readOnlyRootFilesystem to true",
            "origin": "kube-score",
            "originId": "container-security-context-readonlyrootfilesystem",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "config-init Ephemeral Storage limit is not set",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage",
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "config-reloader Ephemeral Storage limit is not set",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage",
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "evaluator Ephemeral Storage limit is not set",
            "description": "Makes sure all pods have ephemeral-storage requests and limits set",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.ephemeral-storage",
            "origin": "kube-score",
            "originId": "container-ephemeral-storage-request-and-limit",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "CRITICAL",
            "title": " The pod is not targeted by a service, skipping probe checks.",
            "description": "Makes sure that all Pods have safe probe configurations",
            "remediation": "",
            "origin": "kube-score",
            "originId": "pod-probes",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "CRITICAL",
            "title": " Pod Topology Spread Constraints",
            "description": "Pod Topology Spread Constraints",
            "remediation": "No Pod Topology Spread Constraints set, kube-scheduler defaults assumed",
            "origin": "kube-score",
            "originId": "pod-topology-spread-constraints",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "config-init The container is running with a low user ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "config-init The container running with a low group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "config-reloader The container is running with a low user ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "config-reloader The container running with a low group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "evaluator The container is running with a low user ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A userid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsUser to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "evaluator The container running with a low group ID",
            "description": "Makes sure that all pods have a security context with valid UID and GID set ",
            "remediation": "A groupid above 10 000 is recommended to avoid conflicts with the host. Set securityContext.runAsGroup to a value > 10000",
            "origin": "kube-score",
            "originId": "container-security-context-user-group-id",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "config-init The pod has a container with a writable root filesystem",
            "description": "Makes sure that all pods have a security context with read only filesystem set",
            "remediation": "Set securityContext.readOnlyRootFilesystem to true",
            "origin": "kube-score",
            "originId": "container-security-context-readonlyrootfilesystem",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "config-reloader The pod has a container with a writable root filesystem",
            "description": "Makes sure that all pods have a security context with read only filesystem set",
            "remediation": "Set securityContext.readOnlyRootFilesystem to true",
            "origin": "kube-score",
            "originId": "container-security-context-readonlyrootfilesystem",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "evaluator The pod has a container with a writable root filesystem",
            "description": "Makes sure that all pods have a security context with read only filesystem set",
            "remediation": "Set securityContext.readOnlyRootFilesystem to true",
            "origin": "kube-score",
            "originId": "container-security-context-readonlyrootfilesystem",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "config-init CPU limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "config-init Memory limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.memory",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "config-init CPU request is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource requests are recommended to make sure that the application can start and run without crashing. Set resources.requests.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "config-init Memory request is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource requests are recommended to make sure that the application can start and run without crashing. Set resources.requests.memory",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "config-reloader CPU limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "evaluator CPU limit is not set",
            "description": "Makes sure that all pods have resource limits and requests set. The --ignore-container-cpu-limit flag can be used to disable the requirement of having a CPU limit",
            "remediation": "Resource limits are recommended to avoid resource DDOS. Set resources.limits.cpu",
            "origin": "kube-score",
            "originId": "container-resources",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "config-init ImagePullPolicy is not set to Always",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want.",
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "config-reloader ImagePullPolicy is not set to Always",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want.",
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": "evaluator ImagePullPolicy is not set to Always",
            "description": "Makes sure that the pullPolicy is set to Always. This makes sure that imagePullSecrets are always validated.",
            "remediation": "It's recommended to always set the ImagePullPolicy to Always, to make sure that the imagePullSecrets are always correct, and to always get the image you want.",
            "origin": "kube-score",
            "originId": "container-image-pull-policy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          },
          {
            "severity": "MEDIUM",
            "title": " The pod does not have a matching NetworkPolicy",
            "description": "Makes sure that all Pods are targeted by a NetworkPolicy",
            "remediation": "Create a NetworkPolicy that targets this pod to control who/what can communicate with this pod. Note, this feature needs to be supported by the CNI implementation used in the Kubernetes cluster to have an effect.",
            "origin": "kube-score",
            "originId": "pod-networkpolicy",
            "passed": false,
            "skipped": false,
            "skipReason": null
          }
        ]
      }
    ],
    "gke-managed-system": [
      {
        "kind": "ServiceAccount",
        "namespace": "gke-managed-system",
        "name": "default",
        "checks": [
          {
            "severity": "MEDIUM",
            "title": "Automatic mapping of service account",
            "description": "Potential attacker may gain access to a pod and steal its service account token. Therefore, it is recommended to disable automatic mapping of the service account tokens in service account configuration and enable it only for pods that need to use them.",
            "remediation": "Disable automatic mounting of service account tokens to pods either at the service account level or at the individual pod level, by specifying the automountServiceAccountToken: false. Note that pod level takes precedence.",
            "origin": "kubescape",
            "originId": "C-0034",
            "passed": false,
            "skipped": false,
            "skipReason": null
          }
        ]
      }
    ],
    "kube-public": [
      {
        "kind": "Role",
        "namespace": "kube-public",
        "name": "system:controller:bootstrap-signer",
        "checks": [
          {
            "severity": "MEDIUM",
            "title": "Manage configmaps",
            "description": "Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.",
            "remediation": "Remove write permission verbs for resource 'configmaps'",
            "origin": "trivy",
            "originId": "KSV049",
            "passed": false,
            "skipped": false,
            "skipReason": null
          }
        ]
      }
    ]
  },
  "nonNamespacedResources": [
    {
      "kind": "MutatingWebhookConfiguration",
      "namespace": null,
      "name": "warden-mutating.config.common-webhooks.networking.gke.io",
      "checks": [
        {
          "severity": "MEDIUM",
          "title": "Validate admission controller (mutating)",
          "description": "Attackers may use mutating webhooks to intercept and modify all the resources in the cluster. This control lists all mutating webhook configurations that must be verified.",
          "remediation": "Ensure all the webhooks are necessary. Use exception mechanism to prevent repititive notifications.",
          "origin": "kubescape",
          "originId": "C-0039",
          "passed": false,
          "skipped": false,
          "skipReason": null
        }
      ]
    },
    {
      "kind": "Namespace",
      "namespace": null,
      "name": "gmp-public",
      "checks": [
        {
          "severity": "MEDIUM",
          "title": "Cluster internal networking",
          "description": "If no network policy is defined, attackers who gain access to a container may use it to move laterally in the cluster. This control lists namespaces in which no network policy is defined.",
          "remediation": "Define Kubernetes network policies or use alternative products to protect cluster network.",
          "origin": "kubescape",
          "originId": "C-0054",
          "passed": false,
          "skipped": false,
          "skipReason": null
        }
      ]
    },
    {
      "kind": "ClusterRoleBinding",
      "namespace": null,
      "name": "system:public-info-viewer",
      "checks": [
        {
          "severity": "HIGH",
          "title": "Anonymous access enabled",
          "description": "Granting permissions to the system:unauthenticated or system:anonymous user is generally not recommended and can introduce security risks. Allowing unauthenticated access to your Kubernetes cluster can lead to unauthorized access, potential data breaches, and abuse of cluster resources.",
          "remediation": "Review and modify your cluster's RBAC configuration to ensure that only authenticated and authorized users have appropriate permissions based on their roles and responsibilities within your system.",
          "origin": "kubescape",
          "originId": "C-0262",
          "passed": false,
          "skipped": false,
          "skipReason": null
        }
      ]
    },
    {
      "kind": "Namespace",
      "namespace": null,
      "name": "gke-managed-system",
      "checks": [
        {
          "severity": "MEDIUM",
          "title": "Cluster internal networking",
          "description": "If no network policy is defined, attackers who gain access to a container may use it to move laterally in the cluster. This control lists namespaces in which no network policy is defined.",
          "remediation": "Define Kubernetes network policies or use alternative products to protect cluster network.",
          "origin": "kubescape",
          "originId": "C-0054",
          "passed": false,
          "skipped": false,
          "skipReason": null
        }
      ]
    },
    {
      "kind": "MutatingWebhookConfiguration",
      "namespace": null,
      "name": "gmp-operator.gmp-system.monitoring.googleapis.com",
      "checks": [
        {
          "severity": "MEDIUM",
          "title": "Validate admission controller (mutating)",
          "description": "Attackers may use mutating webhooks to intercept and modify all the resources in the cluster. This control lists all mutating webhook configurations that must be verified.",
          "remediation": "Ensure all the webhooks are necessary. Use exception mechanism to prevent repititive notifications.",
          "origin": "kubescape",
          "originId": "C-0039",
          "passed": false,
          "skipped": false,
          "skipReason": null
        }
      ]
    },
    {
      "kind": "Namespace",
      "namespace": null,
      "name": "gmp-system",
      "checks": [
        {
          "severity": "MEDIUM",
          "title": "Cluster internal networking",
          "description": "If no network policy is defined, attackers who gain access to a container may use it to move laterally in the cluster. This control lists namespaces in which no network policy is defined.",
          "remediation": "Define Kubernetes network policies or use alternative products to protect cluster network.",
          "origin": "kubescape",
          "originId": "C-0054",
          "passed": false,
          "skipped": false,
          "skipReason": null
        }
      ]
    },
    {
      "kind": "Namespace",
      "namespace": null,
      "name": "kss",
      "checks": [
        {
          "severity": "MEDIUM",
          "title": "Cluster internal networking",
          "description": "If no network policy is defined, attackers who gain access to a container may use it to move laterally in the cluster. This control lists namespaces in which no network policy is defined.",
          "remediation": "Define Kubernetes network policies or use alternative products to protect cluster network.",
          "origin": "kubescape",
          "originId": "C-0054",
          "passed": false,
          "skipped": false,
          "skipReason": null
        }
      ]
    },
    {
      "kind": "User",
      "namespace": null,
      "name": "system:cloud-controller-manager",
      "checks": [
        {
          "severity": "MEDIUM",
          "title": "Data Destruction",
          "description": "Attackers may attempt to destroy data and resources in the cluster. This includes deleting deployments, configurations, storage, and compute resources. This control identifies all subjects that can delete resources.",
          "remediation": "You should follow the least privilege principle and minimize the number of subjects that can delete resources.",
          "origin": "kubescape",
          "originId": "C-0007",
          "passed": false,
          "skipped": false,
          "skipReason": null
        },
        {
          "severity": "HIGH",
          "title": "List Kubernetes secrets",
          "description": "Attackers who have permissions to access secrets can access sensitive information that might include credentials to various services. This control determines which user, group or service account can list/get secrets.",
          "remediation": "Monitor and approve list of users, groups and service accounts that can access secrets. Use exception mechanism to prevent repetitive the notifications.",
          "origin": "kubescape",
          "originId": "C-0015",
          "passed": false,
          "skipped": false,
          "skipReason": null
        }
      ]
    }
  ],
  "skippedChecks": [
    {
      "severity": "HIGH",
      "title": "Forbidden Container Registries",
      "description": "In cases where the Kubernetes cluster is provided by a CSP (e.g., AKS in Azure, GKE in GCP, or EKS in AWS), compromised cloud credential can lead to the cluster takeover. Attackers may abuse cloud account credentials or IAM mechanism to the cluster’s management layer.",
      "remediation": "Limit the registries from which you pull container images from",
      "origin": "kubescape",
      "originId": "C-0001",
      "passed": false,
      "skipped": true,
      "skipReason": "Control configurations are empty"
    },
    {
      "severity": "MEDIUM",
      "title": "Secret/etcd encryption enabled",
      "description": "All Kubernetes Secrets are stored primarily in etcd therefore it is important to encrypt it.",
      "remediation": "Turn on the etcd encryption in your cluster, for more see the vendor documentation.",
      "origin": "kubescape",
      "originId": "C-0066",
      "passed": false,
      "skipped": true,
      "skipReason": "failed to get GKE descriptive information. Read more: https://hub.armosec.io/docs/kubescape-integration-with-cloud-providers"
    },
    {
      "severity": "MEDIUM",
      "title": "Event logging (CC6.8,CC7.1,CC7.2)",
      "description": "Logging is enabled to monitor the following events at the application and/or infrastructure layers.",
      "remediation": "Turn on audit logging for your cluster. Look at the vendor guidelines for more details",
      "origin": "kubescape",
      "originId": "C-0067",
      "passed": false,
      "skipped": true,
      "skipReason": "failed to get GKE descriptive information. Read more: https://hub.armosec.io/docs/kubescape-integration-with-cloud-providers"
    },
    {
      "severity": "LOW",
      "title": "PSP enabled",
      "description": "PSP enable fine-grained authorization of pod creation and it is important to enable it",
      "remediation": "Turn Pod Security Policies on in your cluster, if you use other admission controllers to control the behavior that PSP controls, exclude this control from your scans",
      "origin": "kubescape",
      "originId": "C-0068",
      "passed": false,
      "skipped": true,
      "skipReason": "failed to get GKE descriptive information. Read more: https://hub.armosec.io/docs/kubescape-integration-with-cloud-providers"
    },
    {
      "severity": "CRITICAL",
      "title": "Disable anonymous access to Kubelet service",
      "description": "By default, requests to the kubelet's HTTPS endpoint that are not rejected by other configured authentication methods are treated as anonymous requests, and given a username of system:anonymous and a group of system:unauthenticated.",
      "remediation": "Start the kubelet with the --anonymous-auth=false flag.",
      "origin": "kubescape",
      "originId": "C-0069",
      "passed": false,
      "skipped": true,
      "skipReason": "This control requires the Kubescape operator installed. To install it, go to\n     https://kubescape.io/docs/install-operator/."
    },
    {
      "severity": "CRITICAL",
      "title": "Enforce Kubelet client TLS authentication",
      "description": "Kubelets are the node level orchestrator in Kubernetes control plane. They are publishing service port 10250 where they accept commands from API server. Operator must make sure that only API server is allowed to submit commands to Kubelet. This is done through client certificate verification, must configure Kubelet with client CA file to use for this purpose.",
      "remediation": "Start the kubelet with the --client-ca-file flag, providing a CA bundle to verify client certificates with.",
      "origin": "kubescape",
      "originId": "C-0070",
      "passed": false,
      "skipped": true,
      "skipReason": "This control requires the Kubescape operator installed. To install it, go to\n     https://kubescape.io/docs/install-operator/."
    },
    {
      "severity": "MEDIUM",
      "title": "CIS-5.1.4 Minimize Container Registries to only those approved",
      "description": "Use approved container registries.",
      "remediation": "If you are using Azure Container Registry you have this option:<https://docs.microsoft.com/en-us/azure/container-registry/container-registry-firewall-access-rules>\n\n For other non-AKS repos using admission controllers or Azure Policy will also work.\n\n Limiting or locking down egress traffic is also recommended:\n<https://docs.microsoft.com/en-us/azure/aks/limit-egress-traffic>",
      "origin": "kubescape",
      "originId": "C-0078",
      "passed": false,
      "skipped": true,
      "skipReason": "Control configurations are empty"
    },
    {
      "severity": "HIGH",
      "title": "CIS-5.5.1 Manage Kubernetes RBAC users with Azure AD",
      "description": "Azure Kubernetes Service (AKS) can be configured to use Azure Active Directory (AD) for user authentication. In this configuration, you sign in to an AKS cluster using an Azure AD authentication token. You can also configure Kubernetes role-based access control (Kubernetes RBAC) to limit access to cluster resources based a user's identity or group membership.",
      "remediation": "Enable RBAC either in the API server configuration or with the Kubernetes provider API",
      "origin": "kubescape",
      "originId": "C-0088",
      "passed": false,
      "skipped": true,
      "skipReason": "failed to get GKE descriptive information. Read more: https://hub.armosec.io/docs/kubescape-integration-with-cloud-providers"
    }
  ]
}